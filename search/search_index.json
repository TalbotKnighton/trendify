{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \uf0c1 For full documentation visit mkdocs.org . Commands \uf0c1 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \uf0c1 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"reference/SUMMARY/","text":"grafana_api dashboard panels xy_chart transformations transformations trendify cli products server","title":"SUMMARY"},{"location":"reference/grafana_api/","text":"grafana_api \uf0c1 Transformation \uf0c1 Bases: BaseModel Annotation \uf0c1 Bases: BaseModel Annotations \uf0c1 Bases: BaseModel Dashboard \uf0c1 Bases: BaseModel DataSource \uf0c1 Bases: BaseModel DefaultDataSource \uf0c1 Bases: DataSource HideFrom \uf0c1 Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false } LineStyle \uf0c1 Bases: BaseModel { \"fill\": \"solid\" } PointSize \uf0c1 Bases: BaseModel { \"fixed\": 3 } ScaleDistribution \uf0c1 Bases: BaseModel { \"type\": \"linear\" } Threshold \uf0c1 Bases: BaseModel { \"color\": \"green\", \"value\": null } Thresholds \uf0c1 Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] } FieldConfig \uf0c1 Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] }, GridPosition \uf0c1 Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 } Legend \uf0c1 Bases: BaseModel Series \uf0c1 Bases: BaseModel ToolTip \uf0c1 Bases: BaseModel Options \uf0c1 Bases: BaseModel URLOptions \uf0c1 Bases: BaseModel Target \uf0c1 Bases: BaseModel Panel \uf0c1 Bases: BaseModel","title":"grafana_api"},{"location":"reference/grafana_api/#grafana_api","text":"","title":"grafana_api"},{"location":"reference/grafana_api/#grafana_api.Transformation","text":"Bases: BaseModel","title":"Transformation"},{"location":"reference/grafana_api/#grafana_api.Annotation","text":"Bases: BaseModel","title":"Annotation"},{"location":"reference/grafana_api/#grafana_api.Annotations","text":"Bases: BaseModel","title":"Annotations"},{"location":"reference/grafana_api/#grafana_api.Dashboard","text":"Bases: BaseModel","title":"Dashboard"},{"location":"reference/grafana_api/#grafana_api.DataSource","text":"Bases: BaseModel","title":"DataSource"},{"location":"reference/grafana_api/#grafana_api.DefaultDataSource","text":"Bases: DataSource","title":"DefaultDataSource"},{"location":"reference/grafana_api/#grafana_api.HideFrom","text":"Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false }","title":"HideFrom"},{"location":"reference/grafana_api/#grafana_api.LineStyle","text":"Bases: BaseModel { \"fill\": \"solid\" }","title":"LineStyle"},{"location":"reference/grafana_api/#grafana_api.PointSize","text":"Bases: BaseModel { \"fixed\": 3 }","title":"PointSize"},{"location":"reference/grafana_api/#grafana_api.ScaleDistribution","text":"Bases: BaseModel { \"type\": \"linear\" }","title":"ScaleDistribution"},{"location":"reference/grafana_api/#grafana_api.Threshold","text":"Bases: BaseModel { \"color\": \"green\", \"value\": null }","title":"Threshold"},{"location":"reference/grafana_api/#grafana_api.Thresholds","text":"Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] }","title":"Thresholds"},{"location":"reference/grafana_api/#grafana_api.FieldConfig","text":"Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] },","title":"FieldConfig"},{"location":"reference/grafana_api/#grafana_api.GridPosition","text":"Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 }","title":"GridPosition"},{"location":"reference/grafana_api/#grafana_api.Legend","text":"Bases: BaseModel","title":"Legend"},{"location":"reference/grafana_api/#grafana_api.Series","text":"Bases: BaseModel","title":"Series"},{"location":"reference/grafana_api/#grafana_api.ToolTip","text":"Bases: BaseModel","title":"ToolTip"},{"location":"reference/grafana_api/#grafana_api.Options","text":"Bases: BaseModel","title":"Options"},{"location":"reference/grafana_api/#grafana_api.URLOptions","text":"Bases: BaseModel","title":"URLOptions"},{"location":"reference/grafana_api/#grafana_api.Target","text":"Bases: BaseModel","title":"Target"},{"location":"reference/grafana_api/#grafana_api.Panel","text":"Bases: BaseModel","title":"Panel"},{"location":"reference/grafana_api/dashboard/","text":"grafana_api.dashboard \uf0c1 Dashboard definition Annotation \uf0c1 Bases: BaseModel Annotations \uf0c1 Bases: BaseModel Dashboard \uf0c1 Bases: BaseModel","title":"dashboard"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard","text":"Dashboard definition","title":"dashboard"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Annotation","text":"Bases: BaseModel","title":"Annotation"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Annotations","text":"Bases: BaseModel","title":"Annotations"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Dashboard","text":"Bases: BaseModel","title":"Dashboard"},{"location":"reference/grafana_api/panels/","text":"grafana_api.panels \uf0c1 DataSource \uf0c1 Bases: BaseModel DefaultDataSource \uf0c1 Bases: DataSource HideFrom \uf0c1 Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false } LineStyle \uf0c1 Bases: BaseModel { \"fill\": \"solid\" } PointSize \uf0c1 Bases: BaseModel { \"fixed\": 3 } ScaleDistribution \uf0c1 Bases: BaseModel { \"type\": \"linear\" } Threshold \uf0c1 Bases: BaseModel { \"color\": \"green\", \"value\": null } Thresholds \uf0c1 Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] } FieldConfig \uf0c1 Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] }, GridPosition \uf0c1 Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 } Legend \uf0c1 Bases: BaseModel Series \uf0c1 Bases: BaseModel ToolTip \uf0c1 Bases: BaseModel Options \uf0c1 Bases: BaseModel URLOptions \uf0c1 Bases: BaseModel Target \uf0c1 Bases: BaseModel Panel \uf0c1 Bases: BaseModel","title":"panels"},{"location":"reference/grafana_api/panels/#grafana_api.panels","text":"","title":"panels"},{"location":"reference/grafana_api/panels/#grafana_api.panels.DataSource","text":"Bases: BaseModel","title":"DataSource"},{"location":"reference/grafana_api/panels/#grafana_api.panels.DefaultDataSource","text":"Bases: DataSource","title":"DefaultDataSource"},{"location":"reference/grafana_api/panels/#grafana_api.panels.HideFrom","text":"Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false }","title":"HideFrom"},{"location":"reference/grafana_api/panels/#grafana_api.panels.LineStyle","text":"Bases: BaseModel { \"fill\": \"solid\" }","title":"LineStyle"},{"location":"reference/grafana_api/panels/#grafana_api.panels.PointSize","text":"Bases: BaseModel { \"fixed\": 3 }","title":"PointSize"},{"location":"reference/grafana_api/panels/#grafana_api.panels.ScaleDistribution","text":"Bases: BaseModel { \"type\": \"linear\" }","title":"ScaleDistribution"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Threshold","text":"Bases: BaseModel { \"color\": \"green\", \"value\": null }","title":"Threshold"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Thresholds","text":"Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] }","title":"Thresholds"},{"location":"reference/grafana_api/panels/#grafana_api.panels.FieldConfig","text":"Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] },","title":"FieldConfig"},{"location":"reference/grafana_api/panels/#grafana_api.panels.GridPosition","text":"Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 }","title":"GridPosition"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Legend","text":"Bases: BaseModel","title":"Legend"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Series","text":"Bases: BaseModel","title":"Series"},{"location":"reference/grafana_api/panels/#grafana_api.panels.ToolTip","text":"Bases: BaseModel","title":"ToolTip"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Options","text":"Bases: BaseModel","title":"Options"},{"location":"reference/grafana_api/panels/#grafana_api.panels.URLOptions","text":"Bases: BaseModel","title":"URLOptions"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Target","text":"Bases: BaseModel","title":"Target"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Panel","text":"Bases: BaseModel","title":"Panel"},{"location":"reference/grafana_api/panels/xy_chart/","text":"grafana_api.panels.xy_chart \uf0c1 Need to produce a Dashboard ``` DataSource \uf0c1 Bases: BaseModel DefaultDataSource \uf0c1 Bases: DataSource HideFrom \uf0c1 Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false } LineStyle \uf0c1 Bases: BaseModel { \"fill\": \"solid\" } PointSize \uf0c1 Bases: BaseModel { \"fixed\": 3 } ScaleDistribution \uf0c1 Bases: BaseModel { \"type\": \"linear\" } Threshold \uf0c1 Bases: BaseModel { \"color\": \"green\", \"value\": null } Thresholds \uf0c1 Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] } FieldConfig \uf0c1 Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] }, GridPosition \uf0c1 Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 } Legend \uf0c1 Bases: BaseModel MatcherOptions \uf0c1 Bases: BaseModel Series \uf0c1 Bases: BaseModel ToolTip \uf0c1 Bases: BaseModel Options \uf0c1 Bases: BaseModel URLOptions \uf0c1 Bases: BaseModel Target \uf0c1 Bases: BaseModel Panel \uf0c1 Bases: BaseModel","title":"xy_chart"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart","text":"Need to produce a Dashboard ```","title":"xy_chart"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.DataSource","text":"Bases: BaseModel","title":"DataSource"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.DefaultDataSource","text":"Bases: DataSource","title":"DefaultDataSource"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.HideFrom","text":"Bases: BaseModel { \"legend\": false, \"tooltip\": false, \"viz\": false }","title":"HideFrom"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.LineStyle","text":"Bases: BaseModel { \"fill\": \"solid\" }","title":"LineStyle"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.PointSize","text":"Bases: BaseModel { \"fixed\": 3 }","title":"PointSize"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.ScaleDistribution","text":"Bases: BaseModel { \"type\": \"linear\" }","title":"ScaleDistribution"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Threshold","text":"Bases: BaseModel { \"color\": \"green\", \"value\": null }","title":"Threshold"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Thresholds","text":"Bases: BaseModel \"thresholds\": { \"mode\": \"absolute\", \"steps\": [ ] }","title":"Thresholds"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.FieldConfig","text":"Bases: BaseModel \"fieldConfig\": { \"defaults\": { \"fieldMinMax\": false, \"mappings\": [], }, \"overrides\": [] },","title":"FieldConfig"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.GridPosition","text":"Bases: BaseModel \"gridPos\": { \"h\": 8, \"w\": 12, \"x\": 12, \"y\": 16 }","title":"GridPosition"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Legend","text":"Bases: BaseModel","title":"Legend"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.MatcherOptions","text":"Bases: BaseModel","title":"MatcherOptions"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Series","text":"Bases: BaseModel","title":"Series"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.ToolTip","text":"Bases: BaseModel","title":"ToolTip"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Options","text":"Bases: BaseModel","title":"Options"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.URLOptions","text":"Bases: BaseModel","title":"URLOptions"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Target","text":"Bases: BaseModel","title":"Target"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Panel","text":"Bases: BaseModel","title":"Panel"},{"location":"reference/grafana_api/transformations/","text":"grafana_api.transformations \uf0c1 Transformation \uf0c1 Bases: BaseModel","title":"transformations"},{"location":"reference/grafana_api/transformations/#grafana_api.transformations","text":"","title":"transformations"},{"location":"reference/grafana_api/transformations/#grafana_api.transformations.Transformation","text":"Bases: BaseModel","title":"Transformation"},{"location":"reference/grafana_api/transformations/transformations/","text":"grafana_api.transformations.transformations \uf0c1 { \"id\": \"merge\", \"options\": {} }, { \"id\": \"partitionByValues\", \"options\": { \"fields\": [ \"label\" ], \"keepFields\": false, \"naming\": { \"asLabels\": false } } } Transformation \uf0c1 Bases: BaseModel","title":"transformations"},{"location":"reference/grafana_api/transformations/transformations/#grafana_api.transformations.transformations","text":"{ \"id\": \"merge\", \"options\": {} }, { \"id\": \"partitionByValues\", \"options\": { \"fields\": [ \"label\" ], \"keepFields\": false, \"naming\": { \"asLabels\": false } } }","title":"transformations"},{"location":"reference/grafana_api/transformations/transformations/#grafana_api.transformations.transformations.Transformation","text":"Bases: BaseModel","title":"Transformation"},{"location":"reference/trendify/","text":"trendify \uf0c1 Provides top-level imports Format2D \uf0c1 Bases: HashableBase Formatting data for matplotlib figure and axes Config \uf0c1 Forbids extra arguments union_from_iterable(format2ds: Iterable[Format2D]) classmethod \uf0c1 Gets the most inclusive format object (in terms of limits) from a list of Format2D objects. Requires that the label and title fields are identical for all format objects in the list. Parameters: format2ds ( Iterable [ Format2D ] ) \u2013 Iterable of Format2D objects. Returns: Format2D \u2013 Single format object from list of objects. Pen \uf0c1 Bases: HashableBase Defines the pen drawing to matplotlib. Config \uf0c1 Forbids extra attributes as_scatter_plot_kwargs() \uf0c1 Returns kwargs dictionary for passing to matplotlib plot method Marker \uf0c1 Bases: HashableBase Defines marker for scattering to matplotlib Config \uf0c1 Forbids extra attributes from_pen(pen: Pen, symbol: str = '.') classmethod \uf0c1 Converts Pen to marker with the option to specify a symbol as_scatter_plot_kwargs() \uf0c1 Returns: dict \u2013 dictionary of kwargs for matplotlib scatter HistogramStyle \uf0c1 Bases: HashableBase Label and style data for generating histogram bars Attributes: color ( str ) \u2013 Color of bars label ( str | None ) \u2013 Legend entry histtype ( str ) \u2013 Histogram type corresponding to matplotlib argument of same name alpha_edge ( float ) \u2013 Opacity of bar edge alpha_face ( float ) \u2013 Opacity of bar face linewidth ( float ) \u2013 Line width of bar outline as_plot_kwargs() \uf0c1 Returns: dict \u2013 kwargs for matplotlib hist method Trace2D \uf0c1 Bases: XYData A collection of points comprising a trace. Use the Trace2D.from_xy constructor. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. pen ( Pen ) \u2013 Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure. x property \uf0c1 Returns an array of x values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of x values from self.points ' y property \uf0c1 Returns an array of y values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of y values from self.points Config \uf0c1 Forbids extra attributes propagate_format2d_and_pen(marker_symbol='.') -> None \uf0c1 Propagates format and style info to all self.points (in-place). I thought this would be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes. Keeping for potential future use case. Parameters: marker_symbol ( str , default: '.' ) \u2013 Valid matplotlib marker symbol from_xy(tags: Tags, x: NDArray[Shape['*'], float], y: NDArray[Shape['*'], float], pen: Pen = Pen(), format2d: Format2D = Format2D()) classmethod \uf0c1 Creates a list of Point2D s from xy data and returns a new Trace2D product. Parameters: tags ( Tags ) \u2013 Hashable tags used to sort data products x ( NDArray [ Shape ['*'], float ] ) \u2013 x values y ( NDArray [ Shape ['*'], float ] ) \u2013 y values pen ( Pen , default: Pen () ) \u2013 Style and label for trace format2d ( Format2D , default: Format2D () ) \u2013 format to apply to matplotlib plot_to_ax(ax: plt.Axes) \uf0c1 Plots xy data from trace to a matplotlib axes object. Parameters: ax ( Axes ) \u2013 axes to which xy data should be plotted Point2D \uf0c1 Bases: XYData Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. marker ( Marker ) \u2013 Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure. Config \uf0c1 Forbids extra attributes HistogramEntry \uf0c1 Bases: DataProduct Use this class to specify a value to be collected into a matplotlib histogram. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. value ( float | str ) \u2013 Value to be binned tags ( Tags ) \u2013 Hashable tags used to sort data products style ( HistogramStyle ) \u2013 Style of histogram display format2d ( Format2D ) \u2013 Format to apply to single axis figure Config \uf0c1 Forbids extra attributes TableEntry \uf0c1 Bases: DataProduct Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. row ( float | str ) \u2013 Value to be binned col ( float | str ) \u2013 Hashable tags used to sort data products value ( float | str ) \u2013 Style of histogram display unit ( str | None ) \u2013 Format to apply to single axis figure get_entry_dict() \uf0c1 Returns a dictionary of entries to be used in creating a table. Returns: dict [ str , str | float ] \u2013 Dictionary of entries to be used in creating a melted DataFrame pivot_table(melted: pd.DataFrame) classmethod \uf0c1 Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame Parameters: melted ( DataFrame ) \u2013 Melted data frame having columns named 'row' , 'col' , 'value' . Returns: DataFrame | None \u2013 pivoted DataFrame if pivot works else None . Pivot operation fails if row or column index pairs are repeated. load_and_pivot(path: Path) classmethod \uf0c1 Loads melted table from csv and pivots to wide form. csv should have columns named 'row' , 'col' , and 'value' . Parameters: path ( Path ) \u2013 path to CSV file Returns: DataFrame | None \u2013 Pivoted data frame or elese None if pivot operation fails. DataProductCollection \uf0c1 Bases: BaseModel A collection of data products. Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc. Attributes: elements ( ProductList ) \u2013 A list of data products. from_iterable(*products: Tuple[ProductList, ...]) classmethod \uf0c1 Returns a new instance containing all of the products provided in the *products argument. Parameters: products ( Tuple [ ProductList , ...] , default: () ) \u2013 Lists of data products to combine into a collection Returns: cls \u2013 A data product collection containing all of the provided products in the *products argument. get_tags(data_product_type: Type[DataProduct] | None = None) -> set \uf0c1 Gets the tags related to a given type of DataProduct . Parent classes will match all child class types. Parameters: data_product_type ( Type [ DataProduct ] | None , default: None ) \u2013 type for which you want to get the list of tags Returns: set \u2013 set of tags applying to the given data_product_type . add_products(*products: DataProduct) \uf0c1 Parameters: products ( Tuple [ DataProduct | ProductList , ...] , default: () ) \u2013 Products or lists of products to be appended to collection elements. drop_products(tag: Hashable | None = None, object_type: Type[R] | None = None) -> Self[R] \uf0c1 Removes products matching tag and/or object_type from collection elements. Parameters: tag ( Tag | None , default: None ) \u2013 Tag for which data products should be dropped object_type ( Type | None , default: None ) \u2013 Type of data product to drop Returns: DataProductCollection \u2013 A new collection from which matching elements have been dropped. get_products(tag: Hashable | None = None, object_type: Type[R] | None = None) -> Self[R] \uf0c1 Returns a new collection containing products matching tag and/or object_type . Both tag and object_type default to None which matches all products. Parameters: tag ( Tag | None , default: None ) \u2013 Tag of data products to be kept. None matches all products. object_type ( Type | None , default: None ) \u2013 Type of data product to keep. None matches all products. Returns: DataProductCollection \u2013 A new collection containing matching elements. union(*collections: DataProductCollection) classmethod \uf0c1 Aggregates all of the products from multiple collections into a new larger collection. Parameters: collections ( Tuple [ DataProductCollection , ...] , default: () ) \u2013 Data product collections for which the products should be combined into a new collection. Returns: Type [ Self ] \u2013 A new data product collection containing all products from the provided *collections . collect_from_all_jsons(*dirs: Path, recursive=False) classmethod \uf0c1 Loads all products from JSONs in the given list of directories. If recursive is set to True , the directories will be searched recursively (this could lead to double counting if you pass in subdirectories of a parent). Parameters: dirs ( Tuple [ Path , ...] , default: () ) \u2013 Directories from which to load data product JSON files. recursive ( bool , default: False ) \u2013 whether or not to search each of the provided directories recursively for data product json files. Returns: Type [ Self ] | None \u2013 Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found. sort_by_tags(dirs_in: List[Path], dir_out: Path) classmethod \uf0c1 Loads the data product JSON files from dirs_in sorts the products. Sorted products are written to smaller files in a nested directory structure under dir_out . The nested directory structure is generated accordint to the data tags. Resulting product files are named according to the directory from which they were originally loaded. Parameters: dirs_in ( List [ Path ] ) \u2013 Directories from which the data product JSON files are to be loaded. dir_out ( Path ) \u2013 Directory to which the sorted data products will be written into a nested folder structure generated according to the data tags. process_single_tag_collection(dir_in: Path, dir_out: Path, make_tables: bool, make_xy_plots: bool, make_histograms: bool, dpi: int) classmethod \uf0c1 Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: dir_in ( Path ) \u2013 dir_out ( Path ) \u2013 make_tables ( bool ) \u2013 make_xy_plots ( bool ) \u2013 make_histograms ( bool ) \u2013 dpi ( int ) \u2013 make_grafana_panels(dir_in: Path, panel_dir: Path) classmethod \uf0c1 Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: tag ( Tag ) \u2013 Tag for which the panel(s) are to be created dir_in ( Path ) \u2013 Directory from which to read data products (should be sorted first) panel_dir ( Path ) \u2013 Where to put the panel information DataProduct \uf0c1 Bases: BaseModel Base class for data products to be generated and handled. Attributes: product_type ( Hashable ) \u2013 Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection . tags ( Tags ) \u2013 Tags to be used for sorting data. metadata ( dict [ str , str ] ) \u2013 A dictionary of metadata to be used as a tool tip for mousover in grafana Config \uf0c1 Disallows additional attributes __init_subclass__(**kwargs: Any) -> None \uf0c1 Registers child subclasses to be able to parse them from JSON file using the deserialize_child_classes method append_to_list(l: List) \uf0c1 Appends self to list. Parameters: l ( List ) \u2013 list to which self will be appended Returns: Self \u2013 returns instance of self deserialize_child_classes(key: str, **kwargs) classmethod \uf0c1 Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate Parameters: key ( str ) \u2013 json key kwargs ( dict , default: {} ) \u2013 json entries stored under given key XYData \uf0c1 Bases: DataProduct Base class for children of DataProduct to be plotted ax xy data on a 2D plot make_products(product_generator: Callable[[Path], DataProductCollection] | None, dirs: List[Path], n_procs: int = 1) \uf0c1 Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. sort_products(data_dirs: List[Path], output_dir: Path) \uf0c1 Loads the tagged data products from data_dirs and sorts them (by tag) into a nested folder structure rooted at output_dir . Parameters: data_dirs ( List [ Path ] ) \u2013 Directories containing JSON data product files output_dir ( Path ) \u2013 Directory to which sorted products will be written make_grafana_dashboard(sorted_products_dir: Path, output_dir: Path, n_procs: int = 1) \uf0c1 Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots. Parameters: sorted_products_dir ( Path ) \u2013 Root directory into which products have been sorted by tag output_dir ( Path ) \u2013 Root directory into which Grafana dashboard and panal definitions will be written n_procs ( int , default: 1 ) \u2013 Number of parallel tasks used for processing data product tags make_tables_and_figures(products_dir: Path, output_dir: Path, dpi: int = 500, n_procs: int = 1, make_tables: bool = True, make_xy_plots: bool = True, make_histograms: bool = True) \uf0c1 Makes CSV tables and creates plots (using matplotlib). Tags will be processed in parallel and output in nested directory structure under output_dir . Parameters: products_dir ( Path ) \u2013 Directory to which the sorted data products will be written output_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib. get_data_products(analysis: str = 'workdir.products', tag: str = 'trace_plots', product_type: str = 'DataProduct') \uf0c1 Traces parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"","title":"trendify"},{"location":"reference/trendify/#trendify","text":"Provides top-level imports","title":"trendify"},{"location":"reference/trendify/#trendify.Format2D","text":"Bases: HashableBase Formatting data for matplotlib figure and axes","title":"Format2D"},{"location":"reference/trendify/#trendify.Format2D.Config","text":"Forbids extra arguments","title":"Config"},{"location":"reference/trendify/#trendify.Format2D.union_from_iterable","text":"Gets the most inclusive format object (in terms of limits) from a list of Format2D objects. Requires that the label and title fields are identical for all format objects in the list. Parameters: format2ds ( Iterable [ Format2D ] ) \u2013 Iterable of Format2D objects. Returns: Format2D \u2013 Single format object from list of objects.","title":"union_from_iterable"},{"location":"reference/trendify/#trendify.Pen","text":"Bases: HashableBase Defines the pen drawing to matplotlib.","title":"Pen"},{"location":"reference/trendify/#trendify.Pen.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/#trendify.Pen.as_scatter_plot_kwargs","text":"Returns kwargs dictionary for passing to matplotlib plot method","title":"as_scatter_plot_kwargs"},{"location":"reference/trendify/#trendify.Marker","text":"Bases: HashableBase Defines marker for scattering to matplotlib","title":"Marker"},{"location":"reference/trendify/#trendify.Marker.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/#trendify.Marker.from_pen","text":"Converts Pen to marker with the option to specify a symbol","title":"from_pen"},{"location":"reference/trendify/#trendify.Marker.as_scatter_plot_kwargs","text":"Returns: dict \u2013 dictionary of kwargs for matplotlib scatter","title":"as_scatter_plot_kwargs"},{"location":"reference/trendify/#trendify.HistogramStyle","text":"Bases: HashableBase Label and style data for generating histogram bars Attributes: color ( str ) \u2013 Color of bars label ( str | None ) \u2013 Legend entry histtype ( str ) \u2013 Histogram type corresponding to matplotlib argument of same name alpha_edge ( float ) \u2013 Opacity of bar edge alpha_face ( float ) \u2013 Opacity of bar face linewidth ( float ) \u2013 Line width of bar outline","title":"HistogramStyle"},{"location":"reference/trendify/#trendify.HistogramStyle.as_plot_kwargs","text":"Returns: dict \u2013 kwargs for matplotlib hist method","title":"as_plot_kwargs"},{"location":"reference/trendify/#trendify.Trace2D","text":"Bases: XYData A collection of points comprising a trace. Use the Trace2D.from_xy constructor. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. pen ( Pen ) \u2013 Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure.","title":"Trace2D"},{"location":"reference/trendify/#trendify.Trace2D.x","text":"Returns an array of x values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of x values from self.points '","title":"x"},{"location":"reference/trendify/#trendify.Trace2D.y","text":"Returns an array of y values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of y values from self.points","title":"y"},{"location":"reference/trendify/#trendify.Trace2D.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/#trendify.Trace2D.propagate_format2d_and_pen","text":"Propagates format and style info to all self.points (in-place). I thought this would be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes. Keeping for potential future use case. Parameters: marker_symbol ( str , default: '.' ) \u2013 Valid matplotlib marker symbol","title":"propagate_format2d_and_pen"},{"location":"reference/trendify/#trendify.Trace2D.from_xy","text":"Creates a list of Point2D s from xy data and returns a new Trace2D product. Parameters: tags ( Tags ) \u2013 Hashable tags used to sort data products x ( NDArray [ Shape ['*'], float ] ) \u2013 x values y ( NDArray [ Shape ['*'], float ] ) \u2013 y values pen ( Pen , default: Pen () ) \u2013 Style and label for trace format2d ( Format2D , default: Format2D () ) \u2013 format to apply to matplotlib","title":"from_xy"},{"location":"reference/trendify/#trendify.Trace2D.plot_to_ax","text":"Plots xy data from trace to a matplotlib axes object. Parameters: ax ( Axes ) \u2013 axes to which xy data should be plotted","title":"plot_to_ax"},{"location":"reference/trendify/#trendify.Point2D","text":"Bases: XYData Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. marker ( Marker ) \u2013 Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure.","title":"Point2D"},{"location":"reference/trendify/#trendify.Point2D.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/#trendify.HistogramEntry","text":"Bases: DataProduct Use this class to specify a value to be collected into a matplotlib histogram. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. value ( float | str ) \u2013 Value to be binned tags ( Tags ) \u2013 Hashable tags used to sort data products style ( HistogramStyle ) \u2013 Style of histogram display format2d ( Format2D ) \u2013 Format to apply to single axis figure","title":"HistogramEntry"},{"location":"reference/trendify/#trendify.HistogramEntry.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/#trendify.TableEntry","text":"Bases: DataProduct Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. row ( float | str ) \u2013 Value to be binned col ( float | str ) \u2013 Hashable tags used to sort data products value ( float | str ) \u2013 Style of histogram display unit ( str | None ) \u2013 Format to apply to single axis figure","title":"TableEntry"},{"location":"reference/trendify/#trendify.TableEntry.get_entry_dict","text":"Returns a dictionary of entries to be used in creating a table. Returns: dict [ str , str | float ] \u2013 Dictionary of entries to be used in creating a melted DataFrame","title":"get_entry_dict"},{"location":"reference/trendify/#trendify.TableEntry.pivot_table","text":"Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame Parameters: melted ( DataFrame ) \u2013 Melted data frame having columns named 'row' , 'col' , 'value' . Returns: DataFrame | None \u2013 pivoted DataFrame if pivot works else None . Pivot operation fails if row or column index pairs are repeated.","title":"pivot_table"},{"location":"reference/trendify/#trendify.TableEntry.load_and_pivot","text":"Loads melted table from csv and pivots to wide form. csv should have columns named 'row' , 'col' , and 'value' . Parameters: path ( Path ) \u2013 path to CSV file Returns: DataFrame | None \u2013 Pivoted data frame or elese None if pivot operation fails.","title":"load_and_pivot"},{"location":"reference/trendify/#trendify.DataProductCollection","text":"Bases: BaseModel A collection of data products. Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc. Attributes: elements ( ProductList ) \u2013 A list of data products.","title":"DataProductCollection"},{"location":"reference/trendify/#trendify.DataProductCollection.from_iterable","text":"Returns a new instance containing all of the products provided in the *products argument. Parameters: products ( Tuple [ ProductList , ...] , default: () ) \u2013 Lists of data products to combine into a collection Returns: cls \u2013 A data product collection containing all of the provided products in the *products argument.","title":"from_iterable"},{"location":"reference/trendify/#trendify.DataProductCollection.get_tags","text":"Gets the tags related to a given type of DataProduct . Parent classes will match all child class types. Parameters: data_product_type ( Type [ DataProduct ] | None , default: None ) \u2013 type for which you want to get the list of tags Returns: set \u2013 set of tags applying to the given data_product_type .","title":"get_tags"},{"location":"reference/trendify/#trendify.DataProductCollection.add_products","text":"Parameters: products ( Tuple [ DataProduct | ProductList , ...] , default: () ) \u2013 Products or lists of products to be appended to collection elements.","title":"add_products"},{"location":"reference/trendify/#trendify.DataProductCollection.drop_products","text":"Removes products matching tag and/or object_type from collection elements. Parameters: tag ( Tag | None , default: None ) \u2013 Tag for which data products should be dropped object_type ( Type | None , default: None ) \u2013 Type of data product to drop Returns: DataProductCollection \u2013 A new collection from which matching elements have been dropped.","title":"drop_products"},{"location":"reference/trendify/#trendify.DataProductCollection.get_products","text":"Returns a new collection containing products matching tag and/or object_type . Both tag and object_type default to None which matches all products. Parameters: tag ( Tag | None , default: None ) \u2013 Tag of data products to be kept. None matches all products. object_type ( Type | None , default: None ) \u2013 Type of data product to keep. None matches all products. Returns: DataProductCollection \u2013 A new collection containing matching elements.","title":"get_products"},{"location":"reference/trendify/#trendify.DataProductCollection.union","text":"Aggregates all of the products from multiple collections into a new larger collection. Parameters: collections ( Tuple [ DataProductCollection , ...] , default: () ) \u2013 Data product collections for which the products should be combined into a new collection. Returns: Type [ Self ] \u2013 A new data product collection containing all products from the provided *collections .","title":"union"},{"location":"reference/trendify/#trendify.DataProductCollection.collect_from_all_jsons","text":"Loads all products from JSONs in the given list of directories. If recursive is set to True , the directories will be searched recursively (this could lead to double counting if you pass in subdirectories of a parent). Parameters: dirs ( Tuple [ Path , ...] , default: () ) \u2013 Directories from which to load data product JSON files. recursive ( bool , default: False ) \u2013 whether or not to search each of the provided directories recursively for data product json files. Returns: Type [ Self ] | None \u2013 Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found.","title":"collect_from_all_jsons"},{"location":"reference/trendify/#trendify.DataProductCollection.sort_by_tags","text":"Loads the data product JSON files from dirs_in sorts the products. Sorted products are written to smaller files in a nested directory structure under dir_out . The nested directory structure is generated accordint to the data tags. Resulting product files are named according to the directory from which they were originally loaded. Parameters: dirs_in ( List [ Path ] ) \u2013 Directories from which the data product JSON files are to be loaded. dir_out ( Path ) \u2013 Directory to which the sorted data products will be written into a nested folder structure generated according to the data tags.","title":"sort_by_tags"},{"location":"reference/trendify/#trendify.DataProductCollection.process_single_tag_collection","text":"Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: dir_in ( Path ) \u2013 dir_out ( Path ) \u2013 make_tables ( bool ) \u2013 make_xy_plots ( bool ) \u2013 make_histograms ( bool ) \u2013 dpi ( int ) \u2013","title":"process_single_tag_collection"},{"location":"reference/trendify/#trendify.DataProductCollection.make_grafana_panels","text":"Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: tag ( Tag ) \u2013 Tag for which the panel(s) are to be created dir_in ( Path ) \u2013 Directory from which to read data products (should be sorted first) panel_dir ( Path ) \u2013 Where to put the panel information","title":"make_grafana_panels"},{"location":"reference/trendify/#trendify.DataProduct","text":"Bases: BaseModel Base class for data products to be generated and handled. Attributes: product_type ( Hashable ) \u2013 Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection . tags ( Tags ) \u2013 Tags to be used for sorting data. metadata ( dict [ str , str ] ) \u2013 A dictionary of metadata to be used as a tool tip for mousover in grafana","title":"DataProduct"},{"location":"reference/trendify/#trendify.DataProduct.Config","text":"Disallows additional attributes","title":"Config"},{"location":"reference/trendify/#trendify.DataProduct.__init_subclass__","text":"Registers child subclasses to be able to parse them from JSON file using the deserialize_child_classes method","title":"__init_subclass__"},{"location":"reference/trendify/#trendify.DataProduct.append_to_list","text":"Appends self to list. Parameters: l ( List ) \u2013 list to which self will be appended Returns: Self \u2013 returns instance of self","title":"append_to_list"},{"location":"reference/trendify/#trendify.DataProduct.deserialize_child_classes","text":"Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate Parameters: key ( str ) \u2013 json key kwargs ( dict , default: {} ) \u2013 json entries stored under given key","title":"deserialize_child_classes"},{"location":"reference/trendify/#trendify.XYData","text":"Bases: DataProduct Base class for children of DataProduct to be plotted ax xy data on a 2D plot","title":"XYData"},{"location":"reference/trendify/#trendify.make_products","text":"Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.","title":"make_products"},{"location":"reference/trendify/#trendify.sort_products","text":"Loads the tagged data products from data_dirs and sorts them (by tag) into a nested folder structure rooted at output_dir . Parameters: data_dirs ( List [ Path ] ) \u2013 Directories containing JSON data product files output_dir ( Path ) \u2013 Directory to which sorted products will be written","title":"sort_products"},{"location":"reference/trendify/#trendify.make_grafana_dashboard","text":"Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots. Parameters: sorted_products_dir ( Path ) \u2013 Root directory into which products have been sorted by tag output_dir ( Path ) \u2013 Root directory into which Grafana dashboard and panal definitions will be written n_procs ( int , default: 1 ) \u2013 Number of parallel tasks used for processing data product tags","title":"make_grafana_dashboard"},{"location":"reference/trendify/#trendify.make_tables_and_figures","text":"Makes CSV tables and creates plots (using matplotlib). Tags will be processed in parallel and output in nested directory structure under output_dir . Parameters: products_dir ( Path ) \u2013 Directory to which the sorted data products will be written output_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib.","title":"make_tables_and_figures"},{"location":"reference/trendify/#trendify.get_data_products","text":"Traces parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"","title":"get_data_products"},{"location":"reference/trendify/cli/","text":"trendify.cli \uf0c1","title":"cli"},{"location":"reference/trendify/cli/#trendify.cli","text":"","title":"cli"},{"location":"reference/trendify/products/","text":"trendify.products \uf0c1 Module for generating, sorting, and plotting data products. This uses pydantic dataclasses for JSON serialization to avoid overloading system memory. Some important learning material for pydantic classes and JSON (de)serialization: Nested Pydantic Models Deserializing Child Classes Attributes: DATA_PRODUCTS_FNAME ( str ) \u2013 Hard-coded json file name 'data_products.json' Tag = Union[Tuple[Hashable, ...], Hashable] module-attribute \uf0c1 Determines what types can be used to define a tag Tags = List[Tag] module-attribute \uf0c1 List of tags DATA_PRODUCTS_FNAME = 'data_products.json' module-attribute \uf0c1 Hard-coded file name for storing data products in batch-processed input directories. SingleAxisFigure \uf0c1 Bases: BaseModel Data class storing a matlab figure and axis. The stored tag data in this class is so-far unused. Attributes: ax ( Axes ) \u2013 Matplotlib axis to which data will be plotted fig ( Figure ) \u2013 Matplotlib figure. tag ( Hashable ) \u2013 Figure tag. Not yet used. new(tag: Hashable) classmethod \uf0c1 Creates new figure and axis. Returns new instance of this class. Parameters: tag ( Hashable ) \u2013 tag (not yet used) Returns: Type [ Self ] \u2013 New single axis figure apply_format(format2d: Format2D) \uf0c1 Applies format to figure and axes labels and limits Parameters: format2d ( Format2D ) \u2013 format information to apply to the single axis figure savefig(path: Path, dpi: int = 500) \uf0c1 Wrapper on matplotlib savefig method. Saves figure to given path with given dpi resolution. Returns: Self \u2013 Returns self __del__() \uf0c1 Closes stored matplotlib figure before deleting reference to object. HashableBase \uf0c1 Bases: BaseModel Defines a base for hashable pydantic data classes so that they can be reduced to a minimal set through type-casting. __hash__() \uf0c1 Defines hash function Format2D \uf0c1 Bases: HashableBase Formatting data for matplotlib figure and axes Config \uf0c1 Forbids extra arguments union_from_iterable(format2ds: Iterable[Format2D]) classmethod \uf0c1 Gets the most inclusive format object (in terms of limits) from a list of Format2D objects. Requires that the label and title fields are identical for all format objects in the list. Parameters: format2ds ( Iterable [ Format2D ] ) \u2013 Iterable of Format2D objects. Returns: Format2D \u2013 Single format object from list of objects. Pen \uf0c1 Bases: HashableBase Defines the pen drawing to matplotlib. Config \uf0c1 Forbids extra attributes as_scatter_plot_kwargs() \uf0c1 Returns kwargs dictionary for passing to matplotlib plot method Marker \uf0c1 Bases: HashableBase Defines marker for scattering to matplotlib Config \uf0c1 Forbids extra attributes from_pen(pen: Pen, symbol: str = '.') classmethod \uf0c1 Converts Pen to marker with the option to specify a symbol as_scatter_plot_kwargs() \uf0c1 Returns: dict \u2013 dictionary of kwargs for matplotlib scatter DataProduct \uf0c1 Bases: BaseModel Base class for data products to be generated and handled. Attributes: product_type ( Hashable ) \u2013 Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection . tags ( Tags ) \u2013 Tags to be used for sorting data. metadata ( dict [ str , str ] ) \u2013 A dictionary of metadata to be used as a tool tip for mousover in grafana Config \uf0c1 Disallows additional attributes __init_subclass__(**kwargs: Any) -> None \uf0c1 Registers child subclasses to be able to parse them from JSON file using the deserialize_child_classes method append_to_list(l: List) \uf0c1 Appends self to list. Parameters: l ( List ) \u2013 list to which self will be appended Returns: Self \u2013 returns instance of self deserialize_child_classes(key: str, **kwargs) classmethod \uf0c1 Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate Parameters: key ( str ) \u2013 json key kwargs ( dict , default: {} ) \u2013 json entries stored under given key XYData \uf0c1 Bases: DataProduct Base class for children of DataProduct to be plotted ax xy data on a 2D plot Trace2D \uf0c1 Bases: XYData A collection of points comprising a trace. Use the Trace2D.from_xy constructor. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. pen ( Pen ) \u2013 Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure. x property \uf0c1 Returns an array of x values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of x values from self.points ' y property \uf0c1 Returns an array of y values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of y values from self.points Config \uf0c1 Forbids extra attributes propagate_format2d_and_pen(marker_symbol='.') -> None \uf0c1 Propagates format and style info to all self.points (in-place). I thought this would be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes. Keeping for potential future use case. Parameters: marker_symbol ( str , default: '.' ) \u2013 Valid matplotlib marker symbol from_xy(tags: Tags, x: NDArray[Shape['*'], float], y: NDArray[Shape['*'], float], pen: Pen = Pen(), format2d: Format2D = Format2D()) classmethod \uf0c1 Creates a list of Point2D s from xy data and returns a new Trace2D product. Parameters: tags ( Tags ) \u2013 Hashable tags used to sort data products x ( NDArray [ Shape ['*'], float ] ) \u2013 x values y ( NDArray [ Shape ['*'], float ] ) \u2013 y values pen ( Pen , default: Pen () ) \u2013 Style and label for trace format2d ( Format2D , default: Format2D () ) \u2013 format to apply to matplotlib plot_to_ax(ax: plt.Axes) \uf0c1 Plots xy data from trace to a matplotlib axes object. Parameters: ax ( Axes ) \u2013 axes to which xy data should be plotted Point2D \uf0c1 Bases: XYData Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. marker ( Marker ) \u2013 Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure. Config \uf0c1 Forbids extra attributes HistogramStyle \uf0c1 Bases: HashableBase Label and style data for generating histogram bars Attributes: color ( str ) \u2013 Color of bars label ( str | None ) \u2013 Legend entry histtype ( str ) \u2013 Histogram type corresponding to matplotlib argument of same name alpha_edge ( float ) \u2013 Opacity of bar edge alpha_face ( float ) \u2013 Opacity of bar face linewidth ( float ) \u2013 Line width of bar outline as_plot_kwargs() \uf0c1 Returns: dict \u2013 kwargs for matplotlib hist method HistogramEntry \uf0c1 Bases: DataProduct Use this class to specify a value to be collected into a matplotlib histogram. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. value ( float | str ) \u2013 Value to be binned tags ( Tags ) \u2013 Hashable tags used to sort data products style ( HistogramStyle ) \u2013 Style of histogram display format2d ( Format2D ) \u2013 Format to apply to single axis figure Config \uf0c1 Forbids extra attributes TableEntry \uf0c1 Bases: DataProduct Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. row ( float | str ) \u2013 Value to be binned col ( float | str ) \u2013 Hashable tags used to sort data products value ( float | str ) \u2013 Style of histogram display unit ( str | None ) \u2013 Format to apply to single axis figure get_entry_dict() \uf0c1 Returns a dictionary of entries to be used in creating a table. Returns: dict [ str , str | float ] \u2013 Dictionary of entries to be used in creating a melted DataFrame pivot_table(melted: pd.DataFrame) classmethod \uf0c1 Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame Parameters: melted ( DataFrame ) \u2013 Melted data frame having columns named 'row' , 'col' , 'value' . Returns: DataFrame | None \u2013 pivoted DataFrame if pivot works else None . Pivot operation fails if row or column index pairs are repeated. load_and_pivot(path: Path) classmethod \uf0c1 Loads melted table from csv and pivots to wide form. csv should have columns named 'row' , 'col' , and 'value' . Parameters: path ( Path ) \u2013 path to CSV file Returns: DataFrame | None \u2013 Pivoted data frame or elese None if pivot operation fails. DataProductCollection \uf0c1 Bases: BaseModel A collection of data products. Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc. Attributes: elements ( ProductList ) \u2013 A list of data products. from_iterable(*products: Tuple[ProductList, ...]) classmethod \uf0c1 Returns a new instance containing all of the products provided in the *products argument. Parameters: products ( Tuple [ ProductList , ...] , default: () ) \u2013 Lists of data products to combine into a collection Returns: cls \u2013 A data product collection containing all of the provided products in the *products argument. get_tags(data_product_type: Type[DataProduct] | None = None) -> set \uf0c1 Gets the tags related to a given type of DataProduct . Parent classes will match all child class types. Parameters: data_product_type ( Type [ DataProduct ] | None , default: None ) \u2013 type for which you want to get the list of tags Returns: set \u2013 set of tags applying to the given data_product_type . add_products(*products: DataProduct) \uf0c1 Parameters: products ( Tuple [ DataProduct | ProductList , ...] , default: () ) \u2013 Products or lists of products to be appended to collection elements. drop_products(tag: Hashable | None = None, object_type: Type[R] | None = None) -> Self[R] \uf0c1 Removes products matching tag and/or object_type from collection elements. Parameters: tag ( Tag | None , default: None ) \u2013 Tag for which data products should be dropped object_type ( Type | None , default: None ) \u2013 Type of data product to drop Returns: DataProductCollection \u2013 A new collection from which matching elements have been dropped. get_products(tag: Hashable | None = None, object_type: Type[R] | None = None) -> Self[R] \uf0c1 Returns a new collection containing products matching tag and/or object_type . Both tag and object_type default to None which matches all products. Parameters: tag ( Tag | None , default: None ) \u2013 Tag of data products to be kept. None matches all products. object_type ( Type | None , default: None ) \u2013 Type of data product to keep. None matches all products. Returns: DataProductCollection \u2013 A new collection containing matching elements. union(*collections: DataProductCollection) classmethod \uf0c1 Aggregates all of the products from multiple collections into a new larger collection. Parameters: collections ( Tuple [ DataProductCollection , ...] , default: () ) \u2013 Data product collections for which the products should be combined into a new collection. Returns: Type [ Self ] \u2013 A new data product collection containing all products from the provided *collections . collect_from_all_jsons(*dirs: Path, recursive=False) classmethod \uf0c1 Loads all products from JSONs in the given list of directories. If recursive is set to True , the directories will be searched recursively (this could lead to double counting if you pass in subdirectories of a parent). Parameters: dirs ( Tuple [ Path , ...] , default: () ) \u2013 Directories from which to load data product JSON files. recursive ( bool , default: False ) \u2013 whether or not to search each of the provided directories recursively for data product json files. Returns: Type [ Self ] | None \u2013 Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found. sort_by_tags(dirs_in: List[Path], dir_out: Path) classmethod \uf0c1 Loads the data product JSON files from dirs_in sorts the products. Sorted products are written to smaller files in a nested directory structure under dir_out . The nested directory structure is generated accordint to the data tags. Resulting product files are named according to the directory from which they were originally loaded. Parameters: dirs_in ( List [ Path ] ) \u2013 Directories from which the data product JSON files are to be loaded. dir_out ( Path ) \u2013 Directory to which the sorted data products will be written into a nested folder structure generated according to the data tags. process_single_tag_collection(dir_in: Path, dir_out: Path, make_tables: bool, make_xy_plots: bool, make_histograms: bool, dpi: int) classmethod \uf0c1 Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: dir_in ( Path ) \u2013 dir_out ( Path ) \u2013 make_tables ( bool ) \u2013 make_xy_plots ( bool ) \u2013 make_histograms ( bool ) \u2013 dpi ( int ) \u2013 make_grafana_panels(dir_in: Path, panel_dir: Path) classmethod \uf0c1 Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: tag ( Tag ) \u2013 Tag for which the panel(s) are to be created dir_in ( Path ) \u2013 Directory from which to read data products (should be sorted first) panel_dir ( Path ) \u2013 Where to put the panel information DataProductGenerator \uf0c1 A wrapper for saving the data products generated by a user defined function Parameters: processor ( Callable [[ Path ], ProductList ] ) \u2013 A callable that receives a working directory and returns a list of data products. process_and_save(workdir: Path) \uf0c1 Runs the user-defined processor method stored at instantiation. Saves the returned products to a JSON file in the same directory. Parameters: workdir ( Path ) \u2013 working directory on which to run the processor method. XYDataPlotter \uf0c1 Plots xy data from user-specified directories to a single axis figure Parameters: in_dirs ( List [ Path ] ) \u2013 Directories in which to search for data products from JSON files out_dir ( Path ) \u2013 directory to which figure will be output dpi ( int , default: 500 ) \u2013 Saved image resolution plot(tag: Hashable) \uf0c1 Collects data from json files in stored self.in_dirs , plots the relevant products, applies labels and formatting, saves the figure closes matplotlib figure Parameters: tag ( Hashable ) \u2013 data tag for which products are to be collected and plotted. handle_points_and_traces(tag: Hashable, points: List[Point2D], traces: List[Trace2D], dir_out: Path, dpi: int) classmethod \uf0c1 Plots points and traces, formats figure, saves figure, and closes matplotlinb figure. Parameters: tag ( Hashable ) \u2013 Tag corresponding to the provided points and traces points ( List [ Point2D ] ) \u2013 Points to be scattered traces ( List [ Trace2D ] ) \u2013 List of traces to be plotted dir_out ( Path ) \u2013 directory to output the plot dpi ( int ) \u2013 resolution of plot TableBuilder \uf0c1 Builds tables (melted, pivot, and stats) for histogramming and including in a report or Grafana dashboard. Parameters: in_dirs ( List [ Path ] ) \u2013 directories from which to load data products out_dir ( Path ) \u2013 directory in which tables should be saved load_table(tag: Hashable) \uf0c1 Collects table entries from JSON files corresponding to given tag and processes them. Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats. File names will all use the tag with different suffixes 'tag_melted.csv' , 'tag_pivot.csv' , 'name_stats.csv' . Parameters: tag ( Hashable ) \u2013 product tag for which to collect and process. process_table_entries(tag: Hashable, table_entries: List[TableEntry], out_dir: Path) classmethod \uf0c1 Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats. File names will all use the tag with different suffixes 'tag_melted.csv' , 'tag_pivot.csv' , 'name_stats.csv' . Parameters: tag ( Hashable ) \u2013 product tag for which to collect and process. table_entries ( List [ TableEntry ] ) \u2013 List of table entries out_dir ( Path ) \u2013 Directory to which table CSV files should be saved get_stats_table(df: pd.DataFrame) classmethod \uf0c1 Computes multiple statistics for each column Parameters: df ( DataFrame ) \u2013 DataFrame for which the column statistics are to be calculated. Returns: DataFrame \u2013 Dataframe having statistics (column headers) for each of the columns of the input df . The columns of df will be the row indices of the stats table. Histogrammer \uf0c1 Class for loading data products and histogramming the HistogramEntry s Parameters: in_dirs ( List [ Path ] ) \u2013 Directories from which the data products are to be loaded. out_dir ( Path ) \u2013 Directory to which the generated histogram will be stored dpi ( int ) \u2013 resolution of plot plot(tag: Hashable) \uf0c1 Generates a histogram by loading data from stored in_dirs and saves the plot to out_dir directory. A nested folder structure will be created if the provided tag is a tuple. In that case, the last tag item (with an appropriate suffix) will be used for the file name. Parameters: tag ( Hashable ) \u2013 Tag used to filter the loaded data products handle_histogram_entries(tag: Hashable, histogram_entries: List[HistogramEntry], dir_out: Path, dpi: int) classmethod \uf0c1 Histograms the provided entries. Formats and saves the figure. Closes the figure. Parameters: tag ( Hashable ) \u2013 Tag used to filter the loaded data products histogram_entries ( List [ HistogramEntry ] ) \u2013 A list of HistogramEntry s dir_out ( Path ) \u2013 Directory to which the generated histogram will be stored dpi ( int ) \u2013 resolution of plot should_be_flattened(obj: Any) \uf0c1 Checks if object is an iterable container that should be flattened. DataProduct s will not be flattened. Strings will not be flattened. Everything else will be flattened. Parameters: obj ( Any ) \u2013 Object to be tested Returns: bool \u2013 Whether or not to flatten object flatten(obj: Iterable) \uf0c1 Recursively flattens iterable up to a point (leaves str , bytes , and DataProduct unflattened) Parameters: obj ( Iterable ) \u2013 Object to be flattened Returns: Iterable \u2013 Flattned iterable atleast_1d(obj: Any) -> Iterable \uf0c1 Converts scalar objec to a list of length 1 or leaves an iterable object unchanged. Parameters: obj ( Any ) \u2013 Object that needs to be at least 1d Returns: Iterable \u2013 Returns an iterable squeeze(obj: Union[Iterable, Any]) \uf0c1 Returns a scalar if object is iterable of length 1 else returns object. Parameters: obj ( Union [ Iterable , Any ] ) \u2013 An object to be squeezed if possible Returns: Any \u2013 Either iterable or scalar if possible make_include_files(root_dir: Path, local_server_path: str | Path = None, mkdocs_include_dir: str | Path = None, heading_level: int | None = None) \uf0c1 Makes nested include files for inclusion into an MkDocs site. Note I recommend to create a Grafana panel and link to that from the MkDocs site instead. Parameters: root_dir ( Path ) \u2013 Directory for which the include files should be recursively generated local_server_path ( str | Path | None , default: None ) \u2013 What should the beginning of the path look like? Use //localhost:8001/... something like that to work with python -m mkdocs serve while running python -m http.server 8001 in order to have interactive updates. Use my python convert_links.py script to update after running python -m mkdocs build in order to fix the links for the MkDocs site. See this repo for an example. mkdocs_include_dir ( str | Path | None , default: None ) \u2013 Path to be used for mkdocs includes. This path should correspond to includ dir in mkdocs.yml file. (See vulcan_srb_sep repo for example). Note: Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to include generated markdown files (and the images/CSVs that they reference). ``` plugins: - macros: include_dir: run_for_record ``` map_callable(f: Callable[[Path], DataProductCollection], *iterables, n_procs: int = 1, mp_context=None) \uf0c1 Parameters: f ( Callable [[ Path ], DataProductCollection ] ) \u2013 Function to be mapped iterables ( Tuple [ Iterable , ...] , default: () ) \u2013 iterables of arguments for mapped function f n_procs ( int , default: 1 ) \u2013 Number of parallel processes to run mp_context ( str , default: None ) \u2013 Context to use for creating new processes (see multiprocessing package documentation) get_sorted_dirs(dirs: List[Path]) \uf0c1 Sorts dirs numerically if possible, else alphabetically Parameters: dirs ( List [ Path ] ) \u2013 Directories to sort Returns: List [ Path ] \u2013 Sorted list of directories make_products(product_generator: Callable[[Path], DataProductCollection] | None, dirs: List[Path], n_procs: int = 1) \uf0c1 Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. sort_products(data_dirs: List[Path], output_dir: Path) \uf0c1 Loads the tagged data products from data_dirs and sorts them (by tag) into a nested folder structure rooted at output_dir . Parameters: data_dirs ( List [ Path ] ) \u2013 Directories containing JSON data product files output_dir ( Path ) \u2013 Directory to which sorted products will be written make_grafana_dashboard(sorted_products_dir: Path, output_dir: Path, n_procs: int = 1) \uf0c1 Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots. Parameters: sorted_products_dir ( Path ) \u2013 Root directory into which products have been sorted by tag output_dir ( Path ) \u2013 Root directory into which Grafana dashboard and panal definitions will be written n_procs ( int , default: 1 ) \u2013 Number of parallel tasks used for processing data product tags make_tables_and_figures(products_dir: Path, output_dir: Path, dpi: int = 500, n_procs: int = 1, make_tables: bool = True, make_xy_plots: bool = True, make_histograms: bool = True) \uf0c1 Makes CSV tables and creates plots (using matplotlib). Tags will be processed in parallel and output in nested directory structure under output_dir . Parameters: products_dir ( Path ) \u2013 Directory to which the sorted data products will be written output_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib. make_sample_data(workdir: Path, n_folders: int = 10) \uf0c1 Makes some sample data from which to generate products Parameters: workdir ( Path ) \u2013 Directory in which the sample data is to be generated n_folders ( int , default: 10 ) \u2013 Number of sample data files to generate (in separate subfolders). sample_processor(workdir: Path) -> List[DataProduct] \uf0c1 Processes the generated sample data in given workdir returning several types of data products. Parameters: workdir ( Path ) \u2013 Directory containing sample data. process_batch(product_generator: Callable[[Path], DataProductCollection] | None, data_dirs: List[Path], products_dir: Path, outputs_dir: Path, grafana_dir: Path | None = None, n_procs: int = 1, dpi: int = 500, make_tables: bool = True, make_xy_plots: bool = True, make_histograms: bool = True) \uf0c1 Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. data_dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator products_dir ( Path ) \u2013 Directory to which the sorted data products will be written outputs_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. grafana_dir ( Path , default: None ) \u2013 Directory to which generated grafana panels and dashboard will be written. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib. main() \uf0c1 Makes sample data, processes it, and serves it for importing into Grafana","title":"products"},{"location":"reference/trendify/products/#trendify.products","text":"Module for generating, sorting, and plotting data products. This uses pydantic dataclasses for JSON serialization to avoid overloading system memory. Some important learning material for pydantic classes and JSON (de)serialization: Nested Pydantic Models Deserializing Child Classes Attributes: DATA_PRODUCTS_FNAME ( str ) \u2013 Hard-coded json file name 'data_products.json'","title":"products"},{"location":"reference/trendify/products/#trendify.products.Tag","text":"Determines what types can be used to define a tag","title":"Tag"},{"location":"reference/trendify/products/#trendify.products.Tags","text":"List of tags","title":"Tags"},{"location":"reference/trendify/products/#trendify.products.DATA_PRODUCTS_FNAME","text":"Hard-coded file name for storing data products in batch-processed input directories.","title":"DATA_PRODUCTS_FNAME"},{"location":"reference/trendify/products/#trendify.products.SingleAxisFigure","text":"Bases: BaseModel Data class storing a matlab figure and axis. The stored tag data in this class is so-far unused. Attributes: ax ( Axes ) \u2013 Matplotlib axis to which data will be plotted fig ( Figure ) \u2013 Matplotlib figure. tag ( Hashable ) \u2013 Figure tag. Not yet used.","title":"SingleAxisFigure"},{"location":"reference/trendify/products/#trendify.products.SingleAxisFigure.new","text":"Creates new figure and axis. Returns new instance of this class. Parameters: tag ( Hashable ) \u2013 tag (not yet used) Returns: Type [ Self ] \u2013 New single axis figure","title":"new"},{"location":"reference/trendify/products/#trendify.products.SingleAxisFigure.apply_format","text":"Applies format to figure and axes labels and limits Parameters: format2d ( Format2D ) \u2013 format information to apply to the single axis figure","title":"apply_format"},{"location":"reference/trendify/products/#trendify.products.SingleAxisFigure.savefig","text":"Wrapper on matplotlib savefig method. Saves figure to given path with given dpi resolution. Returns: Self \u2013 Returns self","title":"savefig"},{"location":"reference/trendify/products/#trendify.products.SingleAxisFigure.__del__","text":"Closes stored matplotlib figure before deleting reference to object.","title":"__del__"},{"location":"reference/trendify/products/#trendify.products.HashableBase","text":"Bases: BaseModel Defines a base for hashable pydantic data classes so that they can be reduced to a minimal set through type-casting.","title":"HashableBase"},{"location":"reference/trendify/products/#trendify.products.HashableBase.__hash__","text":"Defines hash function","title":"__hash__"},{"location":"reference/trendify/products/#trendify.products.Format2D","text":"Bases: HashableBase Formatting data for matplotlib figure and axes","title":"Format2D"},{"location":"reference/trendify/products/#trendify.products.Format2D.Config","text":"Forbids extra arguments","title":"Config"},{"location":"reference/trendify/products/#trendify.products.Format2D.union_from_iterable","text":"Gets the most inclusive format object (in terms of limits) from a list of Format2D objects. Requires that the label and title fields are identical for all format objects in the list. Parameters: format2ds ( Iterable [ Format2D ] ) \u2013 Iterable of Format2D objects. Returns: Format2D \u2013 Single format object from list of objects.","title":"union_from_iterable"},{"location":"reference/trendify/products/#trendify.products.Pen","text":"Bases: HashableBase Defines the pen drawing to matplotlib.","title":"Pen"},{"location":"reference/trendify/products/#trendify.products.Pen.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.Pen.as_scatter_plot_kwargs","text":"Returns kwargs dictionary for passing to matplotlib plot method","title":"as_scatter_plot_kwargs"},{"location":"reference/trendify/products/#trendify.products.Marker","text":"Bases: HashableBase Defines marker for scattering to matplotlib","title":"Marker"},{"location":"reference/trendify/products/#trendify.products.Marker.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.Marker.from_pen","text":"Converts Pen to marker with the option to specify a symbol","title":"from_pen"},{"location":"reference/trendify/products/#trendify.products.Marker.as_scatter_plot_kwargs","text":"Returns: dict \u2013 dictionary of kwargs for matplotlib scatter","title":"as_scatter_plot_kwargs"},{"location":"reference/trendify/products/#trendify.products.DataProduct","text":"Bases: BaseModel Base class for data products to be generated and handled. Attributes: product_type ( Hashable ) \u2013 Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection . tags ( Tags ) \u2013 Tags to be used for sorting data. metadata ( dict [ str , str ] ) \u2013 A dictionary of metadata to be used as a tool tip for mousover in grafana","title":"DataProduct"},{"location":"reference/trendify/products/#trendify.products.DataProduct.Config","text":"Disallows additional attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.DataProduct.__init_subclass__","text":"Registers child subclasses to be able to parse them from JSON file using the deserialize_child_classes method","title":"__init_subclass__"},{"location":"reference/trendify/products/#trendify.products.DataProduct.append_to_list","text":"Appends self to list. Parameters: l ( List ) \u2013 list to which self will be appended Returns: Self \u2013 returns instance of self","title":"append_to_list"},{"location":"reference/trendify/products/#trendify.products.DataProduct.deserialize_child_classes","text":"Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate Parameters: key ( str ) \u2013 json key kwargs ( dict , default: {} ) \u2013 json entries stored under given key","title":"deserialize_child_classes"},{"location":"reference/trendify/products/#trendify.products.XYData","text":"Bases: DataProduct Base class for children of DataProduct to be plotted ax xy data on a 2D plot","title":"XYData"},{"location":"reference/trendify/products/#trendify.products.Trace2D","text":"Bases: XYData A collection of points comprising a trace. Use the Trace2D.from_xy constructor. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. pen ( Pen ) \u2013 Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure.","title":"Trace2D"},{"location":"reference/trendify/products/#trendify.products.Trace2D.x","text":"Returns an array of x values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of x values from self.points '","title":"x"},{"location":"reference/trendify/products/#trendify.products.Trace2D.y","text":"Returns an array of y values from self.points Returns: NDArray [ Shape ['*'], float ] \u2013 array of y values from self.points","title":"y"},{"location":"reference/trendify/products/#trendify.products.Trace2D.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.Trace2D.propagate_format2d_and_pen","text":"Propagates format and style info to all self.points (in-place). I thought this would be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes. Keeping for potential future use case. Parameters: marker_symbol ( str , default: '.' ) \u2013 Valid matplotlib marker symbol","title":"propagate_format2d_and_pen"},{"location":"reference/trendify/products/#trendify.products.Trace2D.from_xy","text":"Creates a list of Point2D s from xy data and returns a new Trace2D product. Parameters: tags ( Tags ) \u2013 Hashable tags used to sort data products x ( NDArray [ Shape ['*'], float ] ) \u2013 x values y ( NDArray [ Shape ['*'], float ] ) \u2013 y values pen ( Pen , default: Pen () ) \u2013 Style and label for trace format2d ( Format2D , default: Format2D () ) \u2013 format to apply to matplotlib","title":"from_xy"},{"location":"reference/trendify/products/#trendify.products.Trace2D.plot_to_ax","text":"Plots xy data from trace to a matplotlib axes object. Parameters: ax ( Axes ) \u2013 axes to which xy data should be plotted","title":"plot_to_ax"},{"location":"reference/trendify/products/#trendify.products.Point2D","text":"Bases: XYData Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. points ( List [ Point2D ] ) \u2013 List of points. Usually the points would have null values for marker and format2d fields to save space. marker ( Marker ) \u2013 Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana. format2d ( Format2D ) \u2013 Formatting information for matplotlib figure.","title":"Point2D"},{"location":"reference/trendify/products/#trendify.products.Point2D.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.HistogramStyle","text":"Bases: HashableBase Label and style data for generating histogram bars Attributes: color ( str ) \u2013 Color of bars label ( str | None ) \u2013 Legend entry histtype ( str ) \u2013 Histogram type corresponding to matplotlib argument of same name alpha_edge ( float ) \u2013 Opacity of bar edge alpha_face ( float ) \u2013 Opacity of bar face linewidth ( float ) \u2013 Line width of bar outline","title":"HistogramStyle"},{"location":"reference/trendify/products/#trendify.products.HistogramStyle.as_plot_kwargs","text":"Returns: dict \u2013 kwargs for matplotlib hist method","title":"as_plot_kwargs"},{"location":"reference/trendify/products/#trendify.products.HistogramEntry","text":"Bases: DataProduct Use this class to specify a value to be collected into a matplotlib histogram. Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. value ( float | str ) \u2013 Value to be binned tags ( Tags ) \u2013 Hashable tags used to sort data products style ( HistogramStyle ) \u2013 Style of histogram display format2d ( Format2D ) \u2013 Format to apply to single axis figure","title":"HistogramEntry"},{"location":"reference/trendify/products/#trendify.products.HistogramEntry.Config","text":"Forbids extra attributes","title":"Config"},{"location":"reference/trendify/products/#trendify.products.TableEntry","text":"Bases: DataProduct Attributes: product_type ( Literal ['Trace2D'] ) \u2013 Name of class type to be used as a constructor. row ( float | str ) \u2013 Value to be binned col ( float | str ) \u2013 Hashable tags used to sort data products value ( float | str ) \u2013 Style of histogram display unit ( str | None ) \u2013 Format to apply to single axis figure","title":"TableEntry"},{"location":"reference/trendify/products/#trendify.products.TableEntry.get_entry_dict","text":"Returns a dictionary of entries to be used in creating a table. Returns: dict [ str , str | float ] \u2013 Dictionary of entries to be used in creating a melted DataFrame","title":"get_entry_dict"},{"location":"reference/trendify/products/#trendify.products.TableEntry.pivot_table","text":"Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame Parameters: melted ( DataFrame ) \u2013 Melted data frame having columns named 'row' , 'col' , 'value' . Returns: DataFrame | None \u2013 pivoted DataFrame if pivot works else None . Pivot operation fails if row or column index pairs are repeated.","title":"pivot_table"},{"location":"reference/trendify/products/#trendify.products.TableEntry.load_and_pivot","text":"Loads melted table from csv and pivots to wide form. csv should have columns named 'row' , 'col' , and 'value' . Parameters: path ( Path ) \u2013 path to CSV file Returns: DataFrame | None \u2013 Pivoted data frame or elese None if pivot operation fails.","title":"load_and_pivot"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection","text":"Bases: BaseModel A collection of data products. Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc. Attributes: elements ( ProductList ) \u2013 A list of data products.","title":"DataProductCollection"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.from_iterable","text":"Returns a new instance containing all of the products provided in the *products argument. Parameters: products ( Tuple [ ProductList , ...] , default: () ) \u2013 Lists of data products to combine into a collection Returns: cls \u2013 A data product collection containing all of the provided products in the *products argument.","title":"from_iterable"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.get_tags","text":"Gets the tags related to a given type of DataProduct . Parent classes will match all child class types. Parameters: data_product_type ( Type [ DataProduct ] | None , default: None ) \u2013 type for which you want to get the list of tags Returns: set \u2013 set of tags applying to the given data_product_type .","title":"get_tags"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.add_products","text":"Parameters: products ( Tuple [ DataProduct | ProductList , ...] , default: () ) \u2013 Products or lists of products to be appended to collection elements.","title":"add_products"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.drop_products","text":"Removes products matching tag and/or object_type from collection elements. Parameters: tag ( Tag | None , default: None ) \u2013 Tag for which data products should be dropped object_type ( Type | None , default: None ) \u2013 Type of data product to drop Returns: DataProductCollection \u2013 A new collection from which matching elements have been dropped.","title":"drop_products"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.get_products","text":"Returns a new collection containing products matching tag and/or object_type . Both tag and object_type default to None which matches all products. Parameters: tag ( Tag | None , default: None ) \u2013 Tag of data products to be kept. None matches all products. object_type ( Type | None , default: None ) \u2013 Type of data product to keep. None matches all products. Returns: DataProductCollection \u2013 A new collection containing matching elements.","title":"get_products"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.union","text":"Aggregates all of the products from multiple collections into a new larger collection. Parameters: collections ( Tuple [ DataProductCollection , ...] , default: () ) \u2013 Data product collections for which the products should be combined into a new collection. Returns: Type [ Self ] \u2013 A new data product collection containing all products from the provided *collections .","title":"union"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.collect_from_all_jsons","text":"Loads all products from JSONs in the given list of directories. If recursive is set to True , the directories will be searched recursively (this could lead to double counting if you pass in subdirectories of a parent). Parameters: dirs ( Tuple [ Path , ...] , default: () ) \u2013 Directories from which to load data product JSON files. recursive ( bool , default: False ) \u2013 whether or not to search each of the provided directories recursively for data product json files. Returns: Type [ Self ] | None \u2013 Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found.","title":"collect_from_all_jsons"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.sort_by_tags","text":"Loads the data product JSON files from dirs_in sorts the products. Sorted products are written to smaller files in a nested directory structure under dir_out . The nested directory structure is generated accordint to the data tags. Resulting product files are named according to the directory from which they were originally loaded. Parameters: dirs_in ( List [ Path ] ) \u2013 Directories from which the data product JSON files are to be loaded. dir_out ( Path ) \u2013 Directory to which the sorted data products will be written into a nested folder structure generated according to the data tags.","title":"sort_by_tags"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.process_single_tag_collection","text":"Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: dir_in ( Path ) \u2013 dir_out ( Path ) \u2013 make_tables ( bool ) \u2013 make_xy_plots ( bool ) \u2013 make_histograms ( bool ) \u2013 dpi ( int ) \u2013","title":"process_single_tag_collection"},{"location":"reference/trendify/products/#trendify.products.DataProductCollection.make_grafana_panels","text":"Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted. Parameters: tag ( Tag ) \u2013 Tag for which the panel(s) are to be created dir_in ( Path ) \u2013 Directory from which to read data products (should be sorted first) panel_dir ( Path ) \u2013 Where to put the panel information","title":"make_grafana_panels"},{"location":"reference/trendify/products/#trendify.products.DataProductGenerator","text":"A wrapper for saving the data products generated by a user defined function Parameters: processor ( Callable [[ Path ], ProductList ] ) \u2013 A callable that receives a working directory and returns a list of data products.","title":"DataProductGenerator"},{"location":"reference/trendify/products/#trendify.products.DataProductGenerator.process_and_save","text":"Runs the user-defined processor method stored at instantiation. Saves the returned products to a JSON file in the same directory. Parameters: workdir ( Path ) \u2013 working directory on which to run the processor method.","title":"process_and_save"},{"location":"reference/trendify/products/#trendify.products.XYDataPlotter","text":"Plots xy data from user-specified directories to a single axis figure Parameters: in_dirs ( List [ Path ] ) \u2013 Directories in which to search for data products from JSON files out_dir ( Path ) \u2013 directory to which figure will be output dpi ( int , default: 500 ) \u2013 Saved image resolution","title":"XYDataPlotter"},{"location":"reference/trendify/products/#trendify.products.XYDataPlotter.plot","text":"Collects data from json files in stored self.in_dirs , plots the relevant products, applies labels and formatting, saves the figure closes matplotlib figure Parameters: tag ( Hashable ) \u2013 data tag for which products are to be collected and plotted.","title":"plot"},{"location":"reference/trendify/products/#trendify.products.XYDataPlotter.handle_points_and_traces","text":"Plots points and traces, formats figure, saves figure, and closes matplotlinb figure. Parameters: tag ( Hashable ) \u2013 Tag corresponding to the provided points and traces points ( List [ Point2D ] ) \u2013 Points to be scattered traces ( List [ Trace2D ] ) \u2013 List of traces to be plotted dir_out ( Path ) \u2013 directory to output the plot dpi ( int ) \u2013 resolution of plot","title":"handle_points_and_traces"},{"location":"reference/trendify/products/#trendify.products.TableBuilder","text":"Builds tables (melted, pivot, and stats) for histogramming and including in a report or Grafana dashboard. Parameters: in_dirs ( List [ Path ] ) \u2013 directories from which to load data products out_dir ( Path ) \u2013 directory in which tables should be saved","title":"TableBuilder"},{"location":"reference/trendify/products/#trendify.products.TableBuilder.load_table","text":"Collects table entries from JSON files corresponding to given tag and processes them. Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats. File names will all use the tag with different suffixes 'tag_melted.csv' , 'tag_pivot.csv' , 'name_stats.csv' . Parameters: tag ( Hashable ) \u2013 product tag for which to collect and process.","title":"load_table"},{"location":"reference/trendify/products/#trendify.products.TableBuilder.process_table_entries","text":"Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats. File names will all use the tag with different suffixes 'tag_melted.csv' , 'tag_pivot.csv' , 'name_stats.csv' . Parameters: tag ( Hashable ) \u2013 product tag for which to collect and process. table_entries ( List [ TableEntry ] ) \u2013 List of table entries out_dir ( Path ) \u2013 Directory to which table CSV files should be saved","title":"process_table_entries"},{"location":"reference/trendify/products/#trendify.products.TableBuilder.get_stats_table","text":"Computes multiple statistics for each column Parameters: df ( DataFrame ) \u2013 DataFrame for which the column statistics are to be calculated. Returns: DataFrame \u2013 Dataframe having statistics (column headers) for each of the columns of the input df . The columns of df will be the row indices of the stats table.","title":"get_stats_table"},{"location":"reference/trendify/products/#trendify.products.Histogrammer","text":"Class for loading data products and histogramming the HistogramEntry s Parameters: in_dirs ( List [ Path ] ) \u2013 Directories from which the data products are to be loaded. out_dir ( Path ) \u2013 Directory to which the generated histogram will be stored dpi ( int ) \u2013 resolution of plot","title":"Histogrammer"},{"location":"reference/trendify/products/#trendify.products.Histogrammer.plot","text":"Generates a histogram by loading data from stored in_dirs and saves the plot to out_dir directory. A nested folder structure will be created if the provided tag is a tuple. In that case, the last tag item (with an appropriate suffix) will be used for the file name. Parameters: tag ( Hashable ) \u2013 Tag used to filter the loaded data products","title":"plot"},{"location":"reference/trendify/products/#trendify.products.Histogrammer.handle_histogram_entries","text":"Histograms the provided entries. Formats and saves the figure. Closes the figure. Parameters: tag ( Hashable ) \u2013 Tag used to filter the loaded data products histogram_entries ( List [ HistogramEntry ] ) \u2013 A list of HistogramEntry s dir_out ( Path ) \u2013 Directory to which the generated histogram will be stored dpi ( int ) \u2013 resolution of plot","title":"handle_histogram_entries"},{"location":"reference/trendify/products/#trendify.products.should_be_flattened","text":"Checks if object is an iterable container that should be flattened. DataProduct s will not be flattened. Strings will not be flattened. Everything else will be flattened. Parameters: obj ( Any ) \u2013 Object to be tested Returns: bool \u2013 Whether or not to flatten object","title":"should_be_flattened"},{"location":"reference/trendify/products/#trendify.products.flatten","text":"Recursively flattens iterable up to a point (leaves str , bytes , and DataProduct unflattened) Parameters: obj ( Iterable ) \u2013 Object to be flattened Returns: Iterable \u2013 Flattned iterable","title":"flatten"},{"location":"reference/trendify/products/#trendify.products.atleast_1d","text":"Converts scalar objec to a list of length 1 or leaves an iterable object unchanged. Parameters: obj ( Any ) \u2013 Object that needs to be at least 1d Returns: Iterable \u2013 Returns an iterable","title":"atleast_1d"},{"location":"reference/trendify/products/#trendify.products.squeeze","text":"Returns a scalar if object is iterable of length 1 else returns object. Parameters: obj ( Union [ Iterable , Any ] ) \u2013 An object to be squeezed if possible Returns: Any \u2013 Either iterable or scalar if possible","title":"squeeze"},{"location":"reference/trendify/products/#trendify.products.make_include_files","text":"Makes nested include files for inclusion into an MkDocs site. Note I recommend to create a Grafana panel and link to that from the MkDocs site instead. Parameters: root_dir ( Path ) \u2013 Directory for which the include files should be recursively generated local_server_path ( str | Path | None , default: None ) \u2013 What should the beginning of the path look like? Use //localhost:8001/... something like that to work with python -m mkdocs serve while running python -m http.server 8001 in order to have interactive updates. Use my python convert_links.py script to update after running python -m mkdocs build in order to fix the links for the MkDocs site. See this repo for an example. mkdocs_include_dir ( str | Path | None , default: None ) \u2013 Path to be used for mkdocs includes. This path should correspond to includ dir in mkdocs.yml file. (See vulcan_srb_sep repo for example). Note: Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to include generated markdown files (and the images/CSVs that they reference). ``` plugins: - macros: include_dir: run_for_record ```","title":"make_include_files"},{"location":"reference/trendify/products/#trendify.products.map_callable","text":"Parameters: f ( Callable [[ Path ], DataProductCollection ] ) \u2013 Function to be mapped iterables ( Tuple [ Iterable , ...] , default: () ) \u2013 iterables of arguments for mapped function f n_procs ( int , default: 1 ) \u2013 Number of parallel processes to run mp_context ( str , default: None ) \u2013 Context to use for creating new processes (see multiprocessing package documentation)","title":"map_callable"},{"location":"reference/trendify/products/#trendify.products.get_sorted_dirs","text":"Sorts dirs numerically if possible, else alphabetically Parameters: dirs ( List [ Path ] ) \u2013 Directories to sort Returns: List [ Path ] \u2013 Sorted list of directories","title":"get_sorted_dirs"},{"location":"reference/trendify/products/#trendify.products.make_products","text":"Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.","title":"make_products"},{"location":"reference/trendify/products/#trendify.products.sort_products","text":"Loads the tagged data products from data_dirs and sorts them (by tag) into a nested folder structure rooted at output_dir . Parameters: data_dirs ( List [ Path ] ) \u2013 Directories containing JSON data product files output_dir ( Path ) \u2013 Directory to which sorted products will be written","title":"sort_products"},{"location":"reference/trendify/products/#trendify.products.make_grafana_dashboard","text":"Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots. Parameters: sorted_products_dir ( Path ) \u2013 Root directory into which products have been sorted by tag output_dir ( Path ) \u2013 Root directory into which Grafana dashboard and panal definitions will be written n_procs ( int , default: 1 ) \u2013 Number of parallel tasks used for processing data product tags","title":"make_grafana_dashboard"},{"location":"reference/trendify/products/#trendify.products.make_tables_and_figures","text":"Makes CSV tables and creates plots (using matplotlib). Tags will be processed in parallel and output in nested directory structure under output_dir . Parameters: products_dir ( Path ) \u2013 Directory to which the sorted data products will be written output_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib.","title":"make_tables_and_figures"},{"location":"reference/trendify/products/#trendify.products.make_sample_data","text":"Makes some sample data from which to generate products Parameters: workdir ( Path ) \u2013 Directory in which the sample data is to be generated n_folders ( int , default: 10 ) \u2013 Number of sample data files to generate (in separate subfolders).","title":"make_sample_data"},{"location":"reference/trendify/products/#trendify.products.sample_processor","text":"Processes the generated sample data in given workdir returning several types of data products. Parameters: workdir ( Path ) \u2013 Directory containing sample data.","title":"sample_processor"},{"location":"reference/trendify/products/#trendify.products.process_batch","text":"Maps product_generator over dirs_in to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from dir_products . Nested folders are generated for tags that are Tuples. Sorted data files are named according to the directory from which they were loaded. Parameters: product_generator ( Callable [[ Path ], ProductList ] | None ) \u2013 A callable function that returns a list of data products given a working directory. data_dirs ( List [ Path ] ) \u2013 Directories over which to map the product_generator products_dir ( Path ) \u2013 Directory to which the sorted data products will be written outputs_dir ( Path ) \u2013 Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables make_tables , make_xy_plots , make_histograms are true. grafana_dir ( Path , default: None ) \u2013 Directory to which generated grafana panels and dashboard will be written. n_procs ( int = 1 , default: 1 ) \u2013 Number of processes to run in parallel. If n_procs==1 , directories will be processed sequentially (easier for debugging since the full traceback will be provided). If n_procs > 1 , a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel. dpi ( int = 500 , default: 500 ) \u2013 Resolution of output plots when using matplotlib (for make_xy_plots==True and/or make_histograms==True ) make_tables ( bool = True , default: True ) \u2013 Whether or not to collect the TableEntry products and write them to CSV files ( <tag>_melted.csv with <tag>_pivot.csv and <tag>_stats.csv when possible). make_xy_plots ( bool = True , default: True ) \u2013 Whether or not to plot the XYData products using matplotlib make_histograms ( bool = True , default: True ) \u2013 Whether or not to generate histograms of the HistogramEntry products using matplotlib.","title":"process_batch"},{"location":"reference/trendify/products/#trendify.products.main","text":"Makes sample data, processes it, and serves it for importing into Grafana","title":"main"},{"location":"reference/trendify/server/","text":"trendify.server \uf0c1 Defines database server for DataProductCollection from analyses get_data_products(analysis: str = 'workdir.products', tag: str = 'trace_plots', product_type: str = 'DataProduct') \uf0c1 Traces parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"","title":"server"},{"location":"reference/trendify/server/#trendify.server","text":"Defines database server for DataProductCollection from analyses","title":"server"},{"location":"reference/trendify/server/#trendify.server.get_data_products","text":"Traces parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"","title":"get_data_products"}]}