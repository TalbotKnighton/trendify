{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome-to-trendify","title":"Welcome to Trendify","text":""},{"location":"#description","title":"Description","text":"<p>The <code>trendify</code> package makes it easy to compare data from multiple runs of a batch process.  The core functionality is to generate CSV tables and JPEG images by mapping a user-provided processing function over a user-provided set of input data directories.  Parallelization and data serialization are used to speed up processing time and maintain low memory requirements.  <code>trendify</code> is run via a terminal command line interface (CLI) one-liner method or via a Python application programming interface (API).</p> <p>See the Flow Chart and Vocabulary sections below for a visual diagram of the program flow and vocabulary reference.</p> <p>The Motivation section discusses the problem this package solves and why it is useful.</p> <p>The Recipe section provides a template for users to follow.</p> <p>The Example section provides a minimum working example.</p> <p>Available python methods and command line syntax are described in the API and CLI section.</p> <p>Planned future work and features are shown in the Planned Features section.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI</p> <pre><code>pip install trendify\n</code></pre>"},{"location":"#links","title":"Links","text":"<p>View on PyPI</p> <p>View source code</p>"},{"location":"#flow-chart","title":"Flow Chart","text":"<p>The following flow chart shows how <code>trendify</code> generates assets from user inputs.</p> <pre><code>graph TD\n  subgraph \"User Inputs\"  \n   A[(Input Directories)]@{ shape: lin-cyl };\n   AA[Product Generator];\n   AAA[Output Directory];\n   AAAA[Number of Processes]\n  end\n  A --&gt; B[CLI or Script]@{ shape: diamond};\n  AA --&gt; B;\n  AAA --&gt; B;\n  AAAA --&gt; B;\n  B --&gt; |Map generator over raw data dirs| CCC[(Tagged Data Products)]@{shape: lin-cyl};\n  CCC --&gt; |Sort and process products| CC[(Assets)]@{shape: lin-cyl};\n  CC -.-&gt; H[Interactive Displays];\n  H -.-&gt; |Grafana API| I[Grafana Dashboard];\n  H -.-&gt; K[Etc.];\n  CC -.-&gt; D[Static Assets];\n  D -.-&gt; |Pandas| E[CSV];\n  D -.-&gt; |Matplotlib| F[JPG];\n  D -.-&gt; G[Etc.];</code></pre>"},{"location":"#vocabulary","title":"Vocabulary","text":"<p>The following is a table of important trendify objects / vocabulary sorted alphabetically:</p> Term Meaning API Application programming interface: Definition of valid objects for processing within <code>trendify</code> framework Asset An asset to be used in a report (such as static CSV or JPG files) or interacted with (such as a Grafana dashboard) CLI Command line interface: <code>trendify</code> script installed with package used to run the framework DataProduct Base class for tagged products to be sorted and displayed in static or interactive assets. DataProductGenerator A Callable to be mapped over raw data directories.  Given the Path to a working directory, the method returns a ProductList (i.e. a list of instances of DataProduct instances): <code>Trace2D</code>, <code>Point2D</code>, <code>TableEntry</code>, <code>HistogramEntry</code>, etc. HistogramEntry Tagged, labeled data point to be counted and histogrammed Point2D Tagged, labeled XYData defining a point to be scattered on xy graph Product List List of DataProduct instances Raw Data Data from some batch process or individual runs (with results from each run stored in separate subdirectories) TableEntry Tagged data point to be collected into a table, pivoted, and statistically analyzed Tag Hashable tag used for sorting and collection of DataProduct instances Trace2D Tagged, labeled XYData defining a line to be plotted on xy graph XYData Base class for products to be plotted on an xy graph"},{"location":"api_and_cli/","title":"API and CLI","text":""},{"location":"api_and_cli/#functionality-overview","title":"Functionality Overview","text":"<p>The <code>trendify</code> package </p> <ul> <li>Maps a user-defined function over given directories to produce JSON serialized Data Products.</li> <li>Sorts Data Products according to user-specified Tags</li> <li>Writes collected products to CSV files or static images (via matplotlib backend)</li> <li>Generates nested <code>include.md</code> files for importing generated assets into markdown reports (or MkDocs web page)</li> <li>In Progress: Generates a Grafana dashboard with panels for each data Tag</li> <li>Future Work: Generates nested <code>include.tex</code> files for nested assets</li> </ul> <p>Trendify sorts products and outputs them as CSV and JPG files to an assets directory or prepares them for display in Grafana via the make_it_trendy method.  This method is a convenient wrapper on multiple individual steps:</p> <ul> <li>make_products</li> <li>sort_products</li> <li>make_grafana_dashboard</li> <li>make_tables_and_figures</li> <li>make_include_files</li> </ul> <p>Each step can be mapped in parallel as part of a process pool by providing an integer argument <code>n_procs</code> greater than 1.  Parllel excecution greatly speeds up processing times for computationally expensive data product generators or for plotting large numbers data products.</p>"},{"location":"api_and_cli/#api","title":"API","text":"<p>The user specifies a function that takes in a <code>Path</code> and returns a list holding instances of the following children of DataProduct: </p> <ul> <li><code>Trace2D</code></li> <li><code>Point2D</code></li> <li><code>TableEntry</code></li> <li><code>HistogramEntry</code></li> </ul> <p>All Data Products inherit type checking and JSON serialization from PyDantic BaseModel.  </p> <p>XYData product inputs include:</p> <ul> <li>Tags used to sort and collect the products</li> <li>Pen defines the line style and legend label for <code>Trace2D</code></li> <li>Marker defines the symbol style and legend label for <code>Point2D</code></li> </ul> <p><code>TableEntry</code> inputs include </p> <ul> <li><code>row</code> and <code>column</code> used to generate a pivot table if possible (so long as the <code>row</code>,<code>col</code> index pair is not repeated in a collected set)</li> <li><code>value</code></li> <li><code>units</code></li> </ul> <p>Labels and figure formats are assignable.  Trendify will automatically collapse matplotlib legend labels down to a unique set.  Use unique pen label, marker label, histogram style label, or row/col pair as unique identifiers.  Make sure that the formatting specified for like-tagged <code>DataProduct</code> istances to be the same.</p> <p>Trendify is easiest to run from the CLI which is a wrapper on the following methods.  These can also be run via a Python script:</p> <ul> <li>make_products</li> <li>sort_products</li> <li>make_tables_and_figures</li> <li>make_grafana_dashboard</li> <li>make_it_trendy</li> </ul>"},{"location":"api_and_cli/#cli","title":"CLI","text":"<p>The <code>trendify</code> command line interface (CLI) allows a user-defined data product generator method to be mapped over raw data.</p>"},{"location":"api_and_cli/#command-line-arguments","title":"Command Line Arguments","text":"<p>The <code>trendify</code> command line program takes the following sub-commands that run the various steps of the <code>trendify</code> framework.</p> Command Action products-make Makes products or assets products-sort Sorts data products by tags products-serve Serves data products to URL endpoint assets-make-static Makes static assets assets-make-interactive Makes interactive assets <p>The <code>trendify</code> program also takes the following <code>make</code> commands which runs runs the product <code>make</code>, <code>sort</code>, and <code>serve</code> commands as well as generating a JSON file to define a Grafana dashboard.</p> Command Action make static Makes static assets (CSV and JPG files). make grafana Makes interactive grafana dashboard JSON file.  Serves generated products on local host. make all Makes both static and interactive assets.  Serves generated products on the local host. <p>To get a complete list of the input arguments to these commands run them with the  <code>-h</code> flag to get a list of available arguments.</p> <p>The make commands take some of the following arguments.</p> Short Form Flag Long Form Flag Input Type Usage <code>-h</code> <code>--help</code> Causes help info to be printed to the Linux terminal <code>-g</code> <code>--product-generator</code> <code>str</code> Specifies the data product generator method to map over raw input data directories.  This argument uses a syntax borrowed from the script specification used in pyproject.toml files.  See details below. <code>-i</code> <code>--input-directories</code> <code>glob</code> or <code>list[str]</code> Specifies directories over which the data product generator <code>method</code> will be mapped.  Use standard bash glob expansion to pass in a list of directories or provide a glob string to run using pythons <code>glob.glob</code> method. See details below. <code>-n</code> <code>--n-procs</code> <code>int</code> Sets the number of parallel processes to use in each trendify step.  Use <code>-n 1</code> for full Traceback during debugging and <code>-n 10</code> or some integer greater than 1 for parallelization speedup on larger data sets <code>-o</code> <code>--output-directory</code> <code>str</code> Specifies the path to which <code>trendify</code> will output sorted products and assets. <code>--protocol</code> <code>str</code> Defaults to 'http' <code>--host</code> <code>str</code> Defaults to '0.0.0.0' <code>--port</code> <code>int</code> Port to serve the products to.  Defaults to <code>8000</code>"},{"location":"api_and_cli/#-product-generator","title":"--product-generator","text":"<p>The method can be input in any of the following formats:</p> <ul> <li><code>/global/path/to/module.py</code></li> <li><code>/global/path/to/module.py:method_name</code></li> <li><code>/global/path/to/module.py:ClassName.method_name</code></li> <li><code>./local/path/to/module.py</code></li> <li><code>./local/path/to/module.py:method_name</code></li> <li><code>./local/path/to/module.py:ClassName.method_name</code></li> <li><code>package.module</code></li> <li><code>package.module:method</code></li> <li><code>package.module:ClassName.method</code></li> </ul>"},{"location":"api_and_cli/#-input-directories","title":"--input-directories","text":"<p>The input data directories over which the product generator will be mapped can be entered using standard bash globs</p> <ul> <li><code>**</code> expands to any file path</li> <li><code>*</code> expands to any characters</li> <li>Etc.</li> </ul> <p>Make sure not to include directories with no results since the generator method will produce an error.</p> <p>Globbed results files are replaced with the containing directory (that is, a glob result of <code>./some/path/results.csv</code> will result in <code>./some/path/</code> being be passed to the product generator method).</p> <p>Directory Structure</p> <p>The current version requires each results set to be contained in its own sub-directory.  There are no restrictions on the locations of the input data directories.</p>"},{"location":"example/","title":"Example","text":"<p>An example is provided with the <code>trendify</code> package to demonstrate functionality.  The example commands below genereate sample data and run a pre-defined post-processor to produce and sort products as well as generating assets.</p> <p>After pip installing <code>trendify</code>, open an terminal and run the following shell commands.</p> <pre><code>workdir=./workdir\ngenerator=trendify.examples:example_data_product_generator\ntrendify_make_sample_data -wd $workdir -n 10  \ntrendify make all -g $generator -i $workdir/models/*/ -o $workdir/trendify_output/ -n 10 --port 8000\n</code></pre> <p>See the source code and documentation of the methods used in this example:</p> <ul> <li>trendify_make_sample_data</li> <li>example_data_product_generator</li> </ul> <p>The static outputs should include the following image:</p> <p></p>"},{"location":"motivation/","title":"Motivation","text":"<p>This page explains the motivation for the Trendify package in hopes that the reader will better understand what benefit it provides, how to use it, and what features to expect in the future.</p>"},{"location":"motivation/#problem-statement","title":"Problem Statement","text":"<p>Data is commonly conveyed through visual assets such as:</p> <ul> <li>Drawings</li> <li>Graphs</li> <li>Tables</li> </ul> <p>Graphs and Tables are intended to present data in a digestible way.</p> <p>It is easy to write complicted data manipulations for preparing data using a high level language such as Python, but there are several pitfalls when distilling large amounts of data:</p> <ol> <li>Computational expense (long processing times)</li> <li>Limited RAM</li> </ol> <p>As discussed below, Trendify provides a scalable framework for quickly distilling graphs and tables from large amounts of data.</p>"},{"location":"motivation/#illustrative-problem-statement","title":"Illustrative Problem Statement","text":"<p>The following bullets provide an illustrative common use case.  Suppose that</p> <ul> <li>An engineering model has been run through a Monte Carlo simulation for a large number of runs.</li> <li>The output data from each run needs to be processed to evaluate target criteria.</li> <li>The collected output data from all runs is significant (possibly larger than the available RAM on a device).</li> <li>The computational expense of post-processing each run is significant (for example, data needs to be rotated, transformed, smoothed, etc. in expensive ways).</li> </ul>"},{"location":"motivation/#brute-force-approaches","title":"Brute Force Approaches","text":""},{"location":"motivation/#nested-for-loops-low-memory-cost","title":"Nested For Loops, Low Memory Cost","text":"<p>One way to process the data is to perform the following tasks sequentially:</p> <ul> <li>Loop over figures to be created</li> <li>Open a <code>matplotlib Figure</code></li> <li>Sequentially loop over each output directory</li> <li>Process the data to provide the required information</li> <li>Plot to the open <code>matplotlib Figure</code></li> <li>Save the <code>matplotlib Figure</code></li> <li>Repeat the above steps for a new figure.</li> </ul> <p>This approach prevents a memory overload since only one batch run is loaded and processed at a time.  However, this approach is often unacceptably slow since the same data needs to be loaded over and over for each figure or table to be created.</p>"},{"location":"motivation/#single-for-loop-high-memory-cost","title":"Single For Loop, High Memory Cost","text":"<p>A variation is to open multiple <code>matplotlib Figure</code> instances at the same time (eliminateing the outer for loop).  This approach avoids having to redundantly load/process data since the processed results can be added to every relevant figure/table.  But, this can lead to a memory overload if many images and tables are being generated.</p>"},{"location":"motivation/#trendify-approach","title":"Trendify Approach","text":"<p>Trendify uses multiple concepts to avoid the memory and computation pitfals of brute-force loops.</p>"},{"location":"motivation/#serializationdeserialization","title":"Serialization/Deserialization","text":"<p>JSON serialization is the act of saving Python objects to plain text using the JSON file format.</p> <p>JSON deserialization is the reverse process of creating Python objects by loading plain text from a JSON file.</p> <p>The <code>Pydantic</code> package provides an integrated framework for serialization/deserialization in Python. In the <code>Pydantic</code> framework, type hints serve a double purpose:</p> <ul> <li>Tells what type of data is expected in each variable (helps with linting hits and auto-completion in IDE)</li> <li>Data validation (pydantic closes program if JSON data does not match type hint)</li> </ul> <p>Trendify defines <code>Pydantic</code> data classes to store 2D traces, table entries, etc. and load them back into memory as needed. Loading distilled data from a JSON file is orders of magnitude faster than loading and processing raw data. Serialization/deserialization eliminates the need to hold large amounts of data in memory in order to generate assets. This allows Trendify to decouple the raw data processing stage from the aggregation stage of generating figures and tables by saving the intermediate data products as JSON files.</p>"},{"location":"motivation/#parallelization","title":"Parallelization","text":"<p>Trendify uses parallel processing to utilize all available machine cores (up to a user specified value) when processing batch data. This provides a scalable linear speedup based on the number of cores.</p>"},{"location":"motivation/#data-products","title":"Data Products","text":"<p>At the moment, Trendify is written to accomodate only a few specific types of data products (distilled data to be aggregated into assets).  These include Trace2D, TableEntry, HistogramEntry, etc.  Trendify can be expanded in the future to allow any arbitrary data type and aggregation step.</p>"},{"location":"motivation/#data-product-generators","title":"Data Product Generators","text":"<p>Functions are \"first-class citizens\" of Python, meaning that they can be passed into other functions as arguments.  This allows function composition such as shown in the following example:</p> <pre><code>def apply_binary_function(some_binary_function, argument_1, argument_2):\n    return some_binary_function(argument_1, argument_2)\n\ndef add(a, b):\n    return a + b\n\nresult = apply_some_binary_function(add, 1, 1)  # The `add` function is passed as an argument to `apply_binary_function`\nprint(result)  # Prints `2`\n</code></pre> <p>Trendify provides a framework for applying any user-defined processing function to a set of working directories. Thus, the end-user only needs to define what processing they want to do as a function (with a pre-determined signature) and pass that function to the Trendify framework via the command line or Python script.</p>"},{"location":"motivation/#command-line-interface","title":"Command Line Interface","text":"<p>The <code>trendify</code> command line interface allows users to map a data product generator from a Python source file or an installed Python package as discussed in the recipe and the CLI docs.  In a terminal (with the Python environment to which <code>trendify</code> is installed active) run the the command <code>trendify --help</code> for more info.</p>"},{"location":"planned_features/","title":"Planned Features","text":"<ul> <li>S3 bucket interface to push database files to storage</li> <li>Server to provide data to Grafana dashboard over network (pathfinder working on local computer)</li> <li>User authentication</li> <li>Smarter Grafana dashboards (auto populate input/output selector buttons for scatter plots, etc.)</li> </ul>"},{"location":"recipe/","title":"Recipe","text":""},{"location":"recipe/#defining-a-data-product-generator","title":"Defining a Data Product Generator","text":"<p>Define a Data Product Generator to ingest data and return a list of <code>trendify</code> data products.  Valid products are listed in the vocabulary table above and reproduced in the smaller table here.  See the code reference for class constructor inputs.  The <code>trendify</code> framework will map this method over a set of results directories, save and sort the returned products, and produce assets.  Each product will need to have a list of tags assigned (the list can be length 1).  You can also provide labels to be used for generating a legend.</p> Valid Data Products Resulting Asseet HistogramEntry Tagged, labeled data point to be counted and histogrammed Point2D Tagged, labeled XYData defining a point to be scattered on xy graph TableEntry Tagged data point to be collected into a table, pivoted, and statistically analyzed Trace2D Tagged, labeled XYData defining a line to be plotted on xy graph <pre><code>from pathlib import Path\nimport trendify\n\ndef user_defined_data_product_generator(workdir: Path) -&gt; trendify.ProductList:\n    inputs = ... # load inputs from workdir\n    results = ... # load results from workdir\n    products: trendify.ProductList = []\n\n    # Append products to list\n    trendify.Trace2D(...).append_to_list(products)\n    trendify.Point2D(...).append_to_list(products)\n    trendify.TableEntry(...).append_to_list(products)\n    trendify.HistogramEntry(...).append_to_list(products)\n    ...\n\n    # Return the list of valid data products\n    return products\n</code></pre>"},{"location":"recipe/#running-the-generator-function","title":"Running the Generator Function","text":"<p>Run the folling command in a terminal (with trendify installed to the active python environment) command line interface (CLI) to </p> <ul> <li>make data products</li> <li>sort data products</li> <li>make static assets</li> <li>make static asset include files</li> <li>make interactive Grafana dashboard</li> </ul> <pre><code>workdir=./workdir\ninputs=$workdir/data_directories/*/\noutput=$workdir/output/\ngenerator=trendify.examples:example_data_product_generator\ntrendify make all -g $generator -i $inputs -o $output -n 10 --port 800\n</code></pre> <p>Use Parallelization</p> <p>Use <code>--n-procs</code> &gt; 1 to parallelize the above steps.  Use <code>--n-procs 1</code> for debugging your product generator (better error Traceback).</p>"},{"location":"recipe/#viewing-the-results","title":"Viewing the Results","text":""},{"location":"recipe/#combined","title":"Combined","text":"<p><code>trendify make all</code> outputs both static and interactive assets.  All flavors of the <code>trendify make</code> command produce <code>data_products.json</code> files in the input directories and sorted products in a user-specified output directory.</p>"},{"location":"recipe/#static-assets","title":"Static Assets","text":"<p><code>trendify make static</code> outputs the following assets:</p> <ul> <li>Static CSV and JPG files in the <code>$workdir/trendify_output/static_assets/</code> directory.</li> </ul>"},{"location":"recipe/#interactive-assets","title":"Interactive Assets","text":"<p><code>trendify make interactive</code> produces a JSON file to define an interactive Grafana dashboard that loads and displays the generated data.  This functionality has been demonstrated, but is still very much in the  early stages and being defined.  Benefits include the ability to mouse-over data points and see tracked metadata (such as which run produced a given data point).</p> <p>To Do</p> <p>Add more documentation for how to start Grafana, serve the data, and view the data.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>grafana_api<ul> <li>dashboard</li> <li>panels<ul> <li>xy_chart</li> </ul> </li> <li>transformations<ul> <li>transformations</li> </ul> </li> </ul> </li> <li>trendify<ul> <li>API</li> <li>CLI</li> <li>examples</li> <li>local_server</li> <li>server</li> </ul> </li> </ul>"},{"location":"reference/grafana_api/","title":"grafana_api","text":""},{"location":"reference/grafana_api/#grafana_api","title":"grafana_api","text":"Bug <p>The Grafana API is experimental and still in development. Don't use it yet.</p>"},{"location":"reference/grafana_api/#grafana_api.Annotation","title":"Annotation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"builtIn\": {\n      \"default\": 1,\n      \"title\": \"Builtin\",\n      \"type\": \"integer\"\n    },\n    \"datasource\": {\n      \"default\": {\n        \"type\": \"grafana\",\n        \"uid\": \"-- Grafana --\"\n      },\n      \"title\": \"Datasource\",\n      \"type\": \"object\"\n    },\n    \"enable\": {\n      \"default\": true,\n      \"title\": \"Enable\",\n      \"type\": \"boolean\"\n    },\n    \"hide\": {\n      \"default\": true,\n      \"title\": \"Hide\",\n      \"type\": \"boolean\"\n    },\n    \"iconColor\": {\n      \"default\": \"rgba(0, 211, 255, 1)\",\n      \"title\": \"Iconcolor\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"default\": \"Annotation &amp; Alers\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"dashboard\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"Annotation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>builtIn</code>                 (<code>int</code>)             </li> <li> <code>datasource</code>                 (<code>dict</code>)             </li> <li> <code>enable</code>                 (<code>bool</code>)             </li> <li> <code>hide</code>                 (<code>bool</code>)             </li> <li> <code>iconColor</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Annotations","title":"Annotations  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Annotation\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"builtIn\": {\n          \"default\": 1,\n          \"title\": \"Builtin\",\n          \"type\": \"integer\"\n        },\n        \"datasource\": {\n          \"default\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"title\": \"Datasource\",\n          \"type\": \"object\"\n        },\n        \"enable\": {\n          \"default\": true,\n          \"title\": \"Enable\",\n          \"type\": \"boolean\"\n        },\n        \"hide\": {\n          \"default\": true,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"iconColor\": {\n          \"default\": \"rgba(0, 211, 255, 1)\",\n          \"title\": \"Iconcolor\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"default\": \"Annotation &amp; Alers\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"dashboard\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Annotation\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"list\": {\n      \"default\": [\n        {\n          \"builtIn\": 1,\n          \"datasource\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"enable\": true,\n          \"hide\": true,\n          \"iconColor\": \"rgba(0, 211, 255, 1)\",\n          \"name\": \"Annotation &amp; Alers\",\n          \"type\": \"dashboard\"\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Annotation\"\n      },\n      \"title\": \"List\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"Annotations\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>list</code>                 (<code>List[Annotation]</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Dashboard","title":"Dashboard  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Annotation\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"builtIn\": {\n          \"default\": 1,\n          \"title\": \"Builtin\",\n          \"type\": \"integer\"\n        },\n        \"datasource\": {\n          \"default\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"title\": \"Datasource\",\n          \"type\": \"object\"\n        },\n        \"enable\": {\n          \"default\": true,\n          \"title\": \"Enable\",\n          \"type\": \"boolean\"\n        },\n        \"hide\": {\n          \"default\": true,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"iconColor\": {\n          \"default\": \"rgba(0, 211, 255, 1)\",\n          \"title\": \"Iconcolor\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"default\": \"Annotation &amp; Alers\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"dashboard\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Annotation\",\n      \"type\": \"object\"\n    },\n    \"Annotations\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"list\": {\n          \"default\": [\n            {\n              \"builtIn\": 1,\n              \"datasource\": {\n                \"type\": \"grafana\",\n                \"uid\": \"-- Grafana --\"\n              },\n              \"enable\": true,\n              \"hide\": true,\n              \"iconColor\": \"rgba(0, 211, 255, 1)\",\n              \"name\": \"Annotation &amp; Alers\",\n              \"type\": \"dashboard\"\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Annotation\"\n          },\n          \"title\": \"List\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Annotations\",\n      \"type\": \"object\"\n    },\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"FieldConfig\": {\n      \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n      \"properties\": {\n        \"defaults\": {\n          \"$ref\": \"#/$defs/Defaults\",\n          \"default\": {\n            \"color\": {\n              \"fixedColor\": \"semi-dark-blue\",\n              \"mote\": \"palette-classic\"\n            },\n            \"cusom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 50,\n              \"hideFrom\": {\n                \"legend\": false,\n                \"tooltip\": false,\n                \"viz\": false\n              },\n              \"lineStyle\": {\n                \"fill\": \"solid\"\n              },\n              \"lineWidth\": 2,\n              \"pointShape\": \"circle\",\n              \"pointSize\": {\n                \"fixed\": 3\n              },\n              \"pointStrokeWidth\": 1,\n              \"scaleDistribution\": {\n                \"type\": \"linear\"\n              },\n              \"show\": \"points\"\n            },\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\n                  \"color\": \"green\",\n                  \"value\": null\n                }\n              ]\n            }\n          }\n        },\n        \"overrides\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Overrides\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"FieldConfig\",\n      \"type\": \"object\"\n    },\n    \"GridPosition\": {\n      \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n      \"properties\": {\n        \"h\": {\n          \"default\": 16,\n          \"title\": \"H\",\n          \"type\": \"integer\"\n        },\n        \"w\": {\n          \"default\": 24,\n          \"title\": \"W\",\n          \"type\": \"integer\"\n        },\n        \"x\": {\n          \"default\": 0,\n          \"title\": \"X\",\n          \"type\": \"integer\"\n        },\n        \"y\": {\n          \"default\": 0,\n          \"title\": \"Y\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"GridPosition\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Options\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"legend\": {\n          \"$ref\": \"#/$defs/Legend\",\n          \"default\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true,\n            \"sortBy\": \"Name\",\n            \"sortDesc\": false\n          }\n        },\n        \"mapping\": {\n          \"default\": \"auto\",\n          \"title\": \"Mapping\",\n          \"type\": \"string\"\n        },\n        \"series\": {\n          \"default\": [\n            {\n              \"x\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"x\"\n                }\n              },\n              \"y\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"y\"\n                }\n              }\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Series\"\n          },\n          \"title\": \"Series\",\n          \"type\": \"array\"\n        },\n        \"tooltop\": {\n          \"$ref\": \"#/$defs/ToolTip\",\n          \"default\": {\n            \"mode\": \"single\",\n            \"sort\": \"none\"\n          }\n        }\n      },\n      \"title\": \"Options\",\n      \"type\": \"object\"\n    },\n    \"Panel\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\",\n            \"default\": true\n          }\n        },\n        \"fieldConfig\": {\n          \"$ref\": \"#/$defs/FieldConfig\",\n          \"default\": {\n            \"defaults\": {\n              \"color\": {\n                \"fixedColor\": \"semi-dark-blue\",\n                \"mote\": \"palette-classic\"\n              },\n              \"cusom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"fillOpacity\": 50,\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineStyle\": {\n                  \"fill\": \"solid\"\n                },\n                \"lineWidth\": 2,\n                \"pointShape\": \"circle\",\n                \"pointSize\": {\n                  \"fixed\": 3\n                },\n                \"pointStrokeWidth\": 1,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"show\": \"points\"\n              },\n              \"fieldMinMax\": false,\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  }\n                ]\n              }\n            },\n            \"overrides\": []\n          }\n        },\n        \"gridPos\": {\n          \"$ref\": \"#/$defs/GridPosition\",\n          \"default\": {\n            \"h\": 16,\n            \"w\": 24,\n            \"x\": 0,\n            \"y\": 0\n          }\n        },\n        \"id\": {\n          \"default\": 1,\n          \"title\": \"Id\",\n          \"type\": \"integer\"\n        },\n        \"options\": {\n          \"$ref\": \"#/$defs/Options\",\n          \"default\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true,\n              \"sortBy\": \"Name\",\n              \"sortDesc\": false\n            },\n            \"mapping\": \"auto\",\n            \"series\": [\n              {\n                \"x\": {\n                  \"matcher\": {\n                    \"id\": \"byName\",\n                    \"options\": \"x\"\n                  }\n                },\n                \"y\": {\n                  \"matcher\": {\n                    \"id\": \"byName\",\n                    \"options\": \"y\"\n                  }\n                }\n              }\n            ],\n            \"tooltop\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          }\n        },\n        \"pluginVersion\": {\n          \"default\": \"11.2.2\",\n          \"title\": \"Pluginversion\",\n          \"type\": \"string\"\n        },\n        \"targets\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/Target\"\n          },\n          \"title\": \"Targets\",\n          \"type\": \"array\"\n        },\n        \"title\": {\n          \"default\": \"Example XY Chart for Trace2D Data\",\n          \"title\": \"Title\",\n          \"type\": \"string\"\n        },\n        \"transformations\": {\n          \"default\": [],\n          \"items\": {\n            \"$ref\": \"#/$defs/Transformation\"\n          },\n          \"title\": \"Transformations\",\n          \"type\": \"array\"\n        },\n        \"type\": {\n          \"default\": \"xychart\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"targets\"\n      ],\n      \"title\": \"Panel\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"columns\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Columns\",\n          \"type\": \"array\"\n        },\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\"\n          }\n        },\n        \"filters\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Filters\",\n          \"type\": \"array\"\n        },\n        \"format\": {\n          \"default\": \"table\",\n          \"title\": \"Format\",\n          \"type\": \"string\"\n        },\n        \"global_query_id\": {\n          \"default\": \"\",\n          \"title\": \"Global Query Id\",\n          \"type\": \"string\"\n        },\n        \"hide\": {\n          \"default\": false,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"parser\": {\n          \"default\": \"uql\",\n          \"title\": \"Parser\",\n          \"type\": \"string\"\n        },\n        \"refId\": {\n          \"default\": \"A\",\n          \"title\": \"Refid\",\n          \"type\": \"string\"\n        },\n        \"root_selector\": {\n          \"default\": \"\",\n          \"title\": \"Root Selector\",\n          \"type\": \"string\"\n        },\n        \"source\": {\n          \"default\": \"url\",\n          \"title\": \"Source\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"json\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uql\": {\n          \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n          \"title\": \"Uql\",\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"url_options\": {\n          \"$ref\": \"#/$defs/URLOptions\",\n          \"default\": {\n            \"data\": \"\",\n            \"method\": \"GET\"\n          }\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    },\n    \"Transformation\": {\n      \"description\": \"    \\n    \",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Transformation\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"annotations\": {\n      \"$ref\": \"#/$defs/Annotations\",\n      \"default\": {\n        \"list\": [\n          {\n            \"builtIn\": 1,\n            \"datasource\": {\n              \"type\": \"grafana\",\n              \"uid\": \"-- Grafana --\"\n            },\n            \"enable\": true,\n            \"hide\": true,\n            \"iconColor\": \"rgba(0, 211, 255, 1)\",\n            \"name\": \"Annotation &amp; Alers\",\n            \"type\": \"dashboard\"\n          }\n        ]\n      }\n    },\n    \"description\": {\n      \"default\": \"Try Parsing JSON Data\",\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"editable\": {\n      \"default\": true,\n      \"title\": \"Editable\",\n      \"type\": \"boolean\"\n    },\n    \"fiscalYearStartMonth\": {\n      \"default\": 0,\n      \"title\": \"Fiscalyearstartmonth\",\n      \"type\": \"integer\"\n    },\n    \"graphTooltip\": {\n      \"default\": 0,\n      \"title\": \"Graphtooltip\",\n      \"type\": \"integer\"\n    },\n    \"id\": {\n      \"default\": 1,\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"links\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Links\",\n      \"type\": \"array\"\n    },\n    \"panels\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Panel\"\n      },\n      \"title\": \"Panels\",\n      \"type\": \"array\"\n    },\n    \"refresh\": {\n      \"default\": \"\",\n      \"title\": \"Refresh\",\n      \"type\": \"string\"\n    },\n    \"schemaVersion\": {\n      \"default\": 39,\n      \"title\": \"Schemaversion\",\n      \"type\": \"integer\"\n    },\n    \"tags\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"templating\": {\n      \"default\": {\n        \"list\": []\n      },\n      \"title\": \"Templating\",\n      \"type\": \"object\"\n    },\n    \"time\": {\n      \"default\": {\n        \"from\": \"now-6h\",\n        \"to\": \"now\"\n      },\n      \"title\": \"Time\",\n      \"type\": \"object\"\n    },\n    \"timepicker\": {\n      \"default\": {},\n      \"title\": \"Timepicker\",\n      \"type\": \"object\"\n    },\n    \"timezone\": {\n      \"default\": \"browser\",\n      \"title\": \"Timezone\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"default\": \"DemoDashboard\",\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"de1dapkdr47wgf\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"default\": 20,\n      \"title\": \"Version\",\n      \"type\": \"integer\"\n    },\n    \"weekStart\": {\n      \"default\": \"\",\n      \"title\": \"Weekstart\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"panels\"\n  ],\n  \"title\": \"Dashboard\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>annotations</code>                 (<code>Annotations</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>editable</code>                 (<code>bool</code>)             </li> <li> <code>fiscalYearStartMonth</code>                 (<code>int</code>)             </li> <li> <code>graphTooltip</code>                 (<code>int</code>)             </li> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>links</code>                 (<code>list</code>)             </li> <li> <code>panels</code>                 (<code>list[Panel]</code>)             </li> <li> <code>refresh</code>                 (<code>str</code>)             </li> <li> <code>schemaVersion</code>                 (<code>int</code>)             </li> <li> <code>tags</code>                 (<code>list</code>)             </li> <li> <code>templating</code>                 (<code>Dict</code>)             </li> <li> <code>time</code>                 (<code>Dict</code>)             </li> <li> <code>timepicker</code>                 (<code>Dict</code>)             </li> <li> <code>timezone</code>                 (<code>str</code>)             </li> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>uid</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>int</code>)             </li> <li> <code>weekStart</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.DataSource","title":"DataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"DataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uid</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.DefaultDataSource","title":"DefaultDataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataSource</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    },\n    \"default\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"title\": \"Default\"\n    }\n  },\n  \"title\": \"DefaultDataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>default</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.FieldConfig","title":"FieldConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code> \"fieldConfig\": {\n    \"defaults\": {\n\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n\n    },\n    \"overrides\": []\n},\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n  \"properties\": {\n    \"defaults\": {\n      \"$ref\": \"#/$defs/Defaults\",\n      \"default\": {\n        \"color\": {\n          \"fixedColor\": \"semi-dark-blue\",\n          \"mote\": \"palette-classic\"\n        },\n        \"cusom\": {\n          \"axisBorderShow\": false,\n          \"axisCenteredZero\": false,\n          \"axisColorMode\": \"text\",\n          \"axisLabel\": \"\",\n          \"axisPlacement\": \"auto\",\n          \"fillOpacity\": 50,\n          \"hideFrom\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          },\n          \"lineStyle\": {\n            \"fill\": \"solid\"\n          },\n          \"lineWidth\": 2,\n          \"pointShape\": \"circle\",\n          \"pointSize\": {\n            \"fixed\": 3\n          },\n          \"pointStrokeWidth\": 1,\n          \"scaleDistribution\": {\n            \"type\": \"linear\"\n          },\n          \"show\": \"points\"\n        },\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n        \"thresholds\": {\n          \"mode\": \"absolute\",\n          \"steps\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ]\n        }\n      }\n    },\n    \"overrides\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Overrides\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"FieldConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>defaults</code>                 (<code>Defaults</code>)             </li> <li> <code>overrides</code>                 (<code>list</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.GridPosition","title":"GridPosition  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"gridPos\": {\n    \"h\": 8,\n    \"w\": 12,\n    \"x\": 12,\n    \"y\": 16\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n  \"properties\": {\n    \"h\": {\n      \"default\": 16,\n      \"title\": \"H\",\n      \"type\": \"integer\"\n    },\n    \"w\": {\n      \"default\": 24,\n      \"title\": \"W\",\n      \"type\": \"integer\"\n    },\n    \"x\": {\n      \"default\": 0,\n      \"title\": \"X\",\n      \"type\": \"integer\"\n    },\n    \"y\": {\n      \"default\": 0,\n      \"title\": \"Y\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"GridPosition\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>h</code>                 (<code>int</code>)             </li> <li> <code>w</code>                 (<code>int</code>)             </li> <li> <code>x</code>                 (<code>int</code>)             </li> <li> <code>y</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.HideFrom","title":"HideFrom  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>{     \"legend\": false,     \"tooltip\": false,     \"viz\": false }</p> Show JSON schema: <pre><code>{\n  \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n  \"properties\": {\n    \"legend\": {\n      \"default\": false,\n      \"title\": \"Legend\",\n      \"type\": \"boolean\"\n    },\n    \"tooltip\": {\n      \"default\": false,\n      \"title\": \"Tooltip\",\n      \"type\": \"boolean\"\n    },\n    \"viz\": {\n      \"default\": false,\n      \"title\": \"Viz\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"HideFrom\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>bool</code>)             </li> <li> <code>tooltip</code>                 (<code>bool</code>)             </li> <li> <code>viz</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Legend","title":"Legend  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"calcs\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Calcs\",\n      \"type\": \"array\"\n    },\n    \"displayMode\": {\n      \"default\": \"list\",\n      \"title\": \"Displaymode\",\n      \"type\": \"string\"\n    },\n    \"placement\": {\n      \"default\": \"bottom\",\n      \"title\": \"Placement\",\n      \"type\": \"string\"\n    },\n    \"showLegend\": {\n      \"default\": true,\n      \"title\": \"Showlegend\",\n      \"type\": \"boolean\"\n    },\n    \"sortBy\": {\n      \"default\": \"Name\",\n      \"title\": \"Sortby\",\n      \"type\": \"string\"\n    },\n    \"sortDesc\": {\n      \"default\": false,\n      \"title\": \"Sortdesc\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"Legend\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>calcs</code>                 (<code>list</code>)             </li> <li> <code>displayMode</code>                 (<code>str</code>)             </li> <li> <code>placement</code>                 (<code>str</code>)             </li> <li> <code>showLegend</code>                 (<code>bool</code>)             </li> <li> <code>sortBy</code>                 (<code>str</code>)             </li> <li> <code>sortDesc</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.LineStyle","title":"LineStyle  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fill\": \"solid\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n  \"properties\": {\n    \"fill\": {\n      \"default\": \"solid\",\n      \"title\": \"Fill\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"LineStyle\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fill</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Options","title":"Options  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"legend\": {\n      \"$ref\": \"#/$defs/Legend\",\n      \"default\": {\n        \"calcs\": [],\n        \"displayMode\": \"list\",\n        \"placement\": \"bottom\",\n        \"showLegend\": true,\n        \"sortBy\": \"Name\",\n        \"sortDesc\": false\n      }\n    },\n    \"mapping\": {\n      \"default\": \"auto\",\n      \"title\": \"Mapping\",\n      \"type\": \"string\"\n    },\n    \"series\": {\n      \"default\": [\n        {\n          \"x\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          },\n          \"y\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Series\"\n      },\n      \"title\": \"Series\",\n      \"type\": \"array\"\n    },\n    \"tooltop\": {\n      \"$ref\": \"#/$defs/ToolTip\",\n      \"default\": {\n        \"mode\": \"single\",\n        \"sort\": \"none\"\n      }\n    }\n  },\n  \"title\": \"Options\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>Legend</code>)             </li> <li> <code>mapping</code>                 (<code>str</code>)             </li> <li> <code>series</code>                 (<code>list[Series]</code>)             </li> <li> <code>tooltop</code>                 (<code>ToolTip</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Panel","title":"Panel  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"FieldConfig\": {\n      \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n      \"properties\": {\n        \"defaults\": {\n          \"$ref\": \"#/$defs/Defaults\",\n          \"default\": {\n            \"color\": {\n              \"fixedColor\": \"semi-dark-blue\",\n              \"mote\": \"palette-classic\"\n            },\n            \"cusom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 50,\n              \"hideFrom\": {\n                \"legend\": false,\n                \"tooltip\": false,\n                \"viz\": false\n              },\n              \"lineStyle\": {\n                \"fill\": \"solid\"\n              },\n              \"lineWidth\": 2,\n              \"pointShape\": \"circle\",\n              \"pointSize\": {\n                \"fixed\": 3\n              },\n              \"pointStrokeWidth\": 1,\n              \"scaleDistribution\": {\n                \"type\": \"linear\"\n              },\n              \"show\": \"points\"\n            },\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\n                  \"color\": \"green\",\n                  \"value\": null\n                }\n              ]\n            }\n          }\n        },\n        \"overrides\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Overrides\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"FieldConfig\",\n      \"type\": \"object\"\n    },\n    \"GridPosition\": {\n      \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n      \"properties\": {\n        \"h\": {\n          \"default\": 16,\n          \"title\": \"H\",\n          \"type\": \"integer\"\n        },\n        \"w\": {\n          \"default\": 24,\n          \"title\": \"W\",\n          \"type\": \"integer\"\n        },\n        \"x\": {\n          \"default\": 0,\n          \"title\": \"X\",\n          \"type\": \"integer\"\n        },\n        \"y\": {\n          \"default\": 0,\n          \"title\": \"Y\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"GridPosition\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Options\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"legend\": {\n          \"$ref\": \"#/$defs/Legend\",\n          \"default\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true,\n            \"sortBy\": \"Name\",\n            \"sortDesc\": false\n          }\n        },\n        \"mapping\": {\n          \"default\": \"auto\",\n          \"title\": \"Mapping\",\n          \"type\": \"string\"\n        },\n        \"series\": {\n          \"default\": [\n            {\n              \"x\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"x\"\n                }\n              },\n              \"y\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"y\"\n                }\n              }\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Series\"\n          },\n          \"title\": \"Series\",\n          \"type\": \"array\"\n        },\n        \"tooltop\": {\n          \"$ref\": \"#/$defs/ToolTip\",\n          \"default\": {\n            \"mode\": \"single\",\n            \"sort\": \"none\"\n          }\n        }\n      },\n      \"title\": \"Options\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"columns\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Columns\",\n          \"type\": \"array\"\n        },\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\"\n          }\n        },\n        \"filters\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Filters\",\n          \"type\": \"array\"\n        },\n        \"format\": {\n          \"default\": \"table\",\n          \"title\": \"Format\",\n          \"type\": \"string\"\n        },\n        \"global_query_id\": {\n          \"default\": \"\",\n          \"title\": \"Global Query Id\",\n          \"type\": \"string\"\n        },\n        \"hide\": {\n          \"default\": false,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"parser\": {\n          \"default\": \"uql\",\n          \"title\": \"Parser\",\n          \"type\": \"string\"\n        },\n        \"refId\": {\n          \"default\": \"A\",\n          \"title\": \"Refid\",\n          \"type\": \"string\"\n        },\n        \"root_selector\": {\n          \"default\": \"\",\n          \"title\": \"Root Selector\",\n          \"type\": \"string\"\n        },\n        \"source\": {\n          \"default\": \"url\",\n          \"title\": \"Source\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"json\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uql\": {\n          \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n          \"title\": \"Uql\",\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"url_options\": {\n          \"$ref\": \"#/$defs/URLOptions\",\n          \"default\": {\n            \"data\": \"\",\n            \"method\": \"GET\"\n          }\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    },\n    \"Transformation\": {\n      \"description\": \"    \\n    \",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Transformation\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\",\n        \"default\": true\n      }\n    },\n    \"fieldConfig\": {\n      \"$ref\": \"#/$defs/FieldConfig\",\n      \"default\": {\n        \"defaults\": {\n          \"color\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          },\n          \"cusom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          },\n          \"fieldMinMax\": false,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        },\n        \"overrides\": []\n      }\n    },\n    \"gridPos\": {\n      \"$ref\": \"#/$defs/GridPosition\",\n      \"default\": {\n        \"h\": 16,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      }\n    },\n    \"id\": {\n      \"default\": 1,\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"options\": {\n      \"$ref\": \"#/$defs/Options\",\n      \"default\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true,\n          \"sortBy\": \"Name\",\n          \"sortDesc\": false\n        },\n        \"mapping\": \"auto\",\n        \"series\": [\n          {\n            \"x\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"x\"\n              }\n            },\n            \"y\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"y\"\n              }\n            }\n          }\n        ],\n        \"tooltop\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      }\n    },\n    \"pluginVersion\": {\n      \"default\": \"11.2.2\",\n      \"title\": \"Pluginversion\",\n      \"type\": \"string\"\n    },\n    \"targets\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Target\"\n      },\n      \"title\": \"Targets\",\n      \"type\": \"array\"\n    },\n    \"title\": {\n      \"default\": \"Example XY Chart for Trace2D Data\",\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"transformations\": {\n      \"default\": [],\n      \"items\": {\n        \"$ref\": \"#/$defs/Transformation\"\n      },\n      \"title\": \"Transformations\",\n      \"type\": \"array\"\n    },\n    \"type\": {\n      \"default\": \"xychart\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"targets\"\n  ],\n  \"title\": \"Panel\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>fieldConfig</code>                 (<code>FieldConfig</code>)             </li> <li> <code>gridPos</code>                 (<code>GridPosition</code>)             </li> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>options</code>                 (<code>Options</code>)             </li> <li> <code>pluginVersion</code>                 (<code>str</code>)             </li> <li> <code>targets</code>                 (<code>list[Target]</code>)             </li> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>transformations</code>                 (<code>list[Transformation]</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.PointSize","title":"PointSize  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fixed\": 3\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n  \"properties\": {\n    \"fixed\": {\n      \"default\": 3,\n      \"title\": \"Fixed\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"PointSize\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fixed</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.ScaleDistribution","title":"ScaleDistribution  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"type\": \"linear\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"linear\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ScaleDistribution\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Series","title":"Series  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"x\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"x\"\n        }\n      }\n    },\n    \"y\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"y\"\n        }\n      }\n    }\n  },\n  \"title\": \"Series\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>x</code>                 (<code>Matcher</code>)             </li> <li> <code>y</code>                 (<code>Matcher</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Target","title":"Target  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"columns\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Columns\",\n      \"type\": \"array\"\n    },\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\"\n      }\n    },\n    \"filters\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Filters\",\n      \"type\": \"array\"\n    },\n    \"format\": {\n      \"default\": \"table\",\n      \"title\": \"Format\",\n      \"type\": \"string\"\n    },\n    \"global_query_id\": {\n      \"default\": \"\",\n      \"title\": \"Global Query Id\",\n      \"type\": \"string\"\n    },\n    \"hide\": {\n      \"default\": false,\n      \"title\": \"Hide\",\n      \"type\": \"boolean\"\n    },\n    \"parser\": {\n      \"default\": \"uql\",\n      \"title\": \"Parser\",\n      \"type\": \"string\"\n    },\n    \"refId\": {\n      \"default\": \"A\",\n      \"title\": \"Refid\",\n      \"type\": \"string\"\n    },\n    \"root_selector\": {\n      \"default\": \"\",\n      \"title\": \"Root Selector\",\n      \"type\": \"string\"\n    },\n    \"source\": {\n      \"default\": \"url\",\n      \"title\": \"Source\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"json\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uql\": {\n      \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n      \"title\": \"Uql\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"title\": \"Url\",\n      \"type\": \"string\"\n    },\n    \"url_options\": {\n      \"$ref\": \"#/$defs/URLOptions\",\n      \"default\": {\n        \"data\": \"\",\n        \"method\": \"GET\"\n      }\n    }\n  },\n  \"required\": [\n    \"url\"\n  ],\n  \"title\": \"Target\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>columns</code>                 (<code>list</code>)             </li> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>filters</code>                 (<code>list</code>)             </li> <li> <code>format</code>                 (<code>str</code>)             </li> <li> <code>global_query_id</code>                 (<code>str</code>)             </li> <li> <code>hide</code>                 (<code>bool</code>)             </li> <li> <code>parser</code>                 (<code>str</code>)             </li> <li> <code>refId</code>                 (<code>str</code>)             </li> <li> <code>root_selector</code>                 (<code>str</code>)             </li> <li> <code>source</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uql</code>                 (<code>str</code>)             </li> <li> <code>url</code>                 (<code>str</code>)             </li> <li> <code>url_options</code>                 (<code>URLOptions</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Threshold","title":"Threshold  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"color\": \"green\",\n    \"value\": null\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"green\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"Threshold\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Thresholds","title":"Thresholds  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"thresholds\": {\n    \"mode\": \"absolute\",\n    \"steps\": [\n\n    ]\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"absolute\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"steps\": {\n      \"default\": [\n        {\n          \"color\": \"green\",\n          \"value\": null\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Threshold\"\n      },\n      \"title\": \"Steps\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"Thresholds\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>steps</code>                 (<code>list[Threshold]</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.ToolTip","title":"ToolTip  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"single\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"sort\": {\n      \"default\": \"none\",\n      \"title\": \"Sort\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ToolTip\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>sort</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.Transformation","title":"Transformation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \\n    \",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"Transformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/#grafana_api.URLOptions","title":"URLOptions  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"data\": {\n      \"default\": \"\",\n      \"title\": \"Data\",\n      \"type\": \"string\"\n    },\n    \"method\": {\n      \"default\": \"GET\",\n      \"title\": \"Method\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"URLOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data</code>                 (<code>str</code>)             </li> <li> <code>method</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/dashboard/","title":"dashboard","text":""},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard","title":"dashboard","text":"<p>Dashboard definition</p>"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Annotation","title":"Annotation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"builtIn\": {\n      \"default\": 1,\n      \"title\": \"Builtin\",\n      \"type\": \"integer\"\n    },\n    \"datasource\": {\n      \"default\": {\n        \"type\": \"grafana\",\n        \"uid\": \"-- Grafana --\"\n      },\n      \"title\": \"Datasource\",\n      \"type\": \"object\"\n    },\n    \"enable\": {\n      \"default\": true,\n      \"title\": \"Enable\",\n      \"type\": \"boolean\"\n    },\n    \"hide\": {\n      \"default\": true,\n      \"title\": \"Hide\",\n      \"type\": \"boolean\"\n    },\n    \"iconColor\": {\n      \"default\": \"rgba(0, 211, 255, 1)\",\n      \"title\": \"Iconcolor\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"default\": \"Annotation &amp; Alers\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"dashboard\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"Annotation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>builtIn</code>                 (<code>int</code>)             </li> <li> <code>datasource</code>                 (<code>dict</code>)             </li> <li> <code>enable</code>                 (<code>bool</code>)             </li> <li> <code>hide</code>                 (<code>bool</code>)             </li> <li> <code>iconColor</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Annotations","title":"Annotations  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Annotation\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"builtIn\": {\n          \"default\": 1,\n          \"title\": \"Builtin\",\n          \"type\": \"integer\"\n        },\n        \"datasource\": {\n          \"default\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"title\": \"Datasource\",\n          \"type\": \"object\"\n        },\n        \"enable\": {\n          \"default\": true,\n          \"title\": \"Enable\",\n          \"type\": \"boolean\"\n        },\n        \"hide\": {\n          \"default\": true,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"iconColor\": {\n          \"default\": \"rgba(0, 211, 255, 1)\",\n          \"title\": \"Iconcolor\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"default\": \"Annotation &amp; Alers\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"dashboard\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Annotation\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"list\": {\n      \"default\": [\n        {\n          \"builtIn\": 1,\n          \"datasource\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"enable\": true,\n          \"hide\": true,\n          \"iconColor\": \"rgba(0, 211, 255, 1)\",\n          \"name\": \"Annotation &amp; Alers\",\n          \"type\": \"dashboard\"\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Annotation\"\n      },\n      \"title\": \"List\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"Annotations\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>list</code>                 (<code>List[Annotation]</code>)             </li> </ul>"},{"location":"reference/grafana_api/dashboard/#grafana_api.dashboard.Dashboard","title":"Dashboard  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Annotation\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"builtIn\": {\n          \"default\": 1,\n          \"title\": \"Builtin\",\n          \"type\": \"integer\"\n        },\n        \"datasource\": {\n          \"default\": {\n            \"type\": \"grafana\",\n            \"uid\": \"-- Grafana --\"\n          },\n          \"title\": \"Datasource\",\n          \"type\": \"object\"\n        },\n        \"enable\": {\n          \"default\": true,\n          \"title\": \"Enable\",\n          \"type\": \"boolean\"\n        },\n        \"hide\": {\n          \"default\": true,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"iconColor\": {\n          \"default\": \"rgba(0, 211, 255, 1)\",\n          \"title\": \"Iconcolor\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"default\": \"Annotation &amp; Alers\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"dashboard\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Annotation\",\n      \"type\": \"object\"\n    },\n    \"Annotations\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"list\": {\n          \"default\": [\n            {\n              \"builtIn\": 1,\n              \"datasource\": {\n                \"type\": \"grafana\",\n                \"uid\": \"-- Grafana --\"\n              },\n              \"enable\": true,\n              \"hide\": true,\n              \"iconColor\": \"rgba(0, 211, 255, 1)\",\n              \"name\": \"Annotation &amp; Alers\",\n              \"type\": \"dashboard\"\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Annotation\"\n          },\n          \"title\": \"List\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Annotations\",\n      \"type\": \"object\"\n    },\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"FieldConfig\": {\n      \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n      \"properties\": {\n        \"defaults\": {\n          \"$ref\": \"#/$defs/Defaults\",\n          \"default\": {\n            \"color\": {\n              \"fixedColor\": \"semi-dark-blue\",\n              \"mote\": \"palette-classic\"\n            },\n            \"cusom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 50,\n              \"hideFrom\": {\n                \"legend\": false,\n                \"tooltip\": false,\n                \"viz\": false\n              },\n              \"lineStyle\": {\n                \"fill\": \"solid\"\n              },\n              \"lineWidth\": 2,\n              \"pointShape\": \"circle\",\n              \"pointSize\": {\n                \"fixed\": 3\n              },\n              \"pointStrokeWidth\": 1,\n              \"scaleDistribution\": {\n                \"type\": \"linear\"\n              },\n              \"show\": \"points\"\n            },\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\n                  \"color\": \"green\",\n                  \"value\": null\n                }\n              ]\n            }\n          }\n        },\n        \"overrides\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Overrides\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"FieldConfig\",\n      \"type\": \"object\"\n    },\n    \"GridPosition\": {\n      \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n      \"properties\": {\n        \"h\": {\n          \"default\": 16,\n          \"title\": \"H\",\n          \"type\": \"integer\"\n        },\n        \"w\": {\n          \"default\": 24,\n          \"title\": \"W\",\n          \"type\": \"integer\"\n        },\n        \"x\": {\n          \"default\": 0,\n          \"title\": \"X\",\n          \"type\": \"integer\"\n        },\n        \"y\": {\n          \"default\": 0,\n          \"title\": \"Y\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"GridPosition\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Options\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"legend\": {\n          \"$ref\": \"#/$defs/Legend\",\n          \"default\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true,\n            \"sortBy\": \"Name\",\n            \"sortDesc\": false\n          }\n        },\n        \"mapping\": {\n          \"default\": \"auto\",\n          \"title\": \"Mapping\",\n          \"type\": \"string\"\n        },\n        \"series\": {\n          \"default\": [\n            {\n              \"x\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"x\"\n                }\n              },\n              \"y\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"y\"\n                }\n              }\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Series\"\n          },\n          \"title\": \"Series\",\n          \"type\": \"array\"\n        },\n        \"tooltop\": {\n          \"$ref\": \"#/$defs/ToolTip\",\n          \"default\": {\n            \"mode\": \"single\",\n            \"sort\": \"none\"\n          }\n        }\n      },\n      \"title\": \"Options\",\n      \"type\": \"object\"\n    },\n    \"Panel\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\",\n            \"default\": true\n          }\n        },\n        \"fieldConfig\": {\n          \"$ref\": \"#/$defs/FieldConfig\",\n          \"default\": {\n            \"defaults\": {\n              \"color\": {\n                \"fixedColor\": \"semi-dark-blue\",\n                \"mote\": \"palette-classic\"\n              },\n              \"cusom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"fillOpacity\": 50,\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"lineStyle\": {\n                  \"fill\": \"solid\"\n                },\n                \"lineWidth\": 2,\n                \"pointShape\": \"circle\",\n                \"pointSize\": {\n                  \"fixed\": 3\n                },\n                \"pointStrokeWidth\": 1,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"show\": \"points\"\n              },\n              \"fieldMinMax\": false,\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\",\n                    \"value\": null\n                  }\n                ]\n              }\n            },\n            \"overrides\": []\n          }\n        },\n        \"gridPos\": {\n          \"$ref\": \"#/$defs/GridPosition\",\n          \"default\": {\n            \"h\": 16,\n            \"w\": 24,\n            \"x\": 0,\n            \"y\": 0\n          }\n        },\n        \"id\": {\n          \"default\": 1,\n          \"title\": \"Id\",\n          \"type\": \"integer\"\n        },\n        \"options\": {\n          \"$ref\": \"#/$defs/Options\",\n          \"default\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true,\n              \"sortBy\": \"Name\",\n              \"sortDesc\": false\n            },\n            \"mapping\": \"auto\",\n            \"series\": [\n              {\n                \"x\": {\n                  \"matcher\": {\n                    \"id\": \"byName\",\n                    \"options\": \"x\"\n                  }\n                },\n                \"y\": {\n                  \"matcher\": {\n                    \"id\": \"byName\",\n                    \"options\": \"y\"\n                  }\n                }\n              }\n            ],\n            \"tooltop\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          }\n        },\n        \"pluginVersion\": {\n          \"default\": \"11.2.2\",\n          \"title\": \"Pluginversion\",\n          \"type\": \"string\"\n        },\n        \"targets\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/Target\"\n          },\n          \"title\": \"Targets\",\n          \"type\": \"array\"\n        },\n        \"title\": {\n          \"default\": \"Example XY Chart for Trace2D Data\",\n          \"title\": \"Title\",\n          \"type\": \"string\"\n        },\n        \"transformations\": {\n          \"default\": [],\n          \"items\": {\n            \"$ref\": \"#/$defs/Transformation\"\n          },\n          \"title\": \"Transformations\",\n          \"type\": \"array\"\n        },\n        \"type\": {\n          \"default\": \"xychart\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"targets\"\n      ],\n      \"title\": \"Panel\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"columns\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Columns\",\n          \"type\": \"array\"\n        },\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\"\n          }\n        },\n        \"filters\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Filters\",\n          \"type\": \"array\"\n        },\n        \"format\": {\n          \"default\": \"table\",\n          \"title\": \"Format\",\n          \"type\": \"string\"\n        },\n        \"global_query_id\": {\n          \"default\": \"\",\n          \"title\": \"Global Query Id\",\n          \"type\": \"string\"\n        },\n        \"hide\": {\n          \"default\": false,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"parser\": {\n          \"default\": \"uql\",\n          \"title\": \"Parser\",\n          \"type\": \"string\"\n        },\n        \"refId\": {\n          \"default\": \"A\",\n          \"title\": \"Refid\",\n          \"type\": \"string\"\n        },\n        \"root_selector\": {\n          \"default\": \"\",\n          \"title\": \"Root Selector\",\n          \"type\": \"string\"\n        },\n        \"source\": {\n          \"default\": \"url\",\n          \"title\": \"Source\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"json\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uql\": {\n          \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n          \"title\": \"Uql\",\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"url_options\": {\n          \"$ref\": \"#/$defs/URLOptions\",\n          \"default\": {\n            \"data\": \"\",\n            \"method\": \"GET\"\n          }\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    },\n    \"Transformation\": {\n      \"description\": \"    \\n    \",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Transformation\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"annotations\": {\n      \"$ref\": \"#/$defs/Annotations\",\n      \"default\": {\n        \"list\": [\n          {\n            \"builtIn\": 1,\n            \"datasource\": {\n              \"type\": \"grafana\",\n              \"uid\": \"-- Grafana --\"\n            },\n            \"enable\": true,\n            \"hide\": true,\n            \"iconColor\": \"rgba(0, 211, 255, 1)\",\n            \"name\": \"Annotation &amp; Alers\",\n            \"type\": \"dashboard\"\n          }\n        ]\n      }\n    },\n    \"description\": {\n      \"default\": \"Try Parsing JSON Data\",\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"editable\": {\n      \"default\": true,\n      \"title\": \"Editable\",\n      \"type\": \"boolean\"\n    },\n    \"fiscalYearStartMonth\": {\n      \"default\": 0,\n      \"title\": \"Fiscalyearstartmonth\",\n      \"type\": \"integer\"\n    },\n    \"graphTooltip\": {\n      \"default\": 0,\n      \"title\": \"Graphtooltip\",\n      \"type\": \"integer\"\n    },\n    \"id\": {\n      \"default\": 1,\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"links\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Links\",\n      \"type\": \"array\"\n    },\n    \"panels\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Panel\"\n      },\n      \"title\": \"Panels\",\n      \"type\": \"array\"\n    },\n    \"refresh\": {\n      \"default\": \"\",\n      \"title\": \"Refresh\",\n      \"type\": \"string\"\n    },\n    \"schemaVersion\": {\n      \"default\": 39,\n      \"title\": \"Schemaversion\",\n      \"type\": \"integer\"\n    },\n    \"tags\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"templating\": {\n      \"default\": {\n        \"list\": []\n      },\n      \"title\": \"Templating\",\n      \"type\": \"object\"\n    },\n    \"time\": {\n      \"default\": {\n        \"from\": \"now-6h\",\n        \"to\": \"now\"\n      },\n      \"title\": \"Time\",\n      \"type\": \"object\"\n    },\n    \"timepicker\": {\n      \"default\": {},\n      \"title\": \"Timepicker\",\n      \"type\": \"object\"\n    },\n    \"timezone\": {\n      \"default\": \"browser\",\n      \"title\": \"Timezone\",\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"default\": \"DemoDashboard\",\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"de1dapkdr47wgf\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"default\": 20,\n      \"title\": \"Version\",\n      \"type\": \"integer\"\n    },\n    \"weekStart\": {\n      \"default\": \"\",\n      \"title\": \"Weekstart\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"panels\"\n  ],\n  \"title\": \"Dashboard\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>annotations</code>                 (<code>Annotations</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>editable</code>                 (<code>bool</code>)             </li> <li> <code>fiscalYearStartMonth</code>                 (<code>int</code>)             </li> <li> <code>graphTooltip</code>                 (<code>int</code>)             </li> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>links</code>                 (<code>list</code>)             </li> <li> <code>panels</code>                 (<code>list[Panel]</code>)             </li> <li> <code>refresh</code>                 (<code>str</code>)             </li> <li> <code>schemaVersion</code>                 (<code>int</code>)             </li> <li> <code>tags</code>                 (<code>list</code>)             </li> <li> <code>templating</code>                 (<code>Dict</code>)             </li> <li> <code>time</code>                 (<code>Dict</code>)             </li> <li> <code>timepicker</code>                 (<code>Dict</code>)             </li> <li> <code>timezone</code>                 (<code>str</code>)             </li> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>uid</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>int</code>)             </li> <li> <code>weekStart</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/","title":"panels","text":""},{"location":"reference/grafana_api/panels/#grafana_api.panels","title":"panels","text":""},{"location":"reference/grafana_api/panels/#grafana_api.panels.DataSource","title":"DataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"DataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uid</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.DefaultDataSource","title":"DefaultDataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataSource</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    },\n    \"default\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"title\": \"Default\"\n    }\n  },\n  \"title\": \"DefaultDataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>default</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.FieldConfig","title":"FieldConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code> \"fieldConfig\": {\n    \"defaults\": {\n\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n\n    },\n    \"overrides\": []\n},\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n  \"properties\": {\n    \"defaults\": {\n      \"$ref\": \"#/$defs/Defaults\",\n      \"default\": {\n        \"color\": {\n          \"fixedColor\": \"semi-dark-blue\",\n          \"mote\": \"palette-classic\"\n        },\n        \"cusom\": {\n          \"axisBorderShow\": false,\n          \"axisCenteredZero\": false,\n          \"axisColorMode\": \"text\",\n          \"axisLabel\": \"\",\n          \"axisPlacement\": \"auto\",\n          \"fillOpacity\": 50,\n          \"hideFrom\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          },\n          \"lineStyle\": {\n            \"fill\": \"solid\"\n          },\n          \"lineWidth\": 2,\n          \"pointShape\": \"circle\",\n          \"pointSize\": {\n            \"fixed\": 3\n          },\n          \"pointStrokeWidth\": 1,\n          \"scaleDistribution\": {\n            \"type\": \"linear\"\n          },\n          \"show\": \"points\"\n        },\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n        \"thresholds\": {\n          \"mode\": \"absolute\",\n          \"steps\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ]\n        }\n      }\n    },\n    \"overrides\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Overrides\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"FieldConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>defaults</code>                 (<code>Defaults</code>)             </li> <li> <code>overrides</code>                 (<code>list</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.GridPosition","title":"GridPosition  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"gridPos\": {\n    \"h\": 8,\n    \"w\": 12,\n    \"x\": 12,\n    \"y\": 16\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n  \"properties\": {\n    \"h\": {\n      \"default\": 16,\n      \"title\": \"H\",\n      \"type\": \"integer\"\n    },\n    \"w\": {\n      \"default\": 24,\n      \"title\": \"W\",\n      \"type\": \"integer\"\n    },\n    \"x\": {\n      \"default\": 0,\n      \"title\": \"X\",\n      \"type\": \"integer\"\n    },\n    \"y\": {\n      \"default\": 0,\n      \"title\": \"Y\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"GridPosition\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>h</code>                 (<code>int</code>)             </li> <li> <code>w</code>                 (<code>int</code>)             </li> <li> <code>x</code>                 (<code>int</code>)             </li> <li> <code>y</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.HideFrom","title":"HideFrom  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>{     \"legend\": false,     \"tooltip\": false,     \"viz\": false }</p> Show JSON schema: <pre><code>{\n  \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n  \"properties\": {\n    \"legend\": {\n      \"default\": false,\n      \"title\": \"Legend\",\n      \"type\": \"boolean\"\n    },\n    \"tooltip\": {\n      \"default\": false,\n      \"title\": \"Tooltip\",\n      \"type\": \"boolean\"\n    },\n    \"viz\": {\n      \"default\": false,\n      \"title\": \"Viz\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"HideFrom\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>bool</code>)             </li> <li> <code>tooltip</code>                 (<code>bool</code>)             </li> <li> <code>viz</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Legend","title":"Legend  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"calcs\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Calcs\",\n      \"type\": \"array\"\n    },\n    \"displayMode\": {\n      \"default\": \"list\",\n      \"title\": \"Displaymode\",\n      \"type\": \"string\"\n    },\n    \"placement\": {\n      \"default\": \"bottom\",\n      \"title\": \"Placement\",\n      \"type\": \"string\"\n    },\n    \"showLegend\": {\n      \"default\": true,\n      \"title\": \"Showlegend\",\n      \"type\": \"boolean\"\n    },\n    \"sortBy\": {\n      \"default\": \"Name\",\n      \"title\": \"Sortby\",\n      \"type\": \"string\"\n    },\n    \"sortDesc\": {\n      \"default\": false,\n      \"title\": \"Sortdesc\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"Legend\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>calcs</code>                 (<code>list</code>)             </li> <li> <code>displayMode</code>                 (<code>str</code>)             </li> <li> <code>placement</code>                 (<code>str</code>)             </li> <li> <code>showLegend</code>                 (<code>bool</code>)             </li> <li> <code>sortBy</code>                 (<code>str</code>)             </li> <li> <code>sortDesc</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.LineStyle","title":"LineStyle  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fill\": \"solid\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n  \"properties\": {\n    \"fill\": {\n      \"default\": \"solid\",\n      \"title\": \"Fill\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"LineStyle\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fill</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Options","title":"Options  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"legend\": {\n      \"$ref\": \"#/$defs/Legend\",\n      \"default\": {\n        \"calcs\": [],\n        \"displayMode\": \"list\",\n        \"placement\": \"bottom\",\n        \"showLegend\": true,\n        \"sortBy\": \"Name\",\n        \"sortDesc\": false\n      }\n    },\n    \"mapping\": {\n      \"default\": \"auto\",\n      \"title\": \"Mapping\",\n      \"type\": \"string\"\n    },\n    \"series\": {\n      \"default\": [\n        {\n          \"x\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          },\n          \"y\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Series\"\n      },\n      \"title\": \"Series\",\n      \"type\": \"array\"\n    },\n    \"tooltop\": {\n      \"$ref\": \"#/$defs/ToolTip\",\n      \"default\": {\n        \"mode\": \"single\",\n        \"sort\": \"none\"\n      }\n    }\n  },\n  \"title\": \"Options\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>Legend</code>)             </li> <li> <code>mapping</code>                 (<code>str</code>)             </li> <li> <code>series</code>                 (<code>list[Series]</code>)             </li> <li> <code>tooltop</code>                 (<code>ToolTip</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Panel","title":"Panel  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"FieldConfig\": {\n      \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n      \"properties\": {\n        \"defaults\": {\n          \"$ref\": \"#/$defs/Defaults\",\n          \"default\": {\n            \"color\": {\n              \"fixedColor\": \"semi-dark-blue\",\n              \"mote\": \"palette-classic\"\n            },\n            \"cusom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 50,\n              \"hideFrom\": {\n                \"legend\": false,\n                \"tooltip\": false,\n                \"viz\": false\n              },\n              \"lineStyle\": {\n                \"fill\": \"solid\"\n              },\n              \"lineWidth\": 2,\n              \"pointShape\": \"circle\",\n              \"pointSize\": {\n                \"fixed\": 3\n              },\n              \"pointStrokeWidth\": 1,\n              \"scaleDistribution\": {\n                \"type\": \"linear\"\n              },\n              \"show\": \"points\"\n            },\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\n                  \"color\": \"green\",\n                  \"value\": null\n                }\n              ]\n            }\n          }\n        },\n        \"overrides\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Overrides\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"FieldConfig\",\n      \"type\": \"object\"\n    },\n    \"GridPosition\": {\n      \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n      \"properties\": {\n        \"h\": {\n          \"default\": 16,\n          \"title\": \"H\",\n          \"type\": \"integer\"\n        },\n        \"w\": {\n          \"default\": 24,\n          \"title\": \"W\",\n          \"type\": \"integer\"\n        },\n        \"x\": {\n          \"default\": 0,\n          \"title\": \"X\",\n          \"type\": \"integer\"\n        },\n        \"y\": {\n          \"default\": 0,\n          \"title\": \"Y\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"GridPosition\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Options\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"legend\": {\n          \"$ref\": \"#/$defs/Legend\",\n          \"default\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true,\n            \"sortBy\": \"Name\",\n            \"sortDesc\": false\n          }\n        },\n        \"mapping\": {\n          \"default\": \"auto\",\n          \"title\": \"Mapping\",\n          \"type\": \"string\"\n        },\n        \"series\": {\n          \"default\": [\n            {\n              \"x\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"x\"\n                }\n              },\n              \"y\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"y\"\n                }\n              }\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Series\"\n          },\n          \"title\": \"Series\",\n          \"type\": \"array\"\n        },\n        \"tooltop\": {\n          \"$ref\": \"#/$defs/ToolTip\",\n          \"default\": {\n            \"mode\": \"single\",\n            \"sort\": \"none\"\n          }\n        }\n      },\n      \"title\": \"Options\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"columns\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Columns\",\n          \"type\": \"array\"\n        },\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\"\n          }\n        },\n        \"filters\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Filters\",\n          \"type\": \"array\"\n        },\n        \"format\": {\n          \"default\": \"table\",\n          \"title\": \"Format\",\n          \"type\": \"string\"\n        },\n        \"global_query_id\": {\n          \"default\": \"\",\n          \"title\": \"Global Query Id\",\n          \"type\": \"string\"\n        },\n        \"hide\": {\n          \"default\": false,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"parser\": {\n          \"default\": \"uql\",\n          \"title\": \"Parser\",\n          \"type\": \"string\"\n        },\n        \"refId\": {\n          \"default\": \"A\",\n          \"title\": \"Refid\",\n          \"type\": \"string\"\n        },\n        \"root_selector\": {\n          \"default\": \"\",\n          \"title\": \"Root Selector\",\n          \"type\": \"string\"\n        },\n        \"source\": {\n          \"default\": \"url\",\n          \"title\": \"Source\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"json\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uql\": {\n          \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n          \"title\": \"Uql\",\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"url_options\": {\n          \"$ref\": \"#/$defs/URLOptions\",\n          \"default\": {\n            \"data\": \"\",\n            \"method\": \"GET\"\n          }\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    },\n    \"Transformation\": {\n      \"description\": \"    \\n    \",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Transformation\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\",\n        \"default\": true\n      }\n    },\n    \"fieldConfig\": {\n      \"$ref\": \"#/$defs/FieldConfig\",\n      \"default\": {\n        \"defaults\": {\n          \"color\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          },\n          \"cusom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          },\n          \"fieldMinMax\": false,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        },\n        \"overrides\": []\n      }\n    },\n    \"gridPos\": {\n      \"$ref\": \"#/$defs/GridPosition\",\n      \"default\": {\n        \"h\": 16,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      }\n    },\n    \"id\": {\n      \"default\": 1,\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"options\": {\n      \"$ref\": \"#/$defs/Options\",\n      \"default\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true,\n          \"sortBy\": \"Name\",\n          \"sortDesc\": false\n        },\n        \"mapping\": \"auto\",\n        \"series\": [\n          {\n            \"x\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"x\"\n              }\n            },\n            \"y\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"y\"\n              }\n            }\n          }\n        ],\n        \"tooltop\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      }\n    },\n    \"pluginVersion\": {\n      \"default\": \"11.2.2\",\n      \"title\": \"Pluginversion\",\n      \"type\": \"string\"\n    },\n    \"targets\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Target\"\n      },\n      \"title\": \"Targets\",\n      \"type\": \"array\"\n    },\n    \"title\": {\n      \"default\": \"Example XY Chart for Trace2D Data\",\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"transformations\": {\n      \"default\": [],\n      \"items\": {\n        \"$ref\": \"#/$defs/Transformation\"\n      },\n      \"title\": \"Transformations\",\n      \"type\": \"array\"\n    },\n    \"type\": {\n      \"default\": \"xychart\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"targets\"\n  ],\n  \"title\": \"Panel\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>fieldConfig</code>                 (<code>FieldConfig</code>)             </li> <li> <code>gridPos</code>                 (<code>GridPosition</code>)             </li> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>options</code>                 (<code>Options</code>)             </li> <li> <code>pluginVersion</code>                 (<code>str</code>)             </li> <li> <code>targets</code>                 (<code>list[Target]</code>)             </li> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>transformations</code>                 (<code>list[Transformation]</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.PointSize","title":"PointSize  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fixed\": 3\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n  \"properties\": {\n    \"fixed\": {\n      \"default\": 3,\n      \"title\": \"Fixed\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"PointSize\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fixed</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.ScaleDistribution","title":"ScaleDistribution  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"type\": \"linear\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"linear\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ScaleDistribution\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Series","title":"Series  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"x\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"x\"\n        }\n      }\n    },\n    \"y\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"y\"\n        }\n      }\n    }\n  },\n  \"title\": \"Series\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>x</code>                 (<code>Matcher</code>)             </li> <li> <code>y</code>                 (<code>Matcher</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Target","title":"Target  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"columns\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Columns\",\n      \"type\": \"array\"\n    },\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\"\n      }\n    },\n    \"filters\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Filters\",\n      \"type\": \"array\"\n    },\n    \"format\": {\n      \"default\": \"table\",\n      \"title\": \"Format\",\n      \"type\": \"string\"\n    },\n    \"global_query_id\": {\n      \"default\": \"\",\n      \"title\": \"Global Query Id\",\n      \"type\": \"string\"\n    },\n    \"hide\": {\n      \"default\": false,\n      \"title\": \"Hide\",\n      \"type\": \"boolean\"\n    },\n    \"parser\": {\n      \"default\": \"uql\",\n      \"title\": \"Parser\",\n      \"type\": \"string\"\n    },\n    \"refId\": {\n      \"default\": \"A\",\n      \"title\": \"Refid\",\n      \"type\": \"string\"\n    },\n    \"root_selector\": {\n      \"default\": \"\",\n      \"title\": \"Root Selector\",\n      \"type\": \"string\"\n    },\n    \"source\": {\n      \"default\": \"url\",\n      \"title\": \"Source\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"json\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uql\": {\n      \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n      \"title\": \"Uql\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"title\": \"Url\",\n      \"type\": \"string\"\n    },\n    \"url_options\": {\n      \"$ref\": \"#/$defs/URLOptions\",\n      \"default\": {\n        \"data\": \"\",\n        \"method\": \"GET\"\n      }\n    }\n  },\n  \"required\": [\n    \"url\"\n  ],\n  \"title\": \"Target\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>columns</code>                 (<code>list</code>)             </li> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>filters</code>                 (<code>list</code>)             </li> <li> <code>format</code>                 (<code>str</code>)             </li> <li> <code>global_query_id</code>                 (<code>str</code>)             </li> <li> <code>hide</code>                 (<code>bool</code>)             </li> <li> <code>parser</code>                 (<code>str</code>)             </li> <li> <code>refId</code>                 (<code>str</code>)             </li> <li> <code>root_selector</code>                 (<code>str</code>)             </li> <li> <code>source</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uql</code>                 (<code>str</code>)             </li> <li> <code>url</code>                 (<code>str</code>)             </li> <li> <code>url_options</code>                 (<code>URLOptions</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Threshold","title":"Threshold  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"color\": \"green\",\n    \"value\": null\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"green\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"Threshold\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.Thresholds","title":"Thresholds  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"thresholds\": {\n    \"mode\": \"absolute\",\n    \"steps\": [\n\n    ]\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"absolute\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"steps\": {\n      \"default\": [\n        {\n          \"color\": \"green\",\n          \"value\": null\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Threshold\"\n      },\n      \"title\": \"Steps\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"Thresholds\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>steps</code>                 (<code>list[Threshold]</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.ToolTip","title":"ToolTip  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"single\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"sort\": {\n      \"default\": \"none\",\n      \"title\": \"Sort\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ToolTip\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>sort</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/#grafana_api.panels.URLOptions","title":"URLOptions  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"data\": {\n      \"default\": \"\",\n      \"title\": \"Data\",\n      \"type\": \"string\"\n    },\n    \"method\": {\n      \"default\": \"GET\",\n      \"title\": \"Method\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"URLOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data</code>                 (<code>str</code>)             </li> <li> <code>method</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/","title":"xy_chart","text":""},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart","title":"xy_chart","text":"<p>Need to produce a Dashboard ```</p>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.DataSource","title":"DataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"DataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uid</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.DefaultDataSource","title":"DefaultDataSource  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataSource</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"yesoreyeram-infinity-datasource\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uid\": {\n      \"default\": \"be1d76jvnf668b\",\n      \"title\": \"Uid\",\n      \"type\": \"string\"\n    },\n    \"default\": {\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"title\": \"Default\"\n    }\n  },\n  \"title\": \"DefaultDataSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>default</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.FieldConfig","title":"FieldConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code> \"fieldConfig\": {\n    \"defaults\": {\n\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n\n    },\n    \"overrides\": []\n},\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n  \"properties\": {\n    \"defaults\": {\n      \"$ref\": \"#/$defs/Defaults\",\n      \"default\": {\n        \"color\": {\n          \"fixedColor\": \"semi-dark-blue\",\n          \"mote\": \"palette-classic\"\n        },\n        \"cusom\": {\n          \"axisBorderShow\": false,\n          \"axisCenteredZero\": false,\n          \"axisColorMode\": \"text\",\n          \"axisLabel\": \"\",\n          \"axisPlacement\": \"auto\",\n          \"fillOpacity\": 50,\n          \"hideFrom\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          },\n          \"lineStyle\": {\n            \"fill\": \"solid\"\n          },\n          \"lineWidth\": 2,\n          \"pointShape\": \"circle\",\n          \"pointSize\": {\n            \"fixed\": 3\n          },\n          \"pointStrokeWidth\": 1,\n          \"scaleDistribution\": {\n            \"type\": \"linear\"\n          },\n          \"show\": \"points\"\n        },\n        \"fieldMinMax\": false,\n        \"mappings\": [],\n        \"thresholds\": {\n          \"mode\": \"absolute\",\n          \"steps\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ]\n        }\n      }\n    },\n    \"overrides\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Overrides\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"FieldConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>defaults</code>                 (<code>Defaults</code>)             </li> <li> <code>overrides</code>                 (<code>list</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.GridPosition","title":"GridPosition  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"gridPos\": {\n    \"h\": 8,\n    \"w\": 12,\n    \"x\": 12,\n    \"y\": 16\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n  \"properties\": {\n    \"h\": {\n      \"default\": 16,\n      \"title\": \"H\",\n      \"type\": \"integer\"\n    },\n    \"w\": {\n      \"default\": 24,\n      \"title\": \"W\",\n      \"type\": \"integer\"\n    },\n    \"x\": {\n      \"default\": 0,\n      \"title\": \"X\",\n      \"type\": \"integer\"\n    },\n    \"y\": {\n      \"default\": 0,\n      \"title\": \"Y\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"GridPosition\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>h</code>                 (<code>int</code>)             </li> <li> <code>w</code>                 (<code>int</code>)             </li> <li> <code>x</code>                 (<code>int</code>)             </li> <li> <code>y</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.HideFrom","title":"HideFrom  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>{     \"legend\": false,     \"tooltip\": false,     \"viz\": false }</p> Show JSON schema: <pre><code>{\n  \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n  \"properties\": {\n    \"legend\": {\n      \"default\": false,\n      \"title\": \"Legend\",\n      \"type\": \"boolean\"\n    },\n    \"tooltip\": {\n      \"default\": false,\n      \"title\": \"Tooltip\",\n      \"type\": \"boolean\"\n    },\n    \"viz\": {\n      \"default\": false,\n      \"title\": \"Viz\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"HideFrom\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>bool</code>)             </li> <li> <code>tooltip</code>                 (<code>bool</code>)             </li> <li> <code>viz</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Legend","title":"Legend  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"calcs\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Calcs\",\n      \"type\": \"array\"\n    },\n    \"displayMode\": {\n      \"default\": \"list\",\n      \"title\": \"Displaymode\",\n      \"type\": \"string\"\n    },\n    \"placement\": {\n      \"default\": \"bottom\",\n      \"title\": \"Placement\",\n      \"type\": \"string\"\n    },\n    \"showLegend\": {\n      \"default\": true,\n      \"title\": \"Showlegend\",\n      \"type\": \"boolean\"\n    },\n    \"sortBy\": {\n      \"default\": \"Name\",\n      \"title\": \"Sortby\",\n      \"type\": \"string\"\n    },\n    \"sortDesc\": {\n      \"default\": false,\n      \"title\": \"Sortdesc\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"Legend\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>calcs</code>                 (<code>list</code>)             </li> <li> <code>displayMode</code>                 (<code>str</code>)             </li> <li> <code>placement</code>                 (<code>str</code>)             </li> <li> <code>showLegend</code>                 (<code>bool</code>)             </li> <li> <code>sortBy</code>                 (<code>str</code>)             </li> <li> <code>sortDesc</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.LineStyle","title":"LineStyle  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fill\": \"solid\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n  \"properties\": {\n    \"fill\": {\n      \"default\": \"solid\",\n      \"title\": \"Fill\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"LineStyle\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fill</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.MatcherOptions","title":"MatcherOptions  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"options\": {\n      \"title\": \"Options\",\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"default\": \"byName\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"options\"\n  ],\n  \"title\": \"MatcherOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>options</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Options","title":"Options  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"legend\": {\n      \"$ref\": \"#/$defs/Legend\",\n      \"default\": {\n        \"calcs\": [],\n        \"displayMode\": \"list\",\n        \"placement\": \"bottom\",\n        \"showLegend\": true,\n        \"sortBy\": \"Name\",\n        \"sortDesc\": false\n      }\n    },\n    \"mapping\": {\n      \"default\": \"auto\",\n      \"title\": \"Mapping\",\n      \"type\": \"string\"\n    },\n    \"series\": {\n      \"default\": [\n        {\n          \"x\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          },\n          \"y\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Series\"\n      },\n      \"title\": \"Series\",\n      \"type\": \"array\"\n    },\n    \"tooltop\": {\n      \"$ref\": \"#/$defs/ToolTip\",\n      \"default\": {\n        \"mode\": \"single\",\n        \"sort\": \"none\"\n      }\n    }\n  },\n  \"title\": \"Options\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>legend</code>                 (<code>Legend</code>)             </li> <li> <code>mapping</code>                 (<code>str</code>)             </li> <li> <code>series</code>                 (<code>list[Series]</code>)             </li> <li> <code>tooltop</code>                 (<code>ToolTip</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Panel","title":"Panel  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Color\": {\n      \"properties\": {\n        \"fixedColor\": {\n          \"default\": \"semi-dark-blue\",\n          \"title\": \"Fixedcolor\",\n          \"type\": \"string\"\n        },\n        \"mote\": {\n          \"default\": \"palette-classic\",\n          \"title\": \"Mote\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Color\",\n      \"type\": \"object\"\n    },\n    \"Custom\": {\n      \"properties\": {\n        \"axisBorderShow\": {\n          \"default\": false,\n          \"title\": \"Axisbordershow\",\n          \"type\": \"boolean\"\n        },\n        \"axisCenteredZero\": {\n          \"default\": false,\n          \"title\": \"Axiscenteredzero\",\n          \"type\": \"boolean\"\n        },\n        \"axisColorMode\": {\n          \"default\": \"text\",\n          \"title\": \"Axiscolormode\",\n          \"type\": \"string\"\n        },\n        \"axisLabel\": {\n          \"default\": \"\",\n          \"title\": \"Axislabel\",\n          \"type\": \"string\"\n        },\n        \"axisPlacement\": {\n          \"default\": \"auto\",\n          \"title\": \"Axisplacement\",\n          \"type\": \"string\"\n        },\n        \"fillOpacity\": {\n          \"default\": 50,\n          \"title\": \"Fillopacity\",\n          \"type\": \"integer\"\n        },\n        \"hideFrom\": {\n          \"$ref\": \"#/$defs/HideFrom\",\n          \"default\": {\n            \"legend\": false,\n            \"tooltip\": false,\n            \"viz\": false\n          }\n        },\n        \"lineStyle\": {\n          \"$ref\": \"#/$defs/LineStyle\",\n          \"default\": {\n            \"fill\": \"solid\"\n          }\n        },\n        \"lineWidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"integer\"\n        },\n        \"pointShape\": {\n          \"default\": \"circle\",\n          \"title\": \"Pointshape\",\n          \"type\": \"string\"\n        },\n        \"pointSize\": {\n          \"$ref\": \"#/$defs/PointSize\",\n          \"default\": {\n            \"fixed\": 3\n          }\n        },\n        \"pointStrokeWidth\": {\n          \"default\": 1,\n          \"title\": \"Pointstrokewidth\",\n          \"type\": \"integer\"\n        },\n        \"scaleDistribution\": {\n          \"$ref\": \"#/$defs/ScaleDistribution\",\n          \"default\": {\n            \"type\": \"linear\"\n          }\n        },\n        \"show\": {\n          \"default\": \"points\",\n          \"title\": \"Show\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Custom\",\n      \"type\": \"object\"\n    },\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"Defaults\": {\n      \"properties\": {\n        \"color\": {\n          \"$ref\": \"#/$defs/Color\",\n          \"default\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          }\n        },\n        \"cusom\": {\n          \"$ref\": \"#/$defs/Custom\",\n          \"default\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          }\n        },\n        \"fieldMinMax\": {\n          \"default\": false,\n          \"title\": \"Fieldminmax\",\n          \"type\": \"boolean\"\n        },\n        \"mappings\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Mappings\",\n          \"type\": \"array\"\n        },\n        \"thresholds\": {\n          \"$ref\": \"#/$defs/Thresholds\",\n          \"default\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        }\n      },\n      \"title\": \"Defaults\",\n      \"type\": \"object\"\n    },\n    \"FieldConfig\": {\n      \"description\": \"```json\\n \\\"fieldConfig\\\": {\\n    \\\"defaults\\\": {\\n        \\n        \\\"fieldMinMax\\\": false,\\n        \\\"mappings\\\": [],\\n        \\n    },\\n    \\\"overrides\\\": []\\n},\\n```\",\n      \"properties\": {\n        \"defaults\": {\n          \"$ref\": \"#/$defs/Defaults\",\n          \"default\": {\n            \"color\": {\n              \"fixedColor\": \"semi-dark-blue\",\n              \"mote\": \"palette-classic\"\n            },\n            \"cusom\": {\n              \"axisBorderShow\": false,\n              \"axisCenteredZero\": false,\n              \"axisColorMode\": \"text\",\n              \"axisLabel\": \"\",\n              \"axisPlacement\": \"auto\",\n              \"fillOpacity\": 50,\n              \"hideFrom\": {\n                \"legend\": false,\n                \"tooltip\": false,\n                \"viz\": false\n              },\n              \"lineStyle\": {\n                \"fill\": \"solid\"\n              },\n              \"lineWidth\": 2,\n              \"pointShape\": \"circle\",\n              \"pointSize\": {\n                \"fixed\": 3\n              },\n              \"pointStrokeWidth\": 1,\n              \"scaleDistribution\": {\n                \"type\": \"linear\"\n              },\n              \"show\": \"points\"\n            },\n            \"fieldMinMax\": false,\n            \"mappings\": [],\n            \"thresholds\": {\n              \"mode\": \"absolute\",\n              \"steps\": [\n                {\n                  \"color\": \"green\",\n                  \"value\": null\n                }\n              ]\n            }\n          }\n        },\n        \"overrides\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Overrides\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"FieldConfig\",\n      \"type\": \"object\"\n    },\n    \"GridPosition\": {\n      \"description\": \"```json\\n\\\"gridPos\\\": {\\n    \\\"h\\\": 8,\\n    \\\"w\\\": 12,\\n    \\\"x\\\": 12,\\n    \\\"y\\\": 16\\n}\\n```\",\n      \"properties\": {\n        \"h\": {\n          \"default\": 16,\n          \"title\": \"H\",\n          \"type\": \"integer\"\n        },\n        \"w\": {\n          \"default\": 24,\n          \"title\": \"W\",\n          \"type\": \"integer\"\n        },\n        \"x\": {\n          \"default\": 0,\n          \"title\": \"X\",\n          \"type\": \"integer\"\n        },\n        \"y\": {\n          \"default\": 0,\n          \"title\": \"Y\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"GridPosition\",\n      \"type\": \"object\"\n    },\n    \"HideFrom\": {\n      \"description\": \"{\\n    \\\"legend\\\": false,\\n    \\\"tooltip\\\": false,\\n    \\\"viz\\\": false\\n}\",\n      \"properties\": {\n        \"legend\": {\n          \"default\": false,\n          \"title\": \"Legend\",\n          \"type\": \"boolean\"\n        },\n        \"tooltip\": {\n          \"default\": false,\n          \"title\": \"Tooltip\",\n          \"type\": \"boolean\"\n        },\n        \"viz\": {\n          \"default\": false,\n          \"title\": \"Viz\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"HideFrom\",\n      \"type\": \"object\"\n    },\n    \"Legend\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"calcs\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Calcs\",\n          \"type\": \"array\"\n        },\n        \"displayMode\": {\n          \"default\": \"list\",\n          \"title\": \"Displaymode\",\n          \"type\": \"string\"\n        },\n        \"placement\": {\n          \"default\": \"bottom\",\n          \"title\": \"Placement\",\n          \"type\": \"string\"\n        },\n        \"showLegend\": {\n          \"default\": true,\n          \"title\": \"Showlegend\",\n          \"type\": \"boolean\"\n        },\n        \"sortBy\": {\n          \"default\": \"Name\",\n          \"title\": \"Sortby\",\n          \"type\": \"string\"\n        },\n        \"sortDesc\": {\n          \"default\": false,\n          \"title\": \"Sortdesc\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"title\": \"Legend\",\n      \"type\": \"object\"\n    },\n    \"LineStyle\": {\n      \"description\": \"```json\\n{\\n    \\\"fill\\\": \\\"solid\\\"\\n}\\n```\",\n      \"properties\": {\n        \"fill\": {\n          \"default\": \"solid\",\n          \"title\": \"Fill\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"LineStyle\",\n      \"type\": \"object\"\n    },\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    },\n    \"Options\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"legend\": {\n          \"$ref\": \"#/$defs/Legend\",\n          \"default\": {\n            \"calcs\": [],\n            \"displayMode\": \"list\",\n            \"placement\": \"bottom\",\n            \"showLegend\": true,\n            \"sortBy\": \"Name\",\n            \"sortDesc\": false\n          }\n        },\n        \"mapping\": {\n          \"default\": \"auto\",\n          \"title\": \"Mapping\",\n          \"type\": \"string\"\n        },\n        \"series\": {\n          \"default\": [\n            {\n              \"x\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"x\"\n                }\n              },\n              \"y\": {\n                \"matcher\": {\n                  \"id\": \"byName\",\n                  \"options\": \"y\"\n                }\n              }\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Series\"\n          },\n          \"title\": \"Series\",\n          \"type\": \"array\"\n        },\n        \"tooltop\": {\n          \"$ref\": \"#/$defs/ToolTip\",\n          \"default\": {\n            \"mode\": \"single\",\n            \"sort\": \"none\"\n          }\n        }\n      },\n      \"title\": \"Options\",\n      \"type\": \"object\"\n    },\n    \"PointSize\": {\n      \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n      \"properties\": {\n        \"fixed\": {\n          \"default\": 3,\n          \"title\": \"Fixed\",\n          \"type\": \"integer\"\n        }\n      },\n      \"title\": \"PointSize\",\n      \"type\": \"object\"\n    },\n    \"ScaleDistribution\": {\n      \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"linear\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ScaleDistribution\",\n      \"type\": \"object\"\n    },\n    \"Series\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"x\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"x\"\n            }\n          }\n        },\n        \"y\": {\n          \"$ref\": \"#/$defs/Matcher\",\n          \"default\": {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"y\"\n            }\n          }\n        }\n      },\n      \"title\": \"Series\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"columns\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Columns\",\n          \"type\": \"array\"\n        },\n        \"datasource\": {\n          \"$ref\": \"#/$defs/DataSource\",\n          \"default\": {\n            \"type\": \"yesoreyeram-infinity-datasource\",\n            \"uid\": \"be1d76jvnf668b\"\n          }\n        },\n        \"filters\": {\n          \"default\": [],\n          \"items\": {},\n          \"title\": \"Filters\",\n          \"type\": \"array\"\n        },\n        \"format\": {\n          \"default\": \"table\",\n          \"title\": \"Format\",\n          \"type\": \"string\"\n        },\n        \"global_query_id\": {\n          \"default\": \"\",\n          \"title\": \"Global Query Id\",\n          \"type\": \"string\"\n        },\n        \"hide\": {\n          \"default\": false,\n          \"title\": \"Hide\",\n          \"type\": \"boolean\"\n        },\n        \"parser\": {\n          \"default\": \"uql\",\n          \"title\": \"Parser\",\n          \"type\": \"string\"\n        },\n        \"refId\": {\n          \"default\": \"A\",\n          \"title\": \"Refid\",\n          \"type\": \"string\"\n        },\n        \"root_selector\": {\n          \"default\": \"\",\n          \"title\": \"Root Selector\",\n          \"type\": \"string\"\n        },\n        \"source\": {\n          \"default\": \"url\",\n          \"title\": \"Source\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"default\": \"json\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uql\": {\n          \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n          \"title\": \"Uql\",\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"url_options\": {\n          \"$ref\": \"#/$defs/URLOptions\",\n          \"default\": {\n            \"data\": \"\",\n            \"method\": \"GET\"\n          }\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    },\n    \"Thresholds\": {\n      \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"absolute\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"default\": [\n            {\n              \"color\": \"green\",\n              \"value\": null\n            }\n          ],\n          \"items\": {\n            \"$ref\": \"#/$defs/Threshold\"\n          },\n          \"title\": \"Steps\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"Thresholds\",\n      \"type\": \"object\"\n    },\n    \"ToolTip\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"mode\": {\n          \"default\": \"single\",\n          \"title\": \"Mode\",\n          \"type\": \"string\"\n        },\n        \"sort\": {\n          \"default\": \"none\",\n          \"title\": \"Sort\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"ToolTip\",\n      \"type\": \"object\"\n    },\n    \"Transformation\": {\n      \"description\": \"    \\n    \",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Transformation\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\",\n        \"default\": true\n      }\n    },\n    \"fieldConfig\": {\n      \"$ref\": \"#/$defs/FieldConfig\",\n      \"default\": {\n        \"defaults\": {\n          \"color\": {\n            \"fixedColor\": \"semi-dark-blue\",\n            \"mote\": \"palette-classic\"\n          },\n          \"cusom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 50,\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineStyle\": {\n              \"fill\": \"solid\"\n            },\n            \"lineWidth\": 2,\n            \"pointShape\": \"circle\",\n            \"pointSize\": {\n              \"fixed\": 3\n            },\n            \"pointStrokeWidth\": 1,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"show\": \"points\"\n          },\n          \"fieldMinMax\": false,\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          }\n        },\n        \"overrides\": []\n      }\n    },\n    \"gridPos\": {\n      \"$ref\": \"#/$defs/GridPosition\",\n      \"default\": {\n        \"h\": 16,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      }\n    },\n    \"id\": {\n      \"default\": 1,\n      \"title\": \"Id\",\n      \"type\": \"integer\"\n    },\n    \"options\": {\n      \"$ref\": \"#/$defs/Options\",\n      \"default\": {\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": true,\n          \"sortBy\": \"Name\",\n          \"sortDesc\": false\n        },\n        \"mapping\": \"auto\",\n        \"series\": [\n          {\n            \"x\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"x\"\n              }\n            },\n            \"y\": {\n              \"matcher\": {\n                \"id\": \"byName\",\n                \"options\": \"y\"\n              }\n            }\n          }\n        ],\n        \"tooltop\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        }\n      }\n    },\n    \"pluginVersion\": {\n      \"default\": \"11.2.2\",\n      \"title\": \"Pluginversion\",\n      \"type\": \"string\"\n    },\n    \"targets\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Target\"\n      },\n      \"title\": \"Targets\",\n      \"type\": \"array\"\n    },\n    \"title\": {\n      \"default\": \"Example XY Chart for Trace2D Data\",\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"transformations\": {\n      \"default\": [],\n      \"items\": {\n        \"$ref\": \"#/$defs/Transformation\"\n      },\n      \"title\": \"Transformations\",\n      \"type\": \"array\"\n    },\n    \"type\": {\n      \"default\": \"xychart\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"targets\"\n  ],\n  \"title\": \"Panel\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>fieldConfig</code>                 (<code>FieldConfig</code>)             </li> <li> <code>gridPos</code>                 (<code>GridPosition</code>)             </li> <li> <code>id</code>                 (<code>int</code>)             </li> <li> <code>options</code>                 (<code>Options</code>)             </li> <li> <code>pluginVersion</code>                 (<code>str</code>)             </li> <li> <code>targets</code>                 (<code>list[Target]</code>)             </li> <li> <code>title</code>                 (<code>str</code>)             </li> <li> <code>transformations</code>                 (<code>list[Transformation]</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.PointSize","title":"PointSize  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"fixed\": 3\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"fixed\\\": 3\\n}\\n```\",\n  \"properties\": {\n    \"fixed\": {\n      \"default\": 3,\n      \"title\": \"Fixed\",\n      \"type\": \"integer\"\n    }\n  },\n  \"title\": \"PointSize\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>fixed</code>                 (<code>int</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.ScaleDistribution","title":"ScaleDistribution  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"type\": \"linear\"\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"type\\\": \\\"linear\\\"\\n}\\n```\",\n  \"properties\": {\n    \"type\": {\n      \"default\": \"linear\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ScaleDistribution\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Series","title":"Series  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Matcher\": {\n      \"properties\": {\n        \"matcher\": {\n          \"$ref\": \"#/$defs/MatcherOptions\"\n        }\n      },\n      \"required\": [\n        \"matcher\"\n      ],\n      \"title\": \"Matcher\",\n      \"type\": \"object\"\n    },\n    \"MatcherOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"options\": {\n          \"title\": \"Options\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"default\": \"byName\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"options\"\n      ],\n      \"title\": \"MatcherOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"x\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"x\"\n        }\n      }\n    },\n    \"y\": {\n      \"$ref\": \"#/$defs/Matcher\",\n      \"default\": {\n        \"matcher\": {\n          \"id\": \"byName\",\n          \"options\": \"y\"\n        }\n      }\n    }\n  },\n  \"title\": \"Series\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>x</code>                 (<code>Matcher</code>)             </li> <li> <code>y</code>                 (<code>Matcher</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Target","title":"Target  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataSource\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"type\": {\n          \"default\": \"yesoreyeram-infinity-datasource\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"uid\": {\n          \"default\": \"be1d76jvnf668b\",\n          \"title\": \"Uid\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"DataSource\",\n      \"type\": \"object\"\n    },\n    \"URLOptions\": {\n      \"description\": \"    \",\n      \"properties\": {\n        \"data\": {\n          \"default\": \"\",\n          \"title\": \"Data\",\n          \"type\": \"string\"\n        },\n        \"method\": {\n          \"default\": \"GET\",\n          \"title\": \"Method\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"URLOptions\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"    \",\n  \"properties\": {\n    \"columns\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Columns\",\n      \"type\": \"array\"\n    },\n    \"datasource\": {\n      \"$ref\": \"#/$defs/DataSource\",\n      \"default\": {\n        \"type\": \"yesoreyeram-infinity-datasource\",\n        \"uid\": \"be1d76jvnf668b\"\n      }\n    },\n    \"filters\": {\n      \"default\": [],\n      \"items\": {},\n      \"title\": \"Filters\",\n      \"type\": \"array\"\n    },\n    \"format\": {\n      \"default\": \"table\",\n      \"title\": \"Format\",\n      \"type\": \"string\"\n    },\n    \"global_query_id\": {\n      \"default\": \"\",\n      \"title\": \"Global Query Id\",\n      \"type\": \"string\"\n    },\n    \"hide\": {\n      \"default\": false,\n      \"title\": \"Hide\",\n      \"type\": \"boolean\"\n    },\n    \"parser\": {\n      \"default\": \"uql\",\n      \"title\": \"Parser\",\n      \"type\": \"string\"\n    },\n    \"refId\": {\n      \"default\": \"A\",\n      \"title\": \"Refid\",\n      \"type\": \"string\"\n    },\n    \"root_selector\": {\n      \"default\": \"\",\n      \"title\": \"Root Selector\",\n      \"type\": \"string\"\n    },\n    \"source\": {\n      \"default\": \"url\",\n      \"title\": \"Source\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"default\": \"json\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"uql\": {\n      \"default\": \"parse-json\\n| project \\\"elements\\\"\\n| extend \\\"label\\\"=\\\"pen.label\\\"\\n| extend \\\"label1\\\"=substring(\\\"label\\\",0,2)\\n| extend \\\"label2\\\"=substring(\\\"label\\\",3)\\n| mv-expand \\\"points\\\"\\n| extend \\\"x\\\"=\\\"points.x\\\", \\\"y\\\"=\\\"points.y\\\"\\n#| project \\\"label1\\\", \\\"label2\\\", \\\"x\\\", \\\"y\\\", \\\"color\\\"=mul(\\\"label2\\\", 0.1)\\n#| project \\\"label1\\\", \\\"x\\\", \\\"y\\\"\\n| project \\\"label\\\", \\\"x\\\", \\\"y\\\", \\\"metadata\\\"\\n\\n\\n\",\n      \"title\": \"Uql\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"title\": \"Url\",\n      \"type\": \"string\"\n    },\n    \"url_options\": {\n      \"$ref\": \"#/$defs/URLOptions\",\n      \"default\": {\n        \"data\": \"\",\n        \"method\": \"GET\"\n      }\n    }\n  },\n  \"required\": [\n    \"url\"\n  ],\n  \"title\": \"Target\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>columns</code>                 (<code>list</code>)             </li> <li> <code>datasource</code>                 (<code>DataSource</code>)             </li> <li> <code>filters</code>                 (<code>list</code>)             </li> <li> <code>format</code>                 (<code>str</code>)             </li> <li> <code>global_query_id</code>                 (<code>str</code>)             </li> <li> <code>hide</code>                 (<code>bool</code>)             </li> <li> <code>parser</code>                 (<code>str</code>)             </li> <li> <code>refId</code>                 (<code>str</code>)             </li> <li> <code>root_selector</code>                 (<code>str</code>)             </li> <li> <code>source</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>str</code>)             </li> <li> <code>uql</code>                 (<code>str</code>)             </li> <li> <code>url</code>                 (<code>str</code>)             </li> <li> <code>url_options</code>                 (<code>URLOptions</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Threshold","title":"Threshold  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>{\n    \"color\": \"green\",\n    \"value\": null\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"green\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"Threshold\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.Thresholds","title":"Thresholds  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <pre><code>\"thresholds\": {\n    \"mode\": \"absolute\",\n    \"steps\": [\n\n    ]\n}\n</code></pre> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Threshold\": {\n      \"description\": \"```json\\n{\\n    \\\"color\\\": \\\"green\\\",\\n    \\\"value\\\": null\\n}\\n```\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"green\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Threshold\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"```json\\n\\\"thresholds\\\": {\\n    \\\"mode\\\": \\\"absolute\\\",\\n    \\\"steps\\\": [\\n        \\n    ]\\n}\\n```\",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"absolute\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"steps\": {\n      \"default\": [\n        {\n          \"color\": \"green\",\n          \"value\": null\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/Threshold\"\n      },\n      \"title\": \"Steps\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"Thresholds\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>steps</code>                 (<code>list[Threshold]</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.ToolTip","title":"ToolTip  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"mode\": {\n      \"default\": \"single\",\n      \"title\": \"Mode\",\n      \"type\": \"string\"\n    },\n    \"sort\": {\n      \"default\": \"none\",\n      \"title\": \"Sort\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"ToolTip\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>mode</code>                 (<code>str</code>)             </li> <li> <code>sort</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/panels/xy_chart/#grafana_api.panels.xy_chart.URLOptions","title":"URLOptions  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \",\n  \"properties\": {\n    \"data\": {\n      \"default\": \"\",\n      \"title\": \"Data\",\n      \"type\": \"string\"\n    },\n    \"method\": {\n      \"default\": \"GET\",\n      \"title\": \"Method\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"URLOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data</code>                 (<code>str</code>)             </li> <li> <code>method</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/transformations/","title":"transformations","text":""},{"location":"reference/grafana_api/transformations/#grafana_api.transformations","title":"transformations","text":""},{"location":"reference/grafana_api/transformations/#grafana_api.transformations.Transformation","title":"Transformation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \\n    \",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"Transformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/grafana_api/transformations/transformations/","title":"transformations","text":""},{"location":"reference/grafana_api/transformations/transformations/#grafana_api.transformations.transformations","title":"transformations","text":"<pre><code>{\n    \"id\": \"merge\",\n    \"options\": {}\n},\n{\n    \"id\": \"partitionByValues\",\n    \"options\": {\n        \"fields\": [\n            \"label\"\n        ],\n        \"keepFields\": false,\n        \"naming\": {\n            \"asLabels\": false\n        }\n    }\n}\n</code></pre>"},{"location":"reference/grafana_api/transformations/transformations/#grafana_api.transformations.transformations.Transformation","title":"Transformation  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> Show JSON schema: <pre><code>{\n  \"description\": \"    \\n    \",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"Transformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/trendify/","title":"trendify","text":""},{"location":"reference/trendify/#trendify","title":"trendify","text":"<p>Provides top-level imports</p>"},{"location":"reference/trendify/#trendify.ProductGenerator","title":"ProductGenerator  <code>module-attribute</code>","text":"<pre><code>ProductGenerator = Callable[[Path], ProductList]\n</code></pre> <p>Callable method type.  Users must provide a <code>ProductGenerator</code> to map over raw data.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Workdir holding raw data (Should be one per run from a batch)</p> required <p>Returns:</p> Type Description <code>ProductList</code> <p>List of data products to be sorted and used to produce assets</p>"},{"location":"reference/trendify/#trendify.ProductList","title":"ProductList  <code>module-attribute</code>","text":"<pre><code>ProductList = List[SerializeAsAny[InstanceOf[DataProduct]]]\n</code></pre> <p>List of serializable DataProduct or child classes thereof</p>"},{"location":"reference/trendify/#trendify.DataProduct","title":"DataProduct  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for data products to be generated and handled.</p> <p>Attributes:</p> Name Type Description <code>product_type</code> <code>str</code> <p>Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection.</p> <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": true,\n  \"description\": \"Base class for data products to be generated and handled.\\n\\nAttributes:\\n    product_type (str): Product type should be the same as the class name.\\n        The product type is used to search for products from a [DataProductCollection][trendify.API.DataProductCollection].\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"tags\"\n  ],\n  \"title\": \"DataProduct\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'allow'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>tags</code>                 (<code>Tags</code>)             </li> <li> <code>metadata</code>                 (<code>dict[str, str]</code>)             </li> <li> <code>product_type</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>_remove_computed_fields</code> </li> </ul>"},{"location":"reference/trendify/#trendify.DataProduct.product_type","title":"product_type  <code>pydantic-field</code>","text":"<pre><code>product_type: str\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>Product type should be the same as the class name. The product type is used to search for products from a  DataProductCollection.</p>"},{"location":"reference/trendify/#trendify.DataProduct.__init_subclass__","title":"__init_subclass__","text":"<pre><code>__init_subclass__(**kwargs: Any) -&gt; None\n</code></pre> <p>Registers child subclasses to be able to parse them from JSON file using the  deserialize_child_classes method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def __init_subclass__(cls, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Registers child subclasses to be able to parse them from JSON file using the \n    [deserialize_child_classes][trendify.API.DataProduct.deserialize_child_classes] method\n    \"\"\"\n    super().__init_subclass__(**kwargs)\n    _data_product_subclass_registry[cls.__name__] = cls    \n</code></pre>"},{"location":"reference/trendify/#trendify.DataProduct.append_to_list","title":"append_to_list","text":"<pre><code>append_to_list(l: List)\n</code></pre> <p>Appends self to list.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>list to which <code>self</code> will be appended</p> required <p>Returns:</p> Type Description <code>Self</code> <p>returns instance of <code>self</code></p> Source code in <code>src/trendify/API.py</code> <pre><code>def append_to_list(self, l: List):\n    \"\"\"\n    Appends self to list.\n\n    Args:\n        l (List): list to which `self` will be appended\n\n    Returns:\n        (Self): returns instance of `self`\n    \"\"\"\n    l.append(self)\n    return self\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProduct.deserialize_child_classes","title":"deserialize_child_classes  <code>classmethod</code>","text":"<pre><code>deserialize_child_classes(key: str, **kwargs)\n</code></pre> <p>Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>json key</p> required <code>kwargs</code> <code>dict</code> <p>json entries stored under given key</p> <code>{}</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef deserialize_child_classes(cls, key: str, **kwargs):\n    \"\"\"\n    Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate\n\n    Args:\n        key (str): json key\n        kwargs (dict): json entries stored under given key\n    \"\"\"\n    type_key = 'product_type'\n    elements = kwargs.get(key, None)\n    if elements:\n        for index in range(len(kwargs[key])):\n            duck_info = kwargs[key][index]\n            if isinstance(duck_info, dict):\n                product_type = duck_info.pop(type_key)\n                duck_type = _data_product_subclass_registry[product_type]\n                kwargs[key][index] = duck_type(**duck_info)\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection","title":"DataProductCollection  <code>pydantic-model</code>","text":"<pre><code>DataProductCollection(**kwargs: Any)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>A collection of data products.</p> <p>Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc.</p> <p>Attributes:</p> Name Type Description <code>elements</code> <code>ProductList</code> <p>A list of data products.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataProduct\": {\n      \"additionalProperties\": true,\n      \"description\": \"Base class for data products to be generated and handled.\\n\\nAttributes:\\n    product_type (str): Product type should be the same as the class name.\\n        The product type is used to search for products from a [DataProductCollection][trendify.API.DataProductCollection].\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n      \"properties\": {\n        \"tags\": {\n          \"items\": {\n            \"anyOf\": []\n          },\n          \"title\": \"Tags\",\n          \"type\": \"array\"\n        },\n        \"metadata\": {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"default\": {},\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"tags\"\n      ],\n      \"title\": \"DataProduct\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"A collection of data products.\\n\\nUse this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc.\\n\\nAttributes:\\n    elements (ProductList): A list of data products.\",\n  \"properties\": {\n    \"derived_from\": {\n      \"anyOf\": [\n        {\n          \"format\": \"path\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Derived From\"\n    },\n    \"elements\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/DataProduct\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Elements\"\n    }\n  },\n  \"title\": \"DataProductCollection\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>derived_from</code>                 (<code>Path | None</code>)             </li> <li> <code>elements</code>                 (<code>ProductList | None</code>)             </li> </ul> Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(self, **kwargs: Any):\n    DataProduct.deserialize_child_classes(key='elements', **kwargs)                \n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.add_products","title":"add_products","text":"<pre><code>add_products(*products: DataProduct)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>products</code> <code>Tuple[DataProduct | ProductList, ...]</code> <p>Products or lists of products to be appended to collection elements.</p> <code>()</code> Source code in <code>src/trendify/API.py</code> <pre><code>def add_products(self, *products: DataProduct):\n    \"\"\"\n    Args:\n        products (Tuple[DataProduct|ProductList, ...]): Products or lists of products to be\n            appended to collection elements.  \n    \"\"\"\n    self.elements.extend(flatten(products))\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.collect_from_all_jsons","title":"collect_from_all_jsons  <code>classmethod</code>","text":"<pre><code>collect_from_all_jsons(*dirs: Path, recursive: bool = False)\n</code></pre> <p>Loads all products from JSONs in the given list of directories. If recursive is set to <code>True</code>, the directories will be searched recursively  (this could lead to double counting if you pass in subdirectories of a parent).</p> <p>Parameters:</p> Name Type Description Default <code>dirs</code> <code>Tuple[Path, ...]</code> <p>Directories from which to load data product JSON files.</p> <code>()</code> <code>recursive</code> <code>bool</code> <p>whether or not to search each of the provided directories recursively for  data product json files.</p> <code>False</code> <p>Returns:</p> Type Description <code>Type[Self] | None</code> <p>Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef collect_from_all_jsons(cls, *dirs: Path, recursive: bool = False):\n    \"\"\"\n    Loads all products from JSONs in the given list of directories.  \n    If recursive is set to `True`, the directories will be searched recursively \n    (this could lead to double counting if you pass in subdirectories of a parent).\n\n    Args:\n        dirs (Tuple[Path, ...]): Directories from which to load data product JSON files.\n        recursive (bool): whether or not to search each of the provided directories recursively for \n            data product json files.\n\n    Returns:\n        (Type[Self] | None): Data product collection if JSON files are found.  \n            Otherwise, returns None if no product JSON files were found.\n    \"\"\"\n    if not recursive:\n        jsons: List[Path] = list(flatten(chain(list(d.glob('*.json')) for d in dirs)))\n    else:\n        jsons: List[Path] = list(flatten(chain(list(d.glob(f'**/*.json')) for d in dirs)))\n    if jsons:\n        return cls.union(\n            *tuple(\n                [\n                    cls.model_validate_json(p.read_text())\n                    for p in jsons\n                ]\n            )\n        )\n    else:\n        return None\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.drop_products","title":"drop_products","text":"<pre><code>drop_products(tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]\n</code></pre> <p>Removes products matching <code>tag</code> and/or <code>object_type</code> from collection elements.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag | None</code> <p>Tag for which data products should be dropped</p> <code>None</code> <code>object_type</code> <code>Type | None</code> <p>Type of data product to drop</p> <code>None</code> <p>Returns:</p> Type Description <code>DataProductCollection</code> <p>A new collection from which matching elements have been dropped.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def drop_products(self, tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]:\n    \"\"\"\n    Removes products matching `tag` and/or `object_type` from collection elements.\n\n    Args:\n        tag (Tag | None): Tag for which data products should be dropped\n        object_type (Type | None): Type of data product to drop\n\n    Returns:\n        (DataProductCollection): A new collection from which matching elements have been dropped.\n    \"\"\"\n    match_key = tag is None, object_type is None\n    match match_key:\n        case (True, True):\n            return type(self)(elements=self.elements)\n        case (True, False):\n            return type(self)(elements=[e for e in self.elements if not isinstance(e, object_type)])\n        case (False, True):\n            return type(self)(elements=[e for e in self.elements if not tag in e.tags])\n        case (False, False):\n            return type(self)(elements=[e for e in self.elements if not (tag in e.tags and isinstance(e, object_type))])\n        case _:\n            raise ValueError('Something is wrong with match statement')\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.from_iterable","title":"from_iterable  <code>classmethod</code>","text":"<pre><code>from_iterable(*products: Tuple[ProductList, ...])\n</code></pre> <p>Returns a new instance containing all of the products provided in the <code>*products</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>products</code> <code>Tuple[ProductList, ...]</code> <p>Lists of data products to combine into a collection</p> <code>()</code> <p>Returns:</p> Type Description <code>cls</code> <p>A data product collection containing all of the provided products in the <code>*products</code> argument.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_iterable(cls, *products: Tuple[ProductList, ...]):\n    \"\"\"\n    Returns a new instance containing all of the products provided in the `*products` argument.\n\n    Args:\n        products (Tuple[ProductList, ...]): Lists of data products to combine into a collection\n\n    Returns:\n        (cls): A data product collection containing all of the provided products in the `*products` argument.\n    \"\"\"\n    return cls(elements=list(flatten(products)))\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.get_products","title":"get_products","text":"<pre><code>get_products(tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]\n</code></pre> <p>Returns a new collection containing products matching <code>tag</code> and/or <code>object_type</code>. Both <code>tag</code> and <code>object_type</code> default to <code>None</code> which matches all products.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag | None</code> <p>Tag of data products to be kept.  <code>None</code> matches all products.</p> <code>None</code> <code>object_type</code> <code>Type | None</code> <p>Type of data product to keep.  <code>None</code> matches all products.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataProductCollection</code> <p>A new collection containing matching elements.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_products(self, tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]:\n    \"\"\"\n    Returns a new collection containing products matching `tag` and/or `object_type`.\n    Both `tag` and `object_type` default to `None` which matches all products.\n\n    Args:\n        tag (Tag | None): Tag of data products to be kept.  `None` matches all products.\n        object_type (Type | None): Type of data product to keep.  `None` matches all products.\n\n    Returns:\n        (DataProductCollection): A new collection containing matching elements.\n    \"\"\"\n    match_key = tag is None, object_type is None\n    match match_key:\n        case (True, True):\n            return type(self)(elements=self.elements)\n        case (True, False):\n            return type(self)(elements=[e for e in self.elements if isinstance(e, object_type)])\n        case (False, True):\n            return type(self)(elements=[e for e in self.elements if tag in e.tags])\n        case (False, False):\n            return type(self)(elements=[e for e in self.elements if tag in e.tags and isinstance(e, object_type)])\n        case _:\n            raise ValueError('Something is wrong with match statement')\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.get_tags","title":"get_tags","text":"<pre><code>get_tags(data_product_type: Type[DataProduct] | None = None) -&gt; set\n</code></pre> <p>Gets the tags related to a given type of <code>DataProduct</code>.  Parent classes will match all child class types.</p> <p>Parameters:</p> Name Type Description Default <code>data_product_type</code> <code>Type[DataProduct] | None</code> <p>type for which you want to get the list of tags</p> <code>None</code> <p>Returns:</p> Type Description <code>set</code> <p>set of tags applying to the given <code>data_product_type</code>.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_tags(self, data_product_type: Type[DataProduct] | None = None) -&gt; set:\n    \"\"\"\n    Gets the tags related to a given type of `DataProduct`.  Parent classes will match all child class types.\n\n    Args:\n        data_product_type (Type[DataProduct] | None): type for which you want to get the list of tags\n\n    Returns:\n        (set): set of tags applying to the given `data_product_type`.\n    \"\"\"\n    tags = []\n    for e in flatten(self.elements):\n        if data_product_type is None or isinstance(e, data_product_type):\n            for t in e.tags:\n                tags.append(t)\n    return set(tags)\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.make_grafana_panels","title":"make_grafana_panels  <code>classmethod</code>","text":"<pre><code>make_grafana_panels(dir_in: Path, panel_dir: Path, server_path: str)\n</code></pre> <p>Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted.</p> <p>Parameters:</p> Name Type Description Default <code>dir_in</code> <code>Path</code> <p>Directory from which to read data products (should be sorted first)</p> required <code>panel_dir</code> <code>Path</code> <p>Where to put the panel information</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef make_grafana_panels(\n        cls,\n        dir_in: Path,\n        panel_dir: Path,\n        server_path: str,\n    ):\n    \"\"\"\n    Processes collection of elements corresponding to a single tag.\n    This method should be called on a directory containing jsons for which the products have been\n    sorted.\n\n    Args:\n        dir_in (Path): Directory from which to read data products (should be sorted first)\n        panel_dir (Path): Where to put the panel information\n    \"\"\"\n\n    collection = cls.collect_from_all_jsons(dir_in)\n    panel_dir.mkdir(parents=True, exist_ok=True)\n\n    if collection is not None:\n        for tag in collection.get_tags():\n            dot_tag = '.'.join([str(t) for t in tag]) if should_be_flattened(tag) else tag\n            underscore_tag = '_'.join([str(t) for t in tag]) if should_be_flattened(tag) else tag\n\n            table_entries: List[TableEntry] = collection.get_products(tag=tag, object_type=TableEntry).elements\n\n            if table_entries:\n                print(f'\\n\\nMaking tables for {tag = }\\n')\n                panel = gapi.Panel(\n                    title=str(tag).capitalize() if isinstance(tag, str) else ' '.join([str(t).title() for t in tag]),\n                    targets=[\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'TableEntry']),\n                            uql=UQL_TableEntry,\n                        )\n                    ],\n                    type='table',\n                )\n                panel_dir.joinpath(underscore_tag + '_table_panel.json').write_text(panel.model_dump_json())\n                print(f'\\nFinished tables for {tag = }\\n')\n\n            traces: List[Trace2D] = collection.get_products(tag=tag, object_type=Trace2D).elements\n            points: List[Point2D] = collection.get_products(tag=tag, object_type=Point2D).elements\n\n            if points or traces:\n                print(f'\\n\\nMaking xy chart for {tag = }\\n')\n                panel = gapi.Panel(\n                    targets=[\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'Point2D']),\n                            uql=UQL_Point2D,\n                            refId='A',\n                        ),\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'Trace2D']),\n                            uql=UQL_Trace2D,\n                            refId='B',\n                        )\n                    ],\n                    transformations=[\n                        gapi.Merge(),\n                        gapi.PartitionByValues.from_fields(\n                            fields='label',\n                            keep_fields=False,\n                            fields_as_labels=False,\n                        )\n                    ],\n                    type='xychart',\n                )\n                panel_dir.joinpath(underscore_tag + '_xy_panel.json').write_text(panel.model_dump_json())\n                print(f'\\nFinished xy plot for {tag = }\\n')\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.process_single_tag_collection","title":"process_single_tag_collection  <code>classmethod</code>","text":"<pre><code>process_single_tag_collection(\n    dir_in: Path, dir_out: Path, no_tables: bool, no_xy_plots: bool, no_histograms: bool, dpi: int\n)\n</code></pre> <p>Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted.</p> <p>Parameters:</p> Name Type Description Default <code>dir_in</code> <code>Path</code> <p>Input directory for loading assets</p> required <code>dir_out</code> <code>Path</code> <p>Output directory for assets</p> required <code>no_tables</code> <code>bool</code> <p>Suppresses table asset creation</p> required <code>no_xy_plots</code> <code>bool</code> <p>Suppresses xy plot asset creation</p> required <code>no_histograms</code> <code>bool</code> <p>Suppresses histogram asset creation</p> required <code>dpi</code> <code>int</code> <p>Sets resolution of asset output</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef process_single_tag_collection(\n        cls,\n        dir_in: Path,\n        dir_out: Path,\n        no_tables: bool,\n        no_xy_plots: bool,\n        no_histograms: bool,\n        dpi: int,\n    ):\n    \"\"\"\n    Processes collection of elements corresponding to a single tag.\n    This method should be called on a directory containing jsons for which the products have been\n    sorted.\n\n    Args:\n        dir_in (Path):  Input directory for loading assets\n        dir_out (Path):  Output directory for assets\n        no_tables (bool):  Suppresses table asset creation\n        no_xy_plots (bool):  Suppresses xy plot asset creation\n        no_histograms (bool):  Suppresses histogram asset creation\n        dpi (int):  Sets resolution of asset output\n    \"\"\"\n\n    collection = cls.collect_from_all_jsons(dir_in)\n\n    if collection is not None:\n\n        [tag] = collection.get_tags()\n\n        if not no_tables:\n\n            table_entries: List[TableEntry] = collection.get_products(tag=tag, object_type=TableEntry).elements\n\n            if table_entries:\n                print(f'\\n\\nMaking tables for {tag = }\\n')\n                TableBuilder.process_table_entries(\n                    tag=tag,\n                    table_entries=table_entries,\n                    out_dir=dir_out\n                )\n                print(f'\\nFinished tables for {tag = }\\n')\n\n        if not no_xy_plots:\n\n            traces: List[Trace2D] = collection.get_products(tag=tag, object_type=Trace2D).elements\n            points: List[Point2D] = collection.get_products(tag=tag, object_type=Point2D).elements\n\n            if points or traces:\n                print(f'\\n\\nMaking xy plot for {tag = }\\n')\n                XYDataPlotter.handle_points_and_traces(\n                    tag=tag,\n                    points=points,\n                    traces=traces,\n                    dir_out=dir_out,\n                    dpi=dpi,\n                )\n                print(f'\\nFinished xy plot for {tag = }\\n')\n\n        if not no_histograms:\n            histogram_entries: List[HistogramEntry] = collection.get_products(tag=tag, object_type=HistogramEntry).elements\n\n            if histogram_entries:\n                print(f'\\n\\nMaking histogram for {tag = }\\n')\n                Histogrammer.handle_histogram_entries(\n                    tag=tag,\n                    histogram_entries=histogram_entries,\n                    dir_out=dir_out,\n                    dpi=dpi\n                )\n                print(f'\\nFinished histogram for {tag = }\\n')\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.sort_by_tags","title":"sort_by_tags  <code>classmethod</code>","text":"<pre><code>sort_by_tags(\n    dirs_in: List[Path], dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT\n)\n</code></pre> <p>Loads the data product JSON files from <code>dirs_in</code> sorts the products. Sorted products are written to smaller files in a nested directory structure under <code>dir_out</code>. A nested directory structure is generated according to the data tags. Resulting product files are named according to the directory from which they were originally loaded.</p> <p>Parameters:</p> Name Type Description Default <code>dirs_in</code> <code>List[Path]</code> <p>Directories from which the data product JSON files are to be loaded.</p> required <code>dir_out</code> <code>Path</code> <p>Directory to which the sorted data products will be written into a  nested folder structure generated according to the data tags.</p> required <code>data_products_fname</code> <code>str</code> <p>Name of data products file</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef sort_by_tags(cls, dirs_in: List[Path], dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT):\n    \"\"\"\n    Loads the data product JSON files from `dirs_in` sorts the products.\n    Sorted products are written to smaller files in a nested directory structure under `dir_out`.\n    A nested directory structure is generated according to the data tags.\n    Resulting product files are named according to the directory from which they were originally loaded.\n\n    Args:\n        dirs_in (List[Path]): Directories from which the data product JSON files are to be loaded.\n        dir_out (Path): Directory to which the sorted data products will be written into a \n            nested folder structure generated according to the data tags.\n        data_products_fname (str): Name of data products file\n    \"\"\"\n    dirs_in = list(dirs_in)\n    dirs_in.sort()\n    len_dirs = len(dirs_in)\n    for n, dir_in in enumerate(dirs_in):\n        print(f'Sorting tagged data from dir {n}/{len_dirs}', end=f'\\r')\n        cls.sort_by_tags_single_directory(dir_in=dir_in, dir_out=dir_out, data_products_fname=data_products_fname)\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.sort_by_tags_single_directory","title":"sort_by_tags_single_directory  <code>classmethod</code>","text":"<pre><code>sort_by_tags_single_directory(\n    dir_in: Path, dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT\n)\n</code></pre> <p>Loads the data product JSON files from <code>dir_in</code> and sorts the products. Sorted products are written to smaller files in a nested directory structure under <code>dir_out</code>. A nested directory structure is generated according to the data tags. Resulting product files are named according to the directory from which they were originally loaded.</p> <p>Parameters:</p> Name Type Description Default <code>dirs_in</code> <code>List[Path]</code> <p>Directories from which the data product JSON files are to be loaded.</p> required <code>dir_out</code> <code>Path</code> <p>Directory to which the sorted data products will be written into a  nested folder structure generated according to the data tags.</p> required <code>data_products_fname</code> <code>str</code> <p>Name of data products file</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef sort_by_tags_single_directory(cls, dir_in: Path, dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT):\n    \"\"\"\n    Loads the data product JSON files from `dir_in` and sorts the products.\n    Sorted products are written to smaller files in a nested directory structure under `dir_out`.\n    A nested directory structure is generated according to the data tags.\n    Resulting product files are named according to the directory from which they were originally loaded.\n\n    Args:\n        dirs_in (List[Path]): Directories from which the data product JSON files are to be loaded.\n        dir_out (Path): Directory to which the sorted data products will be written into a \n            nested folder structure generated according to the data tags.\n        data_products_fname (str): Name of data products file\n    \"\"\"\n    products_file = dir_in.joinpath(data_products_fname)\n    if products_file.exists():\n        print(f'Sorting results from {dir_in = }')\n        collection = DataProductCollection.model_validate_json(dir_in.joinpath(data_products_fname).read_text())\n        collection.derived_from = dir_in\n        tags = collection.get_tags()\n        for tag in tags:\n            sub_collection = collection.get_products(tag=tag)\n            save_dir = dir_out.joinpath(*atleast_1d(tag))\n            save_dir.mkdir(parents=True, exist_ok=True)\n            next_index = get_and_reserve_next_index(save_dir=save_dir, dir_in=dir_in)\n            file = save_dir.joinpath(str(next_index)).with_suffix('.json')\n            file.write_text(sub_collection.model_dump_json())\n    else:\n        print(f'No results found in {dir_in = }')\n</code></pre>"},{"location":"reference/trendify/#trendify.DataProductCollection.union","title":"union  <code>classmethod</code>","text":"<pre><code>union(*collections: DataProductCollection)\n</code></pre> <p>Aggregates all of the products from multiple collections into a new larger collection.</p> <p>Parameters:</p> Name Type Description Default <code>collections</code> <code>Tuple[DataProductCollection, ...]</code> <p>Data product collections for which the products should be combined into a new collection.</p> <code>()</code> <p>Returns:</p> Type Description <code>Type[Self]</code> <p>A new data product collection containing all products from the provided <code>*collections</code>.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef union(cls, *collections: DataProductCollection):\n    \"\"\"\n    Aggregates all of the products from multiple collections into a new larger collection.\n\n    Args:\n        collections (Tuple[DataProductCollection, ...]): Data product collections\n            for which the products should be combined into a new collection.\n\n    Returns:\n        (Type[Self]): A new data product collection containing all products from\n            the provided `*collections`.\n    \"\"\"\n    return cls(elements=list(flatten(chain(c.elements for c in collections))))\n</code></pre>"},{"location":"reference/trendify/#trendify.Format2D","title":"Format2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Formatting data for matplotlib figure and axes</p> <p>Attributes:</p> Name Type Description <code>title_fig</code> <code>Optional[str]</code> <p>Sets figure title</p> <code>title_legend</code> <code>Optional[str]</code> <p>Sets legend title</p> <code>title_ax</code> <code>Optional[str]</code> <p>Sets axis title</p> <code>label_x</code> <code>Optional[str]</code> <p>Sets x-axis label</p> <code>label_y</code> <code>Optional[str]</code> <p>Sets y-axis label</p> <code>lim_x_min</code> <code>float | str | None</code> <p>Sets x-axis lower bound</p> <code>lim_x_max</code> <code>float | str | None</code> <p>Sets x-axis upper bound</p> <code>lim_y_min</code> <code>float | str | None</code> <p>Sets y-axis lower bound</p> <code>lim_y_max</code> <code>float | str | None</code> <p>Sets y-axis upper bound</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n  \"properties\": {\n    \"title_fig\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Fig\"\n    },\n    \"title_legend\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Legend\"\n    },\n    \"title_ax\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Ax\"\n    },\n    \"label_x\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label X\"\n    },\n    \"label_y\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label Y\"\n    },\n    \"lim_x_min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim X Min\"\n    },\n    \"lim_x_max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim X Max\"\n    },\n    \"lim_y_min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim Y Min\"\n    },\n    \"lim_y_max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim Y Max\"\n    }\n  },\n  \"title\": \"Format2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>title_fig</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>title_legend</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>title_ax</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>label_x</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>label_y</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>lim_x_min</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_x_max</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_y_min</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_y_max</code>                 (<code>float | str | None</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.Format2D.union_from_iterable","title":"union_from_iterable  <code>classmethod</code>","text":"<pre><code>union_from_iterable(format2ds: Iterable[Format2D])\n</code></pre> <p>Gets the most inclusive format object (in terms of limits) from a list of <code>Format2D</code> objects. Requires that the label and title fields are identical for all format objects in the list.</p> <p>Parameters:</p> Name Type Description Default <code>format2ds</code> <code>Iterable[Format2D]</code> <p>Iterable of <code>Format2D</code> objects.</p> required <p>Returns:</p> Type Description <code>Format2D</code> <p>Single format object from list of objects.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef union_from_iterable(cls, format2ds: Iterable[Format2D]):\n    \"\"\"\n    Gets the most inclusive format object (in terms of limits) from a list of `Format2D` objects.\n    Requires that the label and title fields are identical for all format objects in the list.\n\n    Args:\n        format2ds (Iterable[Format2D]): Iterable of `Format2D` objects.\n\n    Returns:\n        (Format2D): Single format object from list of objects.\n\n    \"\"\"\n    formats = list(set(format2ds) - {None})\n    [title_fig] = set(i.title_fig for i in formats if i is not None)\n    [title_legend] = set(i.title_legend for i in formats if i is not None)\n    [title_ax] = set(i.title_ax for i in formats if i is not None)\n    [label_x] = set(i.label_x for i in formats if i is not None)\n    [label_y] = set(i.label_y for i in formats if i is not None)\n    x_min = [i.lim_x_min for i in formats if i.lim_x_min is not None]\n    x_max = [i.lim_x_max for i in formats if i.lim_x_max is not None]\n    y_min = [i.lim_y_min for i in formats if i.lim_y_min is not None]\n    y_max = [i.lim_y_max for i in formats if i.lim_y_max is not None]\n    lim_x_min = np.min(x_min) if len(x_min) &gt; 0 else None\n    lim_x_max = np.max(x_max) if len(x_max) &gt; 0 else None\n    lim_y_min = np.min(y_min) if len(y_min) &gt; 0 else None\n    lim_y_max = np.max(y_max) if len(y_max) &gt; 0 else None\n\n    return cls(\n        title_fig=title_fig,\n        title_legend=title_legend,\n        title_ax=title_ax,\n        label_x=label_x,\n        label_y=label_y,\n        lim_x_min=lim_x_min,\n        lim_x_max=lim_x_max,\n        lim_y_min=lim_y_min,\n        lim_y_max=lim_y_max,\n    )\n</code></pre>"},{"location":"reference/trendify/#trendify.HistogramEntry","title":"HistogramEntry  <code>pydantic-model</code>","text":"<p>               Bases: <code>PlottableData2D</code></p> <p>Use this class to specify a value to be collected into a matplotlib histogram.</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> <code>value</code> <code>float | str</code> <p>Value to be binned</p> <code>style</code> <code>HistogramStyle</code> <p>Style of histogram display</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"HistogramStyle\": {\n      \"description\": \"Label and style data for generating histogram bars\\n\\nAttributes:\\n    color (str): Color of bars\\n    label (str|None): Legend entry\\n    histtype (str): Histogram type corresponding to matplotlib argument of same name\\n    alpha_edge (float): Opacity of bar edge\\n    alpha_face (float): Opacity of bar face\\n    linewidth (float): Line width of bar outline\\n    bins (int | list[int] | Tuple[int] | NDArray[Shape[\\\"*\\\"], int] | None): Number of bins (see [matplotlib docs][matplotlib.pyplot.hist])\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"histtype\": {\n          \"default\": \"stepfilled\",\n          \"title\": \"Histtype\",\n          \"type\": \"string\"\n        },\n        \"alpha_edge\": {\n          \"default\": 1,\n          \"title\": \"Alpha Edge\",\n          \"type\": \"number\"\n        },\n        \"alpha_face\": {\n          \"default\": 0.3,\n          \"title\": \"Alpha Face\",\n          \"type\": \"number\"\n        },\n        \"linewidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"number\"\n        },\n        \"bins\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"items\": {\n                \"type\": \"integer\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"maxItems\": 1,\n              \"minItems\": 1,\n              \"prefixItems\": [\n                {\n                  \"type\": \"integer\"\n                }\n              ],\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Bins\"\n        }\n      },\n      \"title\": \"HistogramStyle\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Use this class to specify a value to be collected into a matplotlib histogram.\\n\\nAttributes:\\n    tags (Tags): Tags used to sort data products\\n    value (float | str): Value to be binned\\n    style (HistogramStyle): Style of histogram display\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Value\"\n    },\n    \"style\": {\n      \"$ref\": \"#/$defs/HistogramStyle\",\n      \"default\": {\n        \"color\": \"k\",\n        \"label\": null,\n        \"histtype\": \"stepfilled\",\n        \"alpha_edge\": 1.0,\n        \"alpha_face\": 0.3,\n        \"linewidth\": 2.0,\n        \"bins\": null\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"value\"\n  ],\n  \"title\": \"HistogramEntry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>value</code>                 (<code>float | str</code>)             </li> <li> <code>tags</code>                 (<code>Tags</code>)             </li> <li> <code>style</code>                 (<code>HistogramStyle</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.HistogramStyle","title":"HistogramStyle  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Label and style data for generating histogram bars</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of bars</p> <code>label</code> <code>str | None</code> <p>Legend entry</p> <code>histtype</code> <code>str</code> <p>Histogram type corresponding to matplotlib argument of same name</p> <code>alpha_edge</code> <code>float</code> <p>Opacity of bar edge</p> <code>alpha_face</code> <code>float</code> <p>Opacity of bar face</p> <code>linewidth</code> <code>float</code> <p>Line width of bar outline</p> <code>bins</code> <code>int | list[int] | Tuple[int] | NDArray[Shape['*'], int] | None</code> <p>Number of bins (see matplotlib docs)</p> Show JSON schema: <pre><code>{\n  \"description\": \"Label and style data for generating histogram bars\\n\\nAttributes:\\n    color (str): Color of bars\\n    label (str|None): Legend entry\\n    histtype (str): Histogram type corresponding to matplotlib argument of same name\\n    alpha_edge (float): Opacity of bar edge\\n    alpha_face (float): Opacity of bar face\\n    linewidth (float): Line width of bar outline\\n    bins (int | list[int] | Tuple[int] | NDArray[Shape[\\\"*\\\"], int] | None): Number of bins (see [matplotlib docs][matplotlib.pyplot.hist])\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    },\n    \"histtype\": {\n      \"default\": \"stepfilled\",\n      \"title\": \"Histtype\",\n      \"type\": \"string\"\n    },\n    \"alpha_edge\": {\n      \"default\": 1,\n      \"title\": \"Alpha Edge\",\n      \"type\": \"number\"\n    },\n    \"alpha_face\": {\n      \"default\": 0.3,\n      \"title\": \"Alpha Face\",\n      \"type\": \"number\"\n    },\n    \"linewidth\": {\n      \"default\": 2,\n      \"title\": \"Linewidth\",\n      \"type\": \"number\"\n    },\n    \"bins\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"maxItems\": 1,\n          \"minItems\": 1,\n          \"prefixItems\": [\n            {\n              \"type\": \"integer\"\n            }\n          ],\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Bins\"\n    }\n  },\n  \"title\": \"HistogramStyle\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>label</code>                 (<code>str | None</code>)             </li> <li> <code>histtype</code>                 (<code>str</code>)             </li> <li> <code>alpha_edge</code>                 (<code>float</code>)             </li> <li> <code>alpha_face</code>                 (<code>float</code>)             </li> <li> <code>linewidth</code>                 (<code>float</code>)             </li> <li> <code>bins</code>                 (<code>int | list[int] | Tuple[int] | NDArray[Shape['*'], int] | None</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.HistogramStyle.as_plot_kwargs","title":"as_plot_kwargs","text":"<pre><code>as_plot_kwargs()\n</code></pre> <p>Returns:</p> Type Description <code>dict</code> <p>kwargs for matplotlib <code>hist</code> method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_plot_kwargs(self):\n    \"\"\"\n    Returns:\n        (dict): kwargs for matplotlib `hist` method\n    \"\"\"\n    return {\n        'facecolor': (self.color, self.alpha_face),\n        'edgecolor': (self.color, self.alpha_edge),\n        'linewidth': self.linewidth,\n        'label': self.label,\n        'histtype': self.histtype,\n        'bins': self.bins,\n    }\n</code></pre>"},{"location":"reference/trendify/#trendify.Marker","title":"Marker  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Defines marker for scattering to matplotlib</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of line</p> <code>size</code> <code>float</code> <p>Line width</p> <code>alpha</code> <code>float</code> <p>Opacity from 0 to 1 (inclusive)</p> <code>zorder</code> <code>float</code> <p>Prioritization </p> <code>label</code> <code>Union[str, None]</code> <p>Legend label</p> <code>symbol</code> <code>str</code> <p>Matplotlib symbol string</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"default\": 5,\n      \"title\": \"Size\",\n      \"type\": \"number\"\n    },\n    \"alpha\": {\n      \"default\": 1,\n      \"title\": \"Alpha\",\n      \"type\": \"number\"\n    },\n    \"zorder\": {\n      \"default\": 0,\n      \"title\": \"Zorder\",\n      \"type\": \"number\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    },\n    \"symbol\": {\n      \"default\": \".\",\n      \"title\": \"Symbol\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"Marker\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>size</code>                 (<code>float</code>)             </li> <li> <code>alpha</code>                 (<code>float</code>)             </li> <li> <code>zorder</code>                 (<code>float</code>)             </li> <li> <code>label</code>                 (<code>str | None</code>)             </li> <li> <code>symbol</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.Marker.as_scatter_plot_kwargs","title":"as_scatter_plot_kwargs","text":"<pre><code>as_scatter_plot_kwargs()\n</code></pre> <p>Returns:</p> Type Description <code>dict</code> <p>dictionary of <code>kwargs</code> for matplotlib scatter</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_scatter_plot_kwargs(self):\n    \"\"\"\n    Returns:\n        (dict): dictionary of `kwargs` for [matplotlib scatter][matplotlib.axes.Axes.scatter]\n    \"\"\"\n    return {\n        'marker': self.symbol,\n        'c': self.color,\n        's': self.size,\n        'alpha': self.alpha,\n        'zorder': self.zorder,\n        'label': self.label,\n        'marker': self.symbol,\n    }\n</code></pre>"},{"location":"reference/trendify/#trendify.Marker.from_pen","title":"from_pen  <code>classmethod</code>","text":"<pre><code>from_pen(pen: Pen, symbol: str = '.')\n</code></pre> <p>Converts Pen to marker with the option to specify a symbol</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_pen(\n        cls,\n        pen: Pen,\n        symbol: str = '.',\n    ):\n    \"\"\"\n    Converts Pen to marker with the option to specify a symbol\n    \"\"\"\n    return cls(symbol=symbol, **pen.model_dump())\n</code></pre>"},{"location":"reference/trendify/#trendify.Pen","title":"Pen  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Defines the pen drawing to matplotlib.</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of line</p> <code>size</code> <code>float</code> <p>Line width</p> <code>alpha</code> <code>float</code> <p>Opacity from 0 to 1 (inclusive)</p> <code>zorder</code> <code>float</code> <p>Prioritization </p> <code>label</code> <code>Union[str, None]</code> <p>Legend label</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines the pen drawing to matplotlib.\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"default\": 1,\n      \"title\": \"Size\",\n      \"type\": \"number\"\n    },\n    \"alpha\": {\n      \"default\": 1,\n      \"title\": \"Alpha\",\n      \"type\": \"number\"\n    },\n    \"zorder\": {\n      \"default\": 0,\n      \"title\": \"Zorder\",\n      \"type\": \"number\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    }\n  },\n  \"title\": \"Pen\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>size</code>                 (<code>float</code>)             </li> <li> <code>alpha</code>                 (<code>float</code>)             </li> <li> <code>zorder</code>                 (<code>float</code>)             </li> <li> <code>label</code>                 (<code>Union[str, None]</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.Pen.as_scatter_plot_kwargs","title":"as_scatter_plot_kwargs","text":"<pre><code>as_scatter_plot_kwargs()\n</code></pre> <p>Returns kwargs dictionary for passing to matplotlib plot method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_scatter_plot_kwargs(self):\n    \"\"\"\n    Returns kwargs dictionary for passing to [matplotlib plot][matplotlib.axes.Axes.plot] method\n    \"\"\"\n    return {\n        'color': self.color,\n        'linewidth': self.size,\n        'alpha': self.alpha,\n        'zorder': self.zorder,\n        'label': self.label,\n    }\n</code></pre>"},{"location":"reference/trendify/#trendify.Point2D","title":"Point2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>XYData</code></p> <p>Defines a point to be scattered onto xy plot.</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.        </p> <code>x</code> <code>float | str</code> <p>X value for the point.</p> <code>y</code> <code>float | str</code> <p>Y value for the point.</p> <code>marker</code> <code>Marker | None</code> <p>Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"Marker\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 5,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"symbol\": {\n          \"default\": \".\",\n          \"title\": \"Symbol\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Marker\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Defines a point to be scattered onto xy plot.\\n\\nAttributes:\\n    tags (Tags): Tags to be used for sorting data.        \\n    x (float | str): X value for the point.\\n    y (float | str): Y value for the point.\\n    marker (Marker | None): Style and label information for scattering points to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"x\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"X\"\n    },\n    \"y\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Y\"\n    },\n    \"marker\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Marker\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {\n        \"color\": \"k\",\n        \"size\": 5.0,\n        \"alpha\": 1.0,\n        \"zorder\": 0.0,\n        \"label\": null,\n        \"symbol\": \".\"\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"x\",\n    \"y\"\n  ],\n  \"title\": \"Point2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>x</code>                 (<code>float | str</code>)             </li> <li> <code>y</code>                 (<code>float | str</code>)             </li> <li> <code>marker</code>                 (<code>Marker | None</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.ProductType","title":"ProductType","text":"<p>               Bases: <code>StrEnum</code></p> <p>Defines all product types.  Used to type-cast URL info in server to validate.</p> <p>Attributes:</p> Name Type Description <code>DataProduct</code> <code>str</code> <p>class name</p> <code>XYData</code> <code>str</code> <p>class name</p> <code>Trace2D</code> <code>str</code> <p>class name</p> <code>Point2D</code> <code>str</code> <p>class name</p> <code>TableEntry</code> <code>str</code> <p>class name</p> <code>HistogramEntry</code> <code>str</code> <p>class name</p>"},{"location":"reference/trendify/#trendify.TableEntry","title":"TableEntry  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataProduct</code></p> <p>Defines an entry to be collected into a table.</p> <p>Collected table entries will be printed in three forms when possible: melted, pivot (when possible), and stats (on pivot columns, when possible).</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> <code>row</code> <code>float | str</code> <p>Row Label</p> <code>col</code> <code>float | str</code> <p>Column Label</p> <code>value</code> <code>float | str</code> <p>Value</p> <code>unit</code> <code>str | None</code> <p>Units for value</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines an entry to be collected into a table.\\n\\nCollected table entries will be printed in three forms when possible: melted, pivot (when possible), and stats (on pivot columns, when possible).\\n\\nAttributes:\\n    tags (Tags): Tags used to sort data products\\n    row (float | str): Row Label\\n    col (float | str): Column Label\\n    value (float | str): Value\\n    unit (str | None): Units for value\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"row\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Row\"\n    },\n    \"col\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Col\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"boolean\"\n        }\n      ],\n      \"title\": \"Value\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Unit\"\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"row\",\n    \"col\",\n    \"value\",\n    \"unit\"\n  ],\n  \"title\": \"TableEntry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>row</code>                 (<code>float | str</code>)             </li> <li> <code>col</code>                 (<code>float | str</code>)             </li> <li> <code>value</code>                 (<code>float | str | bool</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.TableEntry.get_entry_dict","title":"get_entry_dict","text":"<pre><code>get_entry_dict()\n</code></pre> <p>Returns a dictionary of entries to be used in creating a table.</p> <p>Returns:</p> Type Description <code>dict[str, str | float]</code> <p>Dictionary of entries to be used in creating a melted DataFrame</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_entry_dict(self):\n    \"\"\"\n    Returns a dictionary of entries to be used in creating a table.\n\n    Returns:\n        (dict[str, str | float]): Dictionary of entries to be used in creating a melted [DataFrame][pandas.DataFrame]\n    \"\"\"\n    return {'row': self.row, 'col': self.col, 'value': self.value, 'unit': self.unit}\n</code></pre>"},{"location":"reference/trendify/#trendify.TableEntry.load_and_pivot","title":"load_and_pivot  <code>classmethod</code>","text":"<pre><code>load_and_pivot(path: Path)\n</code></pre> <p>Loads melted table from csv and pivots to wide form. csv should have columns named <code>'row'</code>, <code>'col'</code>, and <code>'value'</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>path to CSV file</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>Pivoted data frame or elese <code>None</code> if pivot operation fails.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef load_and_pivot(cls, path: Path):\n    \"\"\"\n    Loads melted table from csv and pivots to wide form.\n    csv should have columns named `'row'`, `'col'`, and `'value'`.\n\n    Args:\n        path (Path): path to CSV file\n\n    Returns:\n        (pd.DataFrame | None): Pivoted data frame or elese `None` if pivot operation fails.\n    \"\"\"\n    return cls.pivot_table(melted=pd.read_csv(path))\n</code></pre>"},{"location":"reference/trendify/#trendify.TableEntry.pivot_table","title":"pivot_table  <code>classmethod</code>","text":"<pre><code>pivot_table(melted: DataFrame)\n</code></pre> <p>Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>melted</code> <code>DataFrame</code> <p>Melted data frame having columns named <code>'row'</code>, <code>'col'</code>, <code>'value'</code>.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pivoted DataFrame if pivot works else <code>None</code>. Pivot operation fails if  row or column index pairs are repeated.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef pivot_table(cls, melted: pd.DataFrame):\n    \"\"\"\n    Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame\n\n    Args:\n        melted (pd.DataFrame): Melted data frame having columns named `'row'`, `'col'`, `'value'`.\n\n    Returns:\n        (pd.DataFrame | None): pivoted DataFrame if pivot works else `None`. Pivot operation fails if \n            row or column index pairs are repeated.\n    \"\"\"\n    try:\n        result = melted.pivot(index='row', columns='col', values='value')\n    except ValueError:\n        result = None\n    return result\n</code></pre>"},{"location":"reference/trendify/#trendify.Trace2D","title":"Trace2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>XYData</code></p> <p>A collection of points comprising a trace. Use the Trace2D.from_xy constructor.</p> <p>Attributes:</p> Name Type Description <code>points</code> <code>List[Point2D]</code> <p>List of points.  Usually the points would have null values  for <code>marker</code> and <code>format2d</code> fields to save space.</p> <code>pen</code> <code>Pen</code> <p>Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana.</p> <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"Marker\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 5,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"symbol\": {\n          \"default\": \".\",\n          \"title\": \"Symbol\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Marker\",\n      \"type\": \"object\"\n    },\n    \"Pen\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines the pen drawing to matplotlib.\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 1,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        }\n      },\n      \"title\": \"Pen\",\n      \"type\": \"object\"\n    },\n    \"Point2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines a point to be scattered onto xy plot.\\n\\nAttributes:\\n    tags (Tags): Tags to be used for sorting data.        \\n    x (float | str): X value for the point.\\n    y (float | str): Y value for the point.\\n    marker (Marker | None): Style and label information for scattering points to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n      \"properties\": {\n        \"tags\": {\n          \"items\": {\n            \"anyOf\": []\n          },\n          \"title\": \"Tags\",\n          \"type\": \"array\"\n        },\n        \"metadata\": {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"default\": {},\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        },\n        \"format2d\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Format2D\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"title\": \"X\"\n        },\n        \"y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"title\": \"Y\"\n        },\n        \"marker\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Marker\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": {\n            \"color\": \"k\",\n            \"size\": 5.0,\n            \"alpha\": 1.0,\n            \"zorder\": 0.0,\n            \"label\": null,\n            \"symbol\": \".\"\n          }\n        }\n      },\n      \"required\": [\n        \"tags\",\n        \"x\",\n        \"y\"\n      ],\n      \"title\": \"Point2D\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"A collection of points comprising a trace.\\nUse the [Trace2D.from_xy][trendify.API.Trace2D.from_xy] constructor.\\n\\nAttributes:\\n    points (List[Point2D]): List of points.  Usually the points would have null values \\n        for `marker` and `format2d` fields to save space.\\n    pen (Pen): Style and label information for drawing to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"points\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Point2D\"\n      },\n      \"title\": \"Points\",\n      \"type\": \"array\"\n    },\n    \"pen\": {\n      \"$ref\": \"#/$defs/Pen\",\n      \"default\": {\n        \"color\": \"k\",\n        \"size\": 1.0,\n        \"alpha\": 1.0,\n        \"zorder\": 0.0,\n        \"label\": null\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"points\"\n  ],\n  \"title\": \"Trace2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>points</code>                 (<code>List[Point2D]</code>)             </li> <li> <code>pen</code>                 (<code>Pen</code>)             </li> <li> <code>x</code>                 (<code>NDArray[Shape['*'], float]</code>)             </li> <li> <code>y</code>                 (<code>NDArray[Shape['*'], float]</code>)             </li> </ul>"},{"location":"reference/trendify/#trendify.Trace2D.x","title":"x  <code>pydantic-field</code>","text":"<pre><code>x: NDArray[Shape['*'], float]\n</code></pre> <p>Returns an array of x values from <code>self.points</code></p> <p>Returns:</p> Type Description <code>NDArray[Shape['*'], float]</code> <p>array of x values from <code>self.points</code></p> <p>'</p>"},{"location":"reference/trendify/#trendify.Trace2D.y","title":"y  <code>pydantic-field</code>","text":"<pre><code>y: NDArray[Shape['*'], float]\n</code></pre> <p>Returns an array of y values from <code>self.points</code></p> <p>Returns:</p> Type Description <code>NDArray[Shape['*'], float]</code> <p>array of y values from <code>self.points</code></p>"},{"location":"reference/trendify/#trendify.Trace2D.from_xy","title":"from_xy  <code>classmethod</code>","text":"<pre><code>from_xy(\n    tags: Tags,\n    x: NDArray[Shape[\"*\"], float],\n    y: NDArray[Shape[\"*\"], float],\n    pen: Pen = Pen(),\n    format2d: Format2D = Format2D(),\n)\n</code></pre> <p>Creates a list of Point2Ds from xy data and returns a new Trace2D product.</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> required <code>x</code> <code>NDArray[Shape['*'], float]</code> <p>x values</p> required <code>y</code> <code>NDArray[Shape['*'], float]</code> <p>y values</p> required <code>pen</code> <code>Pen</code> <p>Style and label for trace</p> <code>Pen()</code> <code>format2d</code> <code>Format2D</code> <p>Format to apply to plot</p> <code>Format2D()</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_xy(\n        cls,\n        tags: Tags,\n        x: NDArray[Shape[\"*\"], float],\n        y: NDArray[Shape[\"*\"], float],\n        pen: Pen = Pen(),\n        format2d: Format2D = Format2D(),\n    ):\n    \"\"\"\n    Creates a list of [Point2D][trendify.API.Point2D]s from xy data and returns a new [Trace2D][trendify.API.Trace2D] product.\n\n    Args:\n        tags (Tags): Tags used to sort data products\n        x (NDArray[Shape[\"*\"], float]): x values\n        y (NDArray[Shape[\"*\"], float]): y values\n        pen (Pen): Style and label for trace\n        format2d (Format2D): Format to apply to plot\n    \"\"\"\n    return cls(\n        tags = tags,\n        points = [\n            Point2D(\n                tags=[None],\n                x=x_,\n                y=y_,\n                marker=None,\n                format2d=None,\n            )\n            for x_, y_\n            in zip(x, y)\n        ],\n        pen=pen,\n        format2d=format2d,\n    )\n</code></pre>"},{"location":"reference/trendify/#trendify.Trace2D.plot_to_ax","title":"plot_to_ax","text":"<pre><code>plot_to_ax(ax: Axes)\n</code></pre> <p>Plots xy data from trace to a matplotlib axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>axes to which xy data should be plotted</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def plot_to_ax(self, ax: plt.Axes):\n    \"\"\"\n    Plots xy data from trace to a matplotlib axes object.\n\n    Args:\n        ax (plt.Axes): axes to which xy data should be plotted\n    \"\"\"\n    ax.plot(self.x, self.y, **self.pen.as_scatter_plot_kwargs())\n</code></pre>"},{"location":"reference/trendify/#trendify.Trace2D.propagate_format2d_and_pen","title":"propagate_format2d_and_pen","text":"<pre><code>propagate_format2d_and_pen(marker_symbol: str = '.') -&gt; None\n</code></pre> <p>Propagates format and style info to all <code>self.points</code> (in-place). I thought this would  be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes.  Keeping for potential future use case.</p> <p>Parameters:</p> Name Type Description Default <code>marker_symbol</code> <code>str</code> <p>Valid matplotlib marker symbol</p> <code>'.'</code> Source code in <code>src/trendify/API.py</code> <pre><code>def propagate_format2d_and_pen(self, marker_symbol: str = '.') -&gt; None:\n    \"\"\"\n    Propagates format and style info to all `self.points` (in-place).\n    I thought this would  be useful for grafana before I learned better methods for propagating the data.\n    It still may end up being useful if my plotting method changes.  Keeping for potential future use case.\n\n    Args:\n        marker_symbol (str): Valid matplotlib marker symbol\n    \"\"\"\n    self.points = [\n        p.model_copy(\n            update={\n                'tags': self.tags,\n                'format2d': self.format2d,\n                'marker': Marker.from_pen(self.pen, symbol=marker_symbol)\n            }\n        ) \n        for p \n        in self.points\n    ]\n</code></pre>"},{"location":"reference/trendify/#trendify.XYData","title":"XYData  <code>pydantic-model</code>","text":"<p>               Bases: <code>PlottableData2D</code></p> <p>Base class for children of DataProduct to be plotted ax xy data on a 2D plot</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": true,\n  \"description\": \"Base class for children of DataProduct to be plotted ax xy data on a 2D plot\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"tags\"\n  ],\n  \"title\": \"XYData\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"reference/trendify/#trendify.get_data_products","title":"get_data_products","text":"<pre><code>get_data_products(\n    analysis: str = \"workdir.products\", tag: str = \"trace_plots\", product_type: str = \"DataProduct\"\n)\n</code></pre> Traces <p>parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"</p> Source code in <code>src/trendify/server.py</code> <pre><code>@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/&lt;product_type&gt;')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/&lt;product_type&gt;/')\ndef get_data_products(\n        analysis: str = 'workdir.products',\n        tag: str = 'trace_plots',\n        product_type: str = 'DataProduct',\n    ):\n    \"\"\"\n    Example: Traces\n        parse-json\n        | project \"elements\"\n        | extend \"label\"=\"pen.label\"\n        | mv-expand \"points\"\n        | extend \"x\"=\"points.x\", \"y\"=\"points.y\"\n        | project \"label\", \"x\", \"y\"\n        | pivot sum(\"y\"), \"x\", \"label\"\n        | project \"label\", \"x\", \"y\"\n    \"\"\"\n    FAILED_RETURN_VALUE = None\n    query_return = FAILED_RETURN_VALUE\n    product_type = str(product_type)\n\n    match product_type:\n        case DataProduct.__name__:\n            filter_type = DataProduct\n        case XYData.__name__:\n            filter_type = XYData\n        case Trace2D.__name__:\n            filter_type = Trace2D\n        case Point2D.__name__:\n            filter_type = Point2D\n        case TableEntry.__name__:\n            filter_type = TableEntry\n        case HistogramEntry.__name__:\n            filter_type = HistogramEntry\n        case _:\n            query_return = f'{product_type = } should be in {valid_types_names_list}'\n            return query_return\n\n    try:\n        analysis = str(analysis)\n        analysis_path_components = analysis.split('.') if '.' in analysis else [analysis]\n        tag = str(tag)\n        tag_path_components = tag.split('.') if '.' in tag else [tag]\n        collection_path_components = analysis_path_components + tag_path_components\n        data_dir = DATABASE_ROOT.joinpath(*tuple(analysis_path_components))\n        collection_dir = data_dir.joinpath(*tuple(tag_path_components))\n        assert not any(('.' in x) for x in collection_path_components)\n        assert collection_dir.is_relative_to(data_dir)\n    except AssertionError:\n        query_return = f'Do not try to access stuff outside of {data_dir = }'\n        print(f'Do not try to access stuff outside of {data_dir = }')\n        return query_return\n\n    data: DataProductCollection = DataProductCollection.collect_from_all_jsons(collection_dir)\n    if data is None:\n        return f'Did not find data product jsons in {collection_dir}'\n    formatted_tag = (\n        tag_path_components[0] \n        if len(tag_path_components) == 1 \n        else tuple(tag_path_components)\n    )\n    filtered_data = data.get_products(\n        tag=formatted_tag,\n        object_type=filter_type,\n    )\n    query_return = filtered_data.model_dump_json()\n    return query_return\n</code></pre>"},{"location":"reference/trendify/#trendify.make_grafana_dashboard","title":"make_grafana_dashboard","text":"<pre><code>make_grafana_dashboard(\n    products_dir: Path, output_dir: Path, protocol: str, host: str, port: int, n_procs: int = 1\n)\n</code></pre> <p>Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots.</p> <p>Parameters:</p> Name Type Description Default <code>products_dir</code> <code>Path</code> <p>Root directory into which products have been sorted by tag</p> required <code>output_dir</code> <code>Path</code> <p>Root directory into which Grafana dashboard and panal definitions will be written</p> required <code>n_procs</code> <code>int</code> <p>Number of parallel tasks used for processing data product tags</p> <code>1</code> <code>protocol</code> <code>str</code> <p>Communication protocol for data server</p> required <code>host</code> <code>str</code> <p>Sever address for providing data to interactive dashboard</p> required <code>n_procs</code> <code>int</code> <p>Number of parallel processes</p> <code>1</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_grafana_dashboard(\n        products_dir: Path,\n        output_dir: Path,\n        protocol: str,\n        host: str,\n        port: int,\n        n_procs: int = 1,\n    ):\n    \"\"\"\n    Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots.\n\n    Args:\n        products_dir (Path): Root directory into which products have been sorted by tag\n        output_dir (Path): Root directory into which Grafana dashboard and panal definitions will be written\n        n_procs (int): Number of parallel tasks used for processing data product tags\n        protocol (str): Communication protocol for data server\n        host (str): Sever address for providing data to interactive dashboard\n        n_procs (int): Number of parallel processes\n    \"\"\"\n    print(f'\\n\\n\\nGenerating Grafana Dashboard JSON Spec in {output_dir} based on products in {products_dir}')\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    product_dirs = list(products_dir.glob('**/*/'))\n    panel_dir = output_dir.joinpath('panels')\n    map_callable(\n        DataProductCollection.make_grafana_panels,\n        product_dirs,\n        [panel_dir] * len(product_dirs),\n        [f'{protocol}://{host}:{port}'] * len(product_dirs),\n        n_procs=n_procs,\n    )\n    panels = [gapi.Panel.model_validate_json(p.read_text()) for p in panel_dir.glob('*.json')]\n    dashboard = gapi.Dashboard(panels=panels)\n    output_dir.joinpath('dashboard.json').write_text(dashboard.model_dump_json())\n    print('\\nFinished Generating Grafana Dashboard JSON Spec')\n</code></pre>"},{"location":"reference/trendify/#trendify.make_include_files","title":"make_include_files","text":"<pre><code>make_include_files(\n    root_dir: Path,\n    local_server_path: str | Path = None,\n    mkdocs_include_dir: str | Path = None,\n    heading_level: int | None = None,\n)\n</code></pre> <p>Makes nested include files for inclusion into an MkDocs site.</p> Note <p>I recommend to create a Grafana panel and link to that from the MkDocs site instead.</p> <p>Parameters:</p> Name Type Description Default <code>root_dir</code> <code>Path</code> <p>Directory for which the include files should be recursively generated</p> required <code>local_server_path</code> <code>str | Path | None</code> <p>What should the beginning of the path look like? Use <code>//localhost:8001/...</code> something like that to work with <code>python -m mkdocs serve</code> while running <code>python -m http.server 8001</code> in order to have interactive updates. Use my python <code>convert_links.py</code> script to update after running <code>python -m mkdocs build</code> in order to fix the links for the MkDocs site.  See this repo for an example.</p> <code>None</code> <code>mkdocs_include_dir</code> <code>str | Path | None</code> <p>Path to be used for mkdocs includes. This path should correspond to includ dir in <code>mkdocs.yml</code> file.  (See <code>vulcan_srb_sep</code> repo for example).</p> <code>None</code> <p>Note:</p> <pre><code>Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to \ninclude generated markdown files (and the images/CSVs that they reference).\n\n```\nplugins:\n  - macros:\n    include_dir: run_for_record\n```\n</code></pre> Source code in <code>src/trendify/API.py</code> <pre><code>def make_include_files(\n        root_dir: Path,\n        local_server_path: str | Path = None,\n        mkdocs_include_dir: str | Path = None,\n        # products_dir_replacement_path: str | Path = None,\n        heading_level: int | None = None,\n    ):\n    \"\"\"\n    Makes nested include files for inclusion into an MkDocs site.\n\n    Note:\n        I recommend to create a Grafana panel and link to that from the MkDocs site instead.\n\n    Args:\n        root_dir (Path): Directory for which the include files should be recursively generated\n        local_server_path (str|Path|None): What should the beginning of the path look like?\n            Use `//localhost:8001/...` something like that to work with `python -m mkdocs serve`\n            while running `python -m http.server 8001` in order to have interactive updates.\n            Use my python `convert_links.py` script to update after running `python -m mkdocs build`\n            in order to fix the links for the MkDocs site.  See this repo for an example.\n        mkdocs_include_dir (str|Path|None): Path to be used for mkdocs includes.\n            This path should correspond to includ dir in `mkdocs.yml` file.  (See `vulcan_srb_sep` repo for example).\n\n    Note:\n\n        Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to \n        include generated markdown files (and the images/CSVs that they reference).\n\n        ```\n        plugins:\n          - macros:\n            include_dir: run_for_record\n        ```\n\n    \"\"\"\n\n    INCLUDE = 'include.md'\n    dirs = list(root_dir.glob('**/'))\n    dirs.sort()\n    if dirs:\n        min_len = np.min([len(list(p.parents)) for p in dirs])\n        for s in dirs:\n            child_dirs = list(s.glob('*/'))\n            child_dirs.sort()\n            tables_to_include: List[Path] = [x for x in flatten([list(s.glob(p, case_sensitive=False)) for p in ['*pivot.csv', '*stats.csv']])]\n            figures_to_include: List[Path] = [x for x in flatten([list(s.glob(p, case_sensitive=False)) for p in ['*.jpg', '*.png']])]\n            children_to_include: List[Path] = [\n                c.resolve().joinpath(INCLUDE)\n                for c in child_dirs\n            ]\n            if local_server_path is not None:\n                figures_to_include = [\n                    Path(local_server_path).joinpath(x.relative_to(root_dir))\n                    for x in figures_to_include\n                ]\n            if mkdocs_include_dir is not None:\n                tables_to_include = [\n                    x.relative_to(mkdocs_include_dir.parent)\n                    for x in tables_to_include\n                ]\n                children_to_include = [\n                    x.relative_to(mkdocs_include_dir)\n                    for x in children_to_include\n                ]\n\n            bb_open = r'{{'\n            bb_close = r'}}'\n            fig_inclusion_statements = [\n                f'![]({x})' \n                for x in figures_to_include\n            ]\n            table_inclusion_statements = [\n                f\"{bb_open} read_csv('{x}', disable_numparse=True) {bb_close}\"\n                for x in tables_to_include\n            ]\n            child_inclusion_statments = [\n                \"{% include '\" + str(x) + \"' %}\"\n                for x in children_to_include\n            ]\n            fig_inclusion_statements.sort()\n            table_inclusion_statements.sort()\n            child_inclusion_statments.sort()\n            inclusions = table_inclusion_statements + fig_inclusion_statements + child_inclusion_statments\n\n            header = (\n                ''.join(['#']*((len(list(s.parents))-min_len)+heading_level)) + s.name \n                if heading_level is not None and len(inclusions) &gt; 1\n                else ''\n            )\n            text = '\\n\\n'.join([header] + inclusions)\n\n            s.joinpath(INCLUDE).write_text(text)\n</code></pre>"},{"location":"reference/trendify/#trendify.make_it_trendy","title":"make_it_trendy","text":"<pre><code>make_it_trendy(\n    data_product_generator: ProductGenerator | None,\n    input_dirs: List[Path],\n    output_dir: Path,\n    n_procs: int = 1,\n    dpi_static_plots: int = 500,\n    no_static_tables: bool = False,\n    no_static_xy_plots: bool = False,\n    no_static_histograms: bool = False,\n    no_grafana_dashboard: bool = False,\n    no_include_files: bool = False,\n    protocol: str = \"http\",\n    server: str = \"0.0.0.0\",\n    port: int = 8000,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Maps <code>data_product_generator</code> over <code>dirs_in</code> to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from <code>dir_products</code>. Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the directory from which they were loaded.</p> <p>Parameters:</p> Name Type Description Default <code>data_product_generator</code> <code>ProductGenerator | None</code> <p>A callable function that returns a list of data products given a working directory.</p> required <code>input_dirs</code> <code>List[Path]</code> <p>Directories over which to map the <code>product_generator</code></p> required <code>output_dir</code> <code>Path</code> <p>Directory to which the trendify products and assets will be written.</p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>dpi_static_plots</code> <code>int = 500</code> <p>Resolution of output plots when using matplotlib  (for <code>make_xy_plots==True</code> and/or <code>make_histograms==True</code>)</p> <code>500</code> <code>no_static_tables</code> <code>bool</code> <p>Suppresses static assets from the <code>TableEntry</code> products</p> <code>False</code> <code>no_static_xy_plots</code> <code>bool</code> <p>Suppresses static assets from the  <code>XYData</code>  (Trace2D and Point2D) products</p> <code>False</code> <code>no_static_histograms</code> <code>bool</code> <p>Suppresses static assets from the <code>HistogramEntry</code> products</p> <code>False</code> <code>no_grafana_dashboard</code> <code>bool</code> <p>Suppresses generation of Grafana dashboard JSON definition file</p> <code>False</code> <code>no_include_files</code> <code>bool</code> <p>Suppresses generation of include files for importing static assets to markdown or LaTeX reports</p> <code>False</code> <code>data_products_fname</code> <code>str</code> <p>File name to be used for storing generated data products</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_it_trendy(\n        data_product_generator: ProductGenerator | None,\n        input_dirs: List[Path],\n        output_dir: Path,\n        n_procs: int = 1,\n        dpi_static_plots: int = 500,\n        no_static_tables: bool = False,\n        no_static_xy_plots: bool = False,\n        no_static_histograms: bool = False,\n        no_grafana_dashboard: bool = False,\n        no_include_files: bool = False,\n        protocol: str = 'http',\n        server: str = '0.0.0.0',\n        port: int = 8000,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Maps `data_product_generator` over `dirs_in` to produce data product JSON files in those directories.\n    Sorts the generated data products into a nested file structure starting from `dir_products`.\n    Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the\n    directory from which they were loaded.\n\n    Args:\n        data_product_generator (ProductGenerator | None): A callable function that returns\n            a list of data products given a working directory.\n        input_dirs (List[Path]): Directories over which to map the `product_generator`\n        output_dir (Path): Directory to which the trendify products and assets will be written.\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        dpi_static_plots (int = 500): Resolution of output plots when using matplotlib \n            (for `make_xy_plots==True` and/or `make_histograms==True`)\n        no_static_tables (bool): Suppresses static assets from the [`TableEntry`][trendify.API.TableEntry] products\n        no_static_xy_plots (bool): Suppresses static assets from the \n            [`XYData`][trendify.API.XYData] \n            ([Trace2D][trendify.API.Trace2D] and [Point2D][trendify.API.Point2D]) products\n        no_static_histograms (bool): Suppresses static assets from the [`HistogramEntry`][trendify.API.HistogramEntry] products\n        no_grafana_dashboard (bool): Suppresses generation of Grafana dashboard JSON definition file\n        no_include_files (bool): Suppresses generation of include files for importing static assets to markdown or LaTeX reports\n        data_products_fname (str): File name to be used for storing generated data products\n    \"\"\"\n    input_dirs = [Path(p).parent if Path(p).is_file() else Path(p) for p in list(input_dirs)]\n    output_dir = Path(output_dir)\n\n    make_products(\n        product_generator=data_product_generator,\n        data_dirs=input_dirs,\n        n_procs=n_procs,\n        data_products_fname=data_products_fname,\n    )\n\n    products_dir = _mkdir(output_dir.joinpath('products'))\n\n    # Sort products\n    start = time.time()\n    sort_products(\n        data_dirs=input_dirs,\n        output_dir=products_dir,\n        n_procs=n_procs,\n        data_products_fname=data_products_fname,\n    )\n    end = time.time()\n    print(f'Time to sort = {end - start}')\n\n    no_static_assets = (no_static_tables and no_static_histograms and no_static_xy_plots)\n    no_interactive_assets = (no_grafana_dashboard)\n    no_assets = no_static_assets and no_interactive_assets\n\n    if not no_assets:\n        assets_dir = output_dir.joinpath('assets')\n        if not no_interactive_assets:\n            interactive_assets_dir = _mkdir(assets_dir.joinpath('interactive'))\n            if not no_grafana_dashboard:\n                grafana_dir = _mkdir(interactive_assets_dir.joinpath('grafana'))\n                make_grafana_dashboard(\n                    products_dir=products_dir,\n                    output_dir=grafana_dir,\n                    n_procs=n_procs,\n                    protocol=protocol,\n                    server=server,\n                    port=port,\n                )\n\n        if not no_static_assets:\n            static_assets_dir = _mkdir(assets_dir.joinpath('static'))\n            make_tables_and_figures(\n                products_dir=products_dir,\n                output_dir=static_assets_dir,\n                dpi=dpi_static_plots,\n                n_procs=n_procs,\n                no_tables=no_static_tables,\n                no_xy_plots=no_static_xy_plots,\n                no_histograms=no_static_histograms,\n            )\n\n            if not no_include_files:\n                make_include_files(\n                    root_dir=static_assets_dir,\n                    heading_level=2,\n                )\n</code></pre>"},{"location":"reference/trendify/#trendify.make_products","title":"make_products","text":"<pre><code>make_products(\n    product_generator: Callable[[Path], DataProductCollection] | None,\n    data_dirs: List[Path],\n    n_procs: int = 1,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Maps <code>product_generator</code> over <code>dirs_in</code> to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from <code>dir_products</code>. Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the directory from which they were loaded.</p> <p>Parameters:</p> Name Type Description Default <code>product_generator</code> <code>ProductGenerator | None</code> <p>A callable function that returns a list of data products given a working directory.</p> required <code>data_dirs</code> <code>List[Path]</code> <p>Directories over which to map the <code>product_generator</code></p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>data_products_fname</code> <code>str</code> <p>File name to be used for storing generated data products</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_products(\n        product_generator: Callable[[Path], DataProductCollection] | None,\n        data_dirs: List[Path],\n        n_procs: int = 1,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Maps `product_generator` over `dirs_in` to produce data product JSON files in those directories.\n    Sorts the generated data products into a nested file structure starting from `dir_products`.\n    Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the\n    directory from which they were loaded.\n\n    Args:\n        product_generator (ProductGenerator | None): A callable function that returns\n            a list of data products given a working directory.\n        data_dirs (List[Path]): Directories over which to map the `product_generator`\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        data_products_fname (str): File name to be used for storing generated data products\n    \"\"\"\n    sorted_dirs = get_sorted_dirs(dirs=data_dirs)\n\n    if product_generator is None:\n        print('No data product generator provided')\n    else:\n        print('\\n\\n\\nGenerating tagged DataProducts and writing to JSON files...\\n')\n        map_callable(\n            DataProductGenerator(processor=product_generator).process_and_save,\n            sorted_dirs,\n            [data_products_fname]*len(sorted_dirs),\n            n_procs=n_procs,\n        )\n        print('\\nFinished generating tagged DataProducts and writing to JSON files')\n</code></pre>"},{"location":"reference/trendify/#trendify.make_tables_and_figures","title":"make_tables_and_figures","text":"<pre><code>make_tables_and_figures(\n    products_dir: Path,\n    output_dir: Path,\n    dpi: int = 500,\n    n_procs: int = 1,\n    no_tables: bool = False,\n    no_xy_plots: bool = False,\n    no_histograms: bool = False,\n)\n</code></pre> <p>Makes CSV tables and creates plots (using matplotlib).</p> <p>Tags will be processed in parallel and output in nested directory structure under <code>output_dir</code>.</p> <p>Parameters:</p> Name Type Description Default <code>products_dir</code> <code>Path</code> <p>Directory to which the sorted data products will be written</p> required <code>output_dir</code> <code>Path</code> <p>Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables <code>make_tables</code>, <code>make_xy_plots</code>, <code>make_histograms</code> are true.</p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>dpi</code> <code>int = 500</code> <p>Resolution of output plots when using matplotlib  (for <code>make_xy_plots==True</code> and/or <code>make_histograms==True</code>)</p> <code>500</code> <code>no_tables</code> <code>bool</code> <p>Whether or not to collect the  <code>TableEntry</code> products and write them to CSV files (<code>&lt;tag&gt;_melted.csv</code> with <code>&lt;tag&gt;_pivot.csv</code> and <code>&lt;tag&gt;_stats.csv</code> when possible).</p> <code>False</code> <code>no_xy_plots</code> <code>bool</code> <p>Whether or not to plot the <code>XYData</code> products using matplotlib</p> <code>False</code> <code>no_histograms</code> <code>bool</code> <p>Whether or not to generate histograms of the  <code>HistogramEntry</code> products using matplotlib.</p> <code>False</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_tables_and_figures(\n        products_dir: Path,\n        output_dir: Path,\n        dpi: int = 500,\n        n_procs: int = 1,\n        no_tables: bool = False,\n        no_xy_plots: bool = False,\n        no_histograms: bool = False,\n    ):\n    \"\"\"\n    Makes CSV tables and creates plots (using matplotlib).\n\n    Tags will be processed in parallel and output in nested directory structure under `output_dir`.\n\n    Args:\n        products_dir (Path): Directory to which the sorted data products will be written\n        output_dir (Path): Directory to which tables and matplotlib histograms and plots will be written if\n            the appropriate boolean variables `make_tables`, `make_xy_plots`, `make_histograms` are true.\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        dpi (int = 500): Resolution of output plots when using matplotlib \n            (for `make_xy_plots==True` and/or `make_histograms==True`)\n        no_tables (bool): Whether or not to collect the \n            [`TableEntry`][trendify.API.TableEntry] products and write them\n            to CSV files (`&lt;tag&gt;_melted.csv` with `&lt;tag&gt;_pivot.csv` and `&lt;tag&gt;_stats.csv` when possible).\n        no_xy_plots (bool): Whether or not to plot the [`XYData`][trendify.API.XYData] products using matplotlib\n        no_histograms (bool): Whether or not to generate histograms of the \n            [`HistogramEntry`][trendify.API.HistogramEntry] products\n            using matplotlib.\n    \"\"\"\n    if not (no_tables and no_xy_plots and no_histograms):\n        product_dirs = list(products_dir.glob('**/*/'))\n        map_callable(\n            DataProductCollection.process_single_tag_collection,\n            product_dirs,\n            [output_dir]*len(product_dirs),\n            [no_tables]*len(product_dirs),\n            [no_xy_plots]*len(product_dirs),\n            [no_histograms]*len(product_dirs),\n            [dpi]*len(product_dirs),\n            n_procs=n_procs,\n        )\n</code></pre>"},{"location":"reference/trendify/#trendify.sort_products","title":"sort_products","text":"<pre><code>sort_products(\n    data_dirs: List[Path],\n    output_dir: Path,\n    n_procs: int = 1,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Loads the tagged data products from <code>data_dirs</code> and sorts them (by tag) into a nested folder structure rooted at <code>output_dir</code>.</p> <p>Parameters:</p> Name Type Description Default <code>data_dirs</code> <code>List[Path]</code> <p>Directories containing JSON data product files</p> required <code>output_dir</code> <code>Path</code> <p>Directory to which sorted products will be written</p> required <code>data_products_fname</code> <code>str</code> <p>File name in which the data products to be sorted are stored</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def sort_products(\n        data_dirs: List[Path],\n        output_dir: Path,\n        n_procs: int = 1,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Loads the tagged data products from `data_dirs` and sorts them (by tag) into a nested folder structure rooted at `output_dir`.\n\n    Args:\n        data_dirs (List[Path]): Directories containing JSON data product files\n        output_dir (Path): Directory to which sorted products will be written\n        data_products_fname (str): File name in which the data products to be sorted are stored\n    \"\"\"\n    sorted_data_dirs = get_sorted_dirs(dirs=data_dirs)\n\n    print('\\n\\n\\nSorting data by tags')\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    map_callable(\n        DataProductCollection.sort_by_tags_single_directory,\n        sorted_data_dirs,\n        [output_dir]*len(sorted_data_dirs),\n        [data_products_fname]*len(sorted_data_dirs),\n        n_procs=n_procs,\n    )\n\n    print('\\nFinished sorting by tags')\n</code></pre>"},{"location":"reference/trendify/API/","title":"API","text":""},{"location":"reference/trendify/API/#trendify.API","title":"API","text":"<p>Module for generating, sorting, and plotting data products. This uses pydantic dataclasses for JSON serialization to avoid overloading system memory.</p> <p>Some important learning material for pydantic classes and JSON (de)serialization:</p> <ul> <li>Nested Pydantic Models</li> <li>Deserializing Child Classes</li> </ul> <p>Attributes:</p> Name Type Description <code>DATA_PRODUCTS_FNAME_DEFAULT</code> <code>str</code> <p>Hard-coded json file name 'data_products.json'</p>"},{"location":"reference/trendify/API/#trendify.API.DATA_PRODUCTS_FNAME_DEFAULT","title":"DATA_PRODUCTS_FNAME_DEFAULT  <code>module-attribute</code>","text":"<pre><code>DATA_PRODUCTS_FNAME_DEFAULT = 'data_products.json'\n</code></pre> <p>Hard-coded file name for storing data products in batch-processed input directories.</p>"},{"location":"reference/trendify/API/#trendify.API.ProductGenerator","title":"ProductGenerator  <code>module-attribute</code>","text":"<pre><code>ProductGenerator = Callable[[Path], ProductList]\n</code></pre> <p>Callable method type.  Users must provide a <code>ProductGenerator</code> to map over raw data.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Workdir holding raw data (Should be one per run from a batch)</p> required <p>Returns:</p> Type Description <code>ProductList</code> <p>List of data products to be sorted and used to produce assets</p>"},{"location":"reference/trendify/API/#trendify.API.ProductList","title":"ProductList  <code>module-attribute</code>","text":"<pre><code>ProductList = List[SerializeAsAny[InstanceOf[DataProduct]]]\n</code></pre> <p>List of serializable DataProduct or child classes thereof</p>"},{"location":"reference/trendify/API/#trendify.API.Tag","title":"Tag  <code>module-attribute</code>","text":"<pre><code>Tag = Union[Tuple[Hashable, ...], Hashable]\n</code></pre> <p>Determines what types can be used to define a tag</p>"},{"location":"reference/trendify/API/#trendify.API.Tags","title":"Tags  <code>module-attribute</code>","text":"<pre><code>Tags = List[Tag]\n</code></pre> <p>List of tags</p>"},{"location":"reference/trendify/API/#trendify.API.DataProduct","title":"DataProduct  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for data products to be generated and handled.</p> <p>Attributes:</p> Name Type Description <code>product_type</code> <code>str</code> <p>Product type should be the same as the class name. The product type is used to search for products from a DataProductCollection.</p> <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": true,\n  \"description\": \"Base class for data products to be generated and handled.\\n\\nAttributes:\\n    product_type (str): Product type should be the same as the class name.\\n        The product type is used to search for products from a [DataProductCollection][trendify.API.DataProductCollection].\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"tags\"\n  ],\n  \"title\": \"DataProduct\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'allow'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>tags</code>                 (<code>Tags</code>)             </li> <li> <code>metadata</code>                 (<code>dict[str, str]</code>)             </li> <li> <code>product_type</code>                 (<code>str</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>_remove_computed_fields</code> </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.DataProduct.product_type","title":"product_type  <code>pydantic-field</code>","text":"<pre><code>product_type: str\n</code></pre> <p>Returns:</p> Type Description <code>str</code> <p>Product type should be the same as the class name. The product type is used to search for products from a  DataProductCollection.</p>"},{"location":"reference/trendify/API/#trendify.API.DataProduct.__init_subclass__","title":"__init_subclass__","text":"<pre><code>__init_subclass__(**kwargs: Any) -&gt; None\n</code></pre> <p>Registers child subclasses to be able to parse them from JSON file using the  deserialize_child_classes method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def __init_subclass__(cls, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Registers child subclasses to be able to parse them from JSON file using the \n    [deserialize_child_classes][trendify.API.DataProduct.deserialize_child_classes] method\n    \"\"\"\n    super().__init_subclass__(**kwargs)\n    _data_product_subclass_registry[cls.__name__] = cls    \n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProduct.append_to_list","title":"append_to_list","text":"<pre><code>append_to_list(l: List)\n</code></pre> <p>Appends self to list.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>list to which <code>self</code> will be appended</p> required <p>Returns:</p> Type Description <code>Self</code> <p>returns instance of <code>self</code></p> Source code in <code>src/trendify/API.py</code> <pre><code>def append_to_list(self, l: List):\n    \"\"\"\n    Appends self to list.\n\n    Args:\n        l (List): list to which `self` will be appended\n\n    Returns:\n        (Self): returns instance of `self`\n    \"\"\"\n    l.append(self)\n    return self\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProduct.deserialize_child_classes","title":"deserialize_child_classes  <code>classmethod</code>","text":"<pre><code>deserialize_child_classes(key: str, **kwargs)\n</code></pre> <p>Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>json key</p> required <code>kwargs</code> <code>dict</code> <p>json entries stored under given key</p> <code>{}</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef deserialize_child_classes(cls, key: str, **kwargs):\n    \"\"\"\n    Loads json data to pydandic dataclass of whatever DataProduct child time is appropriate\n\n    Args:\n        key (str): json key\n        kwargs (dict): json entries stored under given key\n    \"\"\"\n    type_key = 'product_type'\n    elements = kwargs.get(key, None)\n    if elements:\n        for index in range(len(kwargs[key])):\n            duck_info = kwargs[key][index]\n            if isinstance(duck_info, dict):\n                product_type = duck_info.pop(type_key)\n                duck_type = _data_product_subclass_registry[product_type]\n                kwargs[key][index] = duck_type(**duck_info)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection","title":"DataProductCollection  <code>pydantic-model</code>","text":"<pre><code>DataProductCollection(**kwargs: Any)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>A collection of data products.</p> <p>Use this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc.</p> <p>Attributes:</p> Name Type Description <code>elements</code> <code>ProductList</code> <p>A list of data products.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataProduct\": {\n      \"additionalProperties\": true,\n      \"description\": \"Base class for data products to be generated and handled.\\n\\nAttributes:\\n    product_type (str): Product type should be the same as the class name.\\n        The product type is used to search for products from a [DataProductCollection][trendify.API.DataProductCollection].\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n      \"properties\": {\n        \"tags\": {\n          \"items\": {\n            \"anyOf\": []\n          },\n          \"title\": \"Tags\",\n          \"type\": \"array\"\n        },\n        \"metadata\": {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"default\": {},\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"tags\"\n      ],\n      \"title\": \"DataProduct\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"A collection of data products.\\n\\nUse this class to serialize data products to JSON, de-serialized them from JSON, filter the products, etc.\\n\\nAttributes:\\n    elements (ProductList): A list of data products.\",\n  \"properties\": {\n    \"derived_from\": {\n      \"anyOf\": [\n        {\n          \"format\": \"path\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Derived From\"\n    },\n    \"elements\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/DataProduct\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Elements\"\n    }\n  },\n  \"title\": \"DataProductCollection\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>derived_from</code>                 (<code>Path | None</code>)             </li> <li> <code>elements</code>                 (<code>ProductList | None</code>)             </li> </ul> Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(self, **kwargs: Any):\n    DataProduct.deserialize_child_classes(key='elements', **kwargs)                \n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.add_products","title":"add_products","text":"<pre><code>add_products(*products: DataProduct)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>products</code> <code>Tuple[DataProduct | ProductList, ...]</code> <p>Products or lists of products to be appended to collection elements.</p> <code>()</code> Source code in <code>src/trendify/API.py</code> <pre><code>def add_products(self, *products: DataProduct):\n    \"\"\"\n    Args:\n        products (Tuple[DataProduct|ProductList, ...]): Products or lists of products to be\n            appended to collection elements.  \n    \"\"\"\n    self.elements.extend(flatten(products))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.collect_from_all_jsons","title":"collect_from_all_jsons  <code>classmethod</code>","text":"<pre><code>collect_from_all_jsons(*dirs: Path, recursive: bool = False)\n</code></pre> <p>Loads all products from JSONs in the given list of directories. If recursive is set to <code>True</code>, the directories will be searched recursively  (this could lead to double counting if you pass in subdirectories of a parent).</p> <p>Parameters:</p> Name Type Description Default <code>dirs</code> <code>Tuple[Path, ...]</code> <p>Directories from which to load data product JSON files.</p> <code>()</code> <code>recursive</code> <code>bool</code> <p>whether or not to search each of the provided directories recursively for  data product json files.</p> <code>False</code> <p>Returns:</p> Type Description <code>Type[Self] | None</code> <p>Data product collection if JSON files are found. Otherwise, returns None if no product JSON files were found.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef collect_from_all_jsons(cls, *dirs: Path, recursive: bool = False):\n    \"\"\"\n    Loads all products from JSONs in the given list of directories.  \n    If recursive is set to `True`, the directories will be searched recursively \n    (this could lead to double counting if you pass in subdirectories of a parent).\n\n    Args:\n        dirs (Tuple[Path, ...]): Directories from which to load data product JSON files.\n        recursive (bool): whether or not to search each of the provided directories recursively for \n            data product json files.\n\n    Returns:\n        (Type[Self] | None): Data product collection if JSON files are found.  \n            Otherwise, returns None if no product JSON files were found.\n    \"\"\"\n    if not recursive:\n        jsons: List[Path] = list(flatten(chain(list(d.glob('*.json')) for d in dirs)))\n    else:\n        jsons: List[Path] = list(flatten(chain(list(d.glob(f'**/*.json')) for d in dirs)))\n    if jsons:\n        return cls.union(\n            *tuple(\n                [\n                    cls.model_validate_json(p.read_text())\n                    for p in jsons\n                ]\n            )\n        )\n    else:\n        return None\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.drop_products","title":"drop_products","text":"<pre><code>drop_products(tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]\n</code></pre> <p>Removes products matching <code>tag</code> and/or <code>object_type</code> from collection elements.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag | None</code> <p>Tag for which data products should be dropped</p> <code>None</code> <code>object_type</code> <code>Type | None</code> <p>Type of data product to drop</p> <code>None</code> <p>Returns:</p> Type Description <code>DataProductCollection</code> <p>A new collection from which matching elements have been dropped.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def drop_products(self, tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]:\n    \"\"\"\n    Removes products matching `tag` and/or `object_type` from collection elements.\n\n    Args:\n        tag (Tag | None): Tag for which data products should be dropped\n        object_type (Type | None): Type of data product to drop\n\n    Returns:\n        (DataProductCollection): A new collection from which matching elements have been dropped.\n    \"\"\"\n    match_key = tag is None, object_type is None\n    match match_key:\n        case (True, True):\n            return type(self)(elements=self.elements)\n        case (True, False):\n            return type(self)(elements=[e for e in self.elements if not isinstance(e, object_type)])\n        case (False, True):\n            return type(self)(elements=[e for e in self.elements if not tag in e.tags])\n        case (False, False):\n            return type(self)(elements=[e for e in self.elements if not (tag in e.tags and isinstance(e, object_type))])\n        case _:\n            raise ValueError('Something is wrong with match statement')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.from_iterable","title":"from_iterable  <code>classmethod</code>","text":"<pre><code>from_iterable(*products: Tuple[ProductList, ...])\n</code></pre> <p>Returns a new instance containing all of the products provided in the <code>*products</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>products</code> <code>Tuple[ProductList, ...]</code> <p>Lists of data products to combine into a collection</p> <code>()</code> <p>Returns:</p> Type Description <code>cls</code> <p>A data product collection containing all of the provided products in the <code>*products</code> argument.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_iterable(cls, *products: Tuple[ProductList, ...]):\n    \"\"\"\n    Returns a new instance containing all of the products provided in the `*products` argument.\n\n    Args:\n        products (Tuple[ProductList, ...]): Lists of data products to combine into a collection\n\n    Returns:\n        (cls): A data product collection containing all of the provided products in the `*products` argument.\n    \"\"\"\n    return cls(elements=list(flatten(products)))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.get_products","title":"get_products","text":"<pre><code>get_products(tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]\n</code></pre> <p>Returns a new collection containing products matching <code>tag</code> and/or <code>object_type</code>. Both <code>tag</code> and <code>object_type</code> default to <code>None</code> which matches all products.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag | None</code> <p>Tag of data products to be kept.  <code>None</code> matches all products.</p> <code>None</code> <code>object_type</code> <code>Type | None</code> <p>Type of data product to keep.  <code>None</code> matches all products.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataProductCollection</code> <p>A new collection containing matching elements.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_products(self, tag: Tag | None = None, object_type: Type[R] | None = None) -&gt; Self[R]:\n    \"\"\"\n    Returns a new collection containing products matching `tag` and/or `object_type`.\n    Both `tag` and `object_type` default to `None` which matches all products.\n\n    Args:\n        tag (Tag | None): Tag of data products to be kept.  `None` matches all products.\n        object_type (Type | None): Type of data product to keep.  `None` matches all products.\n\n    Returns:\n        (DataProductCollection): A new collection containing matching elements.\n    \"\"\"\n    match_key = tag is None, object_type is None\n    match match_key:\n        case (True, True):\n            return type(self)(elements=self.elements)\n        case (True, False):\n            return type(self)(elements=[e for e in self.elements if isinstance(e, object_type)])\n        case (False, True):\n            return type(self)(elements=[e for e in self.elements if tag in e.tags])\n        case (False, False):\n            return type(self)(elements=[e for e in self.elements if tag in e.tags and isinstance(e, object_type)])\n        case _:\n            raise ValueError('Something is wrong with match statement')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.get_tags","title":"get_tags","text":"<pre><code>get_tags(data_product_type: Type[DataProduct] | None = None) -&gt; set\n</code></pre> <p>Gets the tags related to a given type of <code>DataProduct</code>.  Parent classes will match all child class types.</p> <p>Parameters:</p> Name Type Description Default <code>data_product_type</code> <code>Type[DataProduct] | None</code> <p>type for which you want to get the list of tags</p> <code>None</code> <p>Returns:</p> Type Description <code>set</code> <p>set of tags applying to the given <code>data_product_type</code>.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_tags(self, data_product_type: Type[DataProduct] | None = None) -&gt; set:\n    \"\"\"\n    Gets the tags related to a given type of `DataProduct`.  Parent classes will match all child class types.\n\n    Args:\n        data_product_type (Type[DataProduct] | None): type for which you want to get the list of tags\n\n    Returns:\n        (set): set of tags applying to the given `data_product_type`.\n    \"\"\"\n    tags = []\n    for e in flatten(self.elements):\n        if data_product_type is None or isinstance(e, data_product_type):\n            for t in e.tags:\n                tags.append(t)\n    return set(tags)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.make_grafana_panels","title":"make_grafana_panels  <code>classmethod</code>","text":"<pre><code>make_grafana_panels(dir_in: Path, panel_dir: Path, server_path: str)\n</code></pre> <p>Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted.</p> <p>Parameters:</p> Name Type Description Default <code>dir_in</code> <code>Path</code> <p>Directory from which to read data products (should be sorted first)</p> required <code>panel_dir</code> <code>Path</code> <p>Where to put the panel information</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef make_grafana_panels(\n        cls,\n        dir_in: Path,\n        panel_dir: Path,\n        server_path: str,\n    ):\n    \"\"\"\n    Processes collection of elements corresponding to a single tag.\n    This method should be called on a directory containing jsons for which the products have been\n    sorted.\n\n    Args:\n        dir_in (Path): Directory from which to read data products (should be sorted first)\n        panel_dir (Path): Where to put the panel information\n    \"\"\"\n\n    collection = cls.collect_from_all_jsons(dir_in)\n    panel_dir.mkdir(parents=True, exist_ok=True)\n\n    if collection is not None:\n        for tag in collection.get_tags():\n            dot_tag = '.'.join([str(t) for t in tag]) if should_be_flattened(tag) else tag\n            underscore_tag = '_'.join([str(t) for t in tag]) if should_be_flattened(tag) else tag\n\n            table_entries: List[TableEntry] = collection.get_products(tag=tag, object_type=TableEntry).elements\n\n            if table_entries:\n                print(f'\\n\\nMaking tables for {tag = }\\n')\n                panel = gapi.Panel(\n                    title=str(tag).capitalize() if isinstance(tag, str) else ' '.join([str(t).title() for t in tag]),\n                    targets=[\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'TableEntry']),\n                            uql=UQL_TableEntry,\n                        )\n                    ],\n                    type='table',\n                )\n                panel_dir.joinpath(underscore_tag + '_table_panel.json').write_text(panel.model_dump_json())\n                print(f'\\nFinished tables for {tag = }\\n')\n\n            traces: List[Trace2D] = collection.get_products(tag=tag, object_type=Trace2D).elements\n            points: List[Point2D] = collection.get_products(tag=tag, object_type=Point2D).elements\n\n            if points or traces:\n                print(f'\\n\\nMaking xy chart for {tag = }\\n')\n                panel = gapi.Panel(\n                    targets=[\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'Point2D']),\n                            uql=UQL_Point2D,\n                            refId='A',\n                        ),\n                        gapi.Target(\n                            datasource=gapi.DataSource(),\n                            url='/'.join([server_path.strip('/'), dot_tag, 'Trace2D']),\n                            uql=UQL_Trace2D,\n                            refId='B',\n                        )\n                    ],\n                    transformations=[\n                        gapi.Merge(),\n                        gapi.PartitionByValues.from_fields(\n                            fields='label',\n                            keep_fields=False,\n                            fields_as_labels=False,\n                        )\n                    ],\n                    type='xychart',\n                )\n                panel_dir.joinpath(underscore_tag + '_xy_panel.json').write_text(panel.model_dump_json())\n                print(f'\\nFinished xy plot for {tag = }\\n')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.process_single_tag_collection","title":"process_single_tag_collection  <code>classmethod</code>","text":"<pre><code>process_single_tag_collection(\n    dir_in: Path, dir_out: Path, no_tables: bool, no_xy_plots: bool, no_histograms: bool, dpi: int\n)\n</code></pre> <p>Processes collection of elements corresponding to a single tag. This method should be called on a directory containing jsons for which the products have been sorted.</p> <p>Parameters:</p> Name Type Description Default <code>dir_in</code> <code>Path</code> <p>Input directory for loading assets</p> required <code>dir_out</code> <code>Path</code> <p>Output directory for assets</p> required <code>no_tables</code> <code>bool</code> <p>Suppresses table asset creation</p> required <code>no_xy_plots</code> <code>bool</code> <p>Suppresses xy plot asset creation</p> required <code>no_histograms</code> <code>bool</code> <p>Suppresses histogram asset creation</p> required <code>dpi</code> <code>int</code> <p>Sets resolution of asset output</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef process_single_tag_collection(\n        cls,\n        dir_in: Path,\n        dir_out: Path,\n        no_tables: bool,\n        no_xy_plots: bool,\n        no_histograms: bool,\n        dpi: int,\n    ):\n    \"\"\"\n    Processes collection of elements corresponding to a single tag.\n    This method should be called on a directory containing jsons for which the products have been\n    sorted.\n\n    Args:\n        dir_in (Path):  Input directory for loading assets\n        dir_out (Path):  Output directory for assets\n        no_tables (bool):  Suppresses table asset creation\n        no_xy_plots (bool):  Suppresses xy plot asset creation\n        no_histograms (bool):  Suppresses histogram asset creation\n        dpi (int):  Sets resolution of asset output\n    \"\"\"\n\n    collection = cls.collect_from_all_jsons(dir_in)\n\n    if collection is not None:\n\n        [tag] = collection.get_tags()\n\n        if not no_tables:\n\n            table_entries: List[TableEntry] = collection.get_products(tag=tag, object_type=TableEntry).elements\n\n            if table_entries:\n                print(f'\\n\\nMaking tables for {tag = }\\n')\n                TableBuilder.process_table_entries(\n                    tag=tag,\n                    table_entries=table_entries,\n                    out_dir=dir_out\n                )\n                print(f'\\nFinished tables for {tag = }\\n')\n\n        if not no_xy_plots:\n\n            traces: List[Trace2D] = collection.get_products(tag=tag, object_type=Trace2D).elements\n            points: List[Point2D] = collection.get_products(tag=tag, object_type=Point2D).elements\n\n            if points or traces:\n                print(f'\\n\\nMaking xy plot for {tag = }\\n')\n                XYDataPlotter.handle_points_and_traces(\n                    tag=tag,\n                    points=points,\n                    traces=traces,\n                    dir_out=dir_out,\n                    dpi=dpi,\n                )\n                print(f'\\nFinished xy plot for {tag = }\\n')\n\n        if not no_histograms:\n            histogram_entries: List[HistogramEntry] = collection.get_products(tag=tag, object_type=HistogramEntry).elements\n\n            if histogram_entries:\n                print(f'\\n\\nMaking histogram for {tag = }\\n')\n                Histogrammer.handle_histogram_entries(\n                    tag=tag,\n                    histogram_entries=histogram_entries,\n                    dir_out=dir_out,\n                    dpi=dpi\n                )\n                print(f'\\nFinished histogram for {tag = }\\n')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.sort_by_tags","title":"sort_by_tags  <code>classmethod</code>","text":"<pre><code>sort_by_tags(\n    dirs_in: List[Path], dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT\n)\n</code></pre> <p>Loads the data product JSON files from <code>dirs_in</code> sorts the products. Sorted products are written to smaller files in a nested directory structure under <code>dir_out</code>. A nested directory structure is generated according to the data tags. Resulting product files are named according to the directory from which they were originally loaded.</p> <p>Parameters:</p> Name Type Description Default <code>dirs_in</code> <code>List[Path]</code> <p>Directories from which the data product JSON files are to be loaded.</p> required <code>dir_out</code> <code>Path</code> <p>Directory to which the sorted data products will be written into a  nested folder structure generated according to the data tags.</p> required <code>data_products_fname</code> <code>str</code> <p>Name of data products file</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef sort_by_tags(cls, dirs_in: List[Path], dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT):\n    \"\"\"\n    Loads the data product JSON files from `dirs_in` sorts the products.\n    Sorted products are written to smaller files in a nested directory structure under `dir_out`.\n    A nested directory structure is generated according to the data tags.\n    Resulting product files are named according to the directory from which they were originally loaded.\n\n    Args:\n        dirs_in (List[Path]): Directories from which the data product JSON files are to be loaded.\n        dir_out (Path): Directory to which the sorted data products will be written into a \n            nested folder structure generated according to the data tags.\n        data_products_fname (str): Name of data products file\n    \"\"\"\n    dirs_in = list(dirs_in)\n    dirs_in.sort()\n    len_dirs = len(dirs_in)\n    for n, dir_in in enumerate(dirs_in):\n        print(f'Sorting tagged data from dir {n}/{len_dirs}', end=f'\\r')\n        cls.sort_by_tags_single_directory(dir_in=dir_in, dir_out=dir_out, data_products_fname=data_products_fname)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.sort_by_tags_single_directory","title":"sort_by_tags_single_directory  <code>classmethod</code>","text":"<pre><code>sort_by_tags_single_directory(\n    dir_in: Path, dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT\n)\n</code></pre> <p>Loads the data product JSON files from <code>dir_in</code> and sorts the products. Sorted products are written to smaller files in a nested directory structure under <code>dir_out</code>. A nested directory structure is generated according to the data tags. Resulting product files are named according to the directory from which they were originally loaded.</p> <p>Parameters:</p> Name Type Description Default <code>dirs_in</code> <code>List[Path]</code> <p>Directories from which the data product JSON files are to be loaded.</p> required <code>dir_out</code> <code>Path</code> <p>Directory to which the sorted data products will be written into a  nested folder structure generated according to the data tags.</p> required <code>data_products_fname</code> <code>str</code> <p>Name of data products file</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef sort_by_tags_single_directory(cls, dir_in: Path, dir_out: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT):\n    \"\"\"\n    Loads the data product JSON files from `dir_in` and sorts the products.\n    Sorted products are written to smaller files in a nested directory structure under `dir_out`.\n    A nested directory structure is generated according to the data tags.\n    Resulting product files are named according to the directory from which they were originally loaded.\n\n    Args:\n        dirs_in (List[Path]): Directories from which the data product JSON files are to be loaded.\n        dir_out (Path): Directory to which the sorted data products will be written into a \n            nested folder structure generated according to the data tags.\n        data_products_fname (str): Name of data products file\n    \"\"\"\n    products_file = dir_in.joinpath(data_products_fname)\n    if products_file.exists():\n        print(f'Sorting results from {dir_in = }')\n        collection = DataProductCollection.model_validate_json(dir_in.joinpath(data_products_fname).read_text())\n        collection.derived_from = dir_in\n        tags = collection.get_tags()\n        for tag in tags:\n            sub_collection = collection.get_products(tag=tag)\n            save_dir = dir_out.joinpath(*atleast_1d(tag))\n            save_dir.mkdir(parents=True, exist_ok=True)\n            next_index = get_and_reserve_next_index(save_dir=save_dir, dir_in=dir_in)\n            file = save_dir.joinpath(str(next_index)).with_suffix('.json')\n            file.write_text(sub_collection.model_dump_json())\n    else:\n        print(f'No results found in {dir_in = }')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductCollection.union","title":"union  <code>classmethod</code>","text":"<pre><code>union(*collections: DataProductCollection)\n</code></pre> <p>Aggregates all of the products from multiple collections into a new larger collection.</p> <p>Parameters:</p> Name Type Description Default <code>collections</code> <code>Tuple[DataProductCollection, ...]</code> <p>Data product collections for which the products should be combined into a new collection.</p> <code>()</code> <p>Returns:</p> Type Description <code>Type[Self]</code> <p>A new data product collection containing all products from the provided <code>*collections</code>.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef union(cls, *collections: DataProductCollection):\n    \"\"\"\n    Aggregates all of the products from multiple collections into a new larger collection.\n\n    Args:\n        collections (Tuple[DataProductCollection, ...]): Data product collections\n            for which the products should be combined into a new collection.\n\n    Returns:\n        (Type[Self]): A new data product collection containing all products from\n            the provided `*collections`.\n    \"\"\"\n    return cls(elements=list(flatten(chain(c.elements for c in collections))))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductGenerator","title":"DataProductGenerator","text":"<pre><code>DataProductGenerator(processor: ProductGenerator)\n</code></pre> <p>A wrapper for saving the data products generated by a user defined function</p> <p>Parameters:</p> Name Type Description Default <code>processor</code> <code>ProductGenerator</code> <p>A callable that receives a working directory and returns a list of data products.</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(self, processor: ProductGenerator):\n    self._processor = processor\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.DataProductGenerator.process_and_save","title":"process_and_save","text":"<pre><code>process_and_save(workdir: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT)\n</code></pre> <p>Runs the user-defined processor method stored at instantiation.</p> <p>Saves the returned products to a JSON file in the same directory.</p> <p>Parameters:</p> Name Type Description Default <code>workdir</code> <code>Path</code> <p>working directory on which to run the processor method.</p> required <code>data_products_fname</code> <code>str</code> <p>Name of data products file</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def process_and_save(self, workdir: Path, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT):\n    \"\"\"\n    Runs the user-defined processor method stored at instantiation.\n\n    Saves the returned products to a JSON file in the same directory.\n\n    Args:\n        workdir (Path): working directory on which to run the processor method.\n        data_products_fname (str): Name of data products file\n    \"\"\"\n\n    print(f'Processing {workdir = } with {self._processor = }')\n    collection = DataProductCollection.from_iterable(self._processor(workdir))\n    if collection.elements:\n        workdir.mkdir(exist_ok=True, parents=True)\n        workdir.joinpath(data_products_fname).write_text(collection.model_dump_json())\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Format2D","title":"Format2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Formatting data for matplotlib figure and axes</p> <p>Attributes:</p> Name Type Description <code>title_fig</code> <code>Optional[str]</code> <p>Sets figure title</p> <code>title_legend</code> <code>Optional[str]</code> <p>Sets legend title</p> <code>title_ax</code> <code>Optional[str]</code> <p>Sets axis title</p> <code>label_x</code> <code>Optional[str]</code> <p>Sets x-axis label</p> <code>label_y</code> <code>Optional[str]</code> <p>Sets y-axis label</p> <code>lim_x_min</code> <code>float | str | None</code> <p>Sets x-axis lower bound</p> <code>lim_x_max</code> <code>float | str | None</code> <p>Sets x-axis upper bound</p> <code>lim_y_min</code> <code>float | str | None</code> <p>Sets y-axis lower bound</p> <code>lim_y_max</code> <code>float | str | None</code> <p>Sets y-axis upper bound</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n  \"properties\": {\n    \"title_fig\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Fig\"\n    },\n    \"title_legend\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Legend\"\n    },\n    \"title_ax\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title Ax\"\n    },\n    \"label_x\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label X\"\n    },\n    \"label_y\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label Y\"\n    },\n    \"lim_x_min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim X Min\"\n    },\n    \"lim_x_max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim X Max\"\n    },\n    \"lim_y_min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim Y Min\"\n    },\n    \"lim_y_max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lim Y Max\"\n    }\n  },\n  \"title\": \"Format2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>title_fig</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>title_legend</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>title_ax</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>label_x</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>label_y</code>                 (<code>Optional[str] | None</code>)             </li> <li> <code>lim_x_min</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_x_max</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_y_min</code>                 (<code>float | str | None</code>)             </li> <li> <code>lim_y_max</code>                 (<code>float | str | None</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.Format2D.union_from_iterable","title":"union_from_iterable  <code>classmethod</code>","text":"<pre><code>union_from_iterable(format2ds: Iterable[Format2D])\n</code></pre> <p>Gets the most inclusive format object (in terms of limits) from a list of <code>Format2D</code> objects. Requires that the label and title fields are identical for all format objects in the list.</p> <p>Parameters:</p> Name Type Description Default <code>format2ds</code> <code>Iterable[Format2D]</code> <p>Iterable of <code>Format2D</code> objects.</p> required <p>Returns:</p> Type Description <code>Format2D</code> <p>Single format object from list of objects.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef union_from_iterable(cls, format2ds: Iterable[Format2D]):\n    \"\"\"\n    Gets the most inclusive format object (in terms of limits) from a list of `Format2D` objects.\n    Requires that the label and title fields are identical for all format objects in the list.\n\n    Args:\n        format2ds (Iterable[Format2D]): Iterable of `Format2D` objects.\n\n    Returns:\n        (Format2D): Single format object from list of objects.\n\n    \"\"\"\n    formats = list(set(format2ds) - {None})\n    [title_fig] = set(i.title_fig for i in formats if i is not None)\n    [title_legend] = set(i.title_legend for i in formats if i is not None)\n    [title_ax] = set(i.title_ax for i in formats if i is not None)\n    [label_x] = set(i.label_x for i in formats if i is not None)\n    [label_y] = set(i.label_y for i in formats if i is not None)\n    x_min = [i.lim_x_min for i in formats if i.lim_x_min is not None]\n    x_max = [i.lim_x_max for i in formats if i.lim_x_max is not None]\n    y_min = [i.lim_y_min for i in formats if i.lim_y_min is not None]\n    y_max = [i.lim_y_max for i in formats if i.lim_y_max is not None]\n    lim_x_min = np.min(x_min) if len(x_min) &gt; 0 else None\n    lim_x_max = np.max(x_max) if len(x_max) &gt; 0 else None\n    lim_y_min = np.min(y_min) if len(y_min) &gt; 0 else None\n    lim_y_max = np.max(y_max) if len(y_max) &gt; 0 else None\n\n    return cls(\n        title_fig=title_fig,\n        title_legend=title_legend,\n        title_ax=title_ax,\n        label_x=label_x,\n        label_y=label_y,\n        lim_x_min=lim_x_min,\n        lim_x_max=lim_x_max,\n        lim_y_min=lim_y_min,\n        lim_y_max=lim_y_max,\n    )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.HashableBase","title":"HashableBase  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines a base for hashable pydantic data classes so that they can be reduced to a minimal set through type-casting.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Defines a base for hashable pydantic data classes so that they can be reduced to a minimal set through type-casting.\",\n  \"properties\": {},\n  \"title\": \"HashableBase\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.HashableBase.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> <p>Defines hash function</p> Source code in <code>src/trendify/API.py</code> <pre><code>def __hash__(self):\n    \"\"\"\n    Defines hash function\n    \"\"\"\n    return hash((type(self),) + tuple(self.__dict__.values()))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.HistogramEntry","title":"HistogramEntry  <code>pydantic-model</code>","text":"<p>               Bases: <code>PlottableData2D</code></p> <p>Use this class to specify a value to be collected into a matplotlib histogram.</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> <code>value</code> <code>float | str</code> <p>Value to be binned</p> <code>style</code> <code>HistogramStyle</code> <p>Style of histogram display</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"HistogramStyle\": {\n      \"description\": \"Label and style data for generating histogram bars\\n\\nAttributes:\\n    color (str): Color of bars\\n    label (str|None): Legend entry\\n    histtype (str): Histogram type corresponding to matplotlib argument of same name\\n    alpha_edge (float): Opacity of bar edge\\n    alpha_face (float): Opacity of bar face\\n    linewidth (float): Line width of bar outline\\n    bins (int | list[int] | Tuple[int] | NDArray[Shape[\\\"*\\\"], int] | None): Number of bins (see [matplotlib docs][matplotlib.pyplot.hist])\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"histtype\": {\n          \"default\": \"stepfilled\",\n          \"title\": \"Histtype\",\n          \"type\": \"string\"\n        },\n        \"alpha_edge\": {\n          \"default\": 1,\n          \"title\": \"Alpha Edge\",\n          \"type\": \"number\"\n        },\n        \"alpha_face\": {\n          \"default\": 0.3,\n          \"title\": \"Alpha Face\",\n          \"type\": \"number\"\n        },\n        \"linewidth\": {\n          \"default\": 2,\n          \"title\": \"Linewidth\",\n          \"type\": \"number\"\n        },\n        \"bins\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"items\": {\n                \"type\": \"integer\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"maxItems\": 1,\n              \"minItems\": 1,\n              \"prefixItems\": [\n                {\n                  \"type\": \"integer\"\n                }\n              ],\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Bins\"\n        }\n      },\n      \"title\": \"HistogramStyle\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Use this class to specify a value to be collected into a matplotlib histogram.\\n\\nAttributes:\\n    tags (Tags): Tags used to sort data products\\n    value (float | str): Value to be binned\\n    style (HistogramStyle): Style of histogram display\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Value\"\n    },\n    \"style\": {\n      \"$ref\": \"#/$defs/HistogramStyle\",\n      \"default\": {\n        \"color\": \"k\",\n        \"label\": null,\n        \"histtype\": \"stepfilled\",\n        \"alpha_edge\": 1.0,\n        \"alpha_face\": 0.3,\n        \"linewidth\": 2.0,\n        \"bins\": null\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"value\"\n  ],\n  \"title\": \"HistogramEntry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>value</code>                 (<code>float | str</code>)             </li> <li> <code>tags</code>                 (<code>Tags</code>)             </li> <li> <code>style</code>                 (<code>HistogramStyle</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.HistogramStyle","title":"HistogramStyle  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Label and style data for generating histogram bars</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of bars</p> <code>label</code> <code>str | None</code> <p>Legend entry</p> <code>histtype</code> <code>str</code> <p>Histogram type corresponding to matplotlib argument of same name</p> <code>alpha_edge</code> <code>float</code> <p>Opacity of bar edge</p> <code>alpha_face</code> <code>float</code> <p>Opacity of bar face</p> <code>linewidth</code> <code>float</code> <p>Line width of bar outline</p> <code>bins</code> <code>int | list[int] | Tuple[int] | NDArray[Shape['*'], int] | None</code> <p>Number of bins (see matplotlib docs)</p> Show JSON schema: <pre><code>{\n  \"description\": \"Label and style data for generating histogram bars\\n\\nAttributes:\\n    color (str): Color of bars\\n    label (str|None): Legend entry\\n    histtype (str): Histogram type corresponding to matplotlib argument of same name\\n    alpha_edge (float): Opacity of bar edge\\n    alpha_face (float): Opacity of bar face\\n    linewidth (float): Line width of bar outline\\n    bins (int | list[int] | Tuple[int] | NDArray[Shape[\\\"*\\\"], int] | None): Number of bins (see [matplotlib docs][matplotlib.pyplot.hist])\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    },\n    \"histtype\": {\n      \"default\": \"stepfilled\",\n      \"title\": \"Histtype\",\n      \"type\": \"string\"\n    },\n    \"alpha_edge\": {\n      \"default\": 1,\n      \"title\": \"Alpha Edge\",\n      \"type\": \"number\"\n    },\n    \"alpha_face\": {\n      \"default\": 0.3,\n      \"title\": \"Alpha Face\",\n      \"type\": \"number\"\n    },\n    \"linewidth\": {\n      \"default\": 2,\n      \"title\": \"Linewidth\",\n      \"type\": \"number\"\n    },\n    \"bins\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"items\": {\n            \"type\": \"integer\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"maxItems\": 1,\n          \"minItems\": 1,\n          \"prefixItems\": [\n            {\n              \"type\": \"integer\"\n            }\n          ],\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Bins\"\n    }\n  },\n  \"title\": \"HistogramStyle\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>label</code>                 (<code>str | None</code>)             </li> <li> <code>histtype</code>                 (<code>str</code>)             </li> <li> <code>alpha_edge</code>                 (<code>float</code>)             </li> <li> <code>alpha_face</code>                 (<code>float</code>)             </li> <li> <code>linewidth</code>                 (<code>float</code>)             </li> <li> <code>bins</code>                 (<code>int | list[int] | Tuple[int] | NDArray[Shape['*'], int] | None</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.HistogramStyle.as_plot_kwargs","title":"as_plot_kwargs","text":"<pre><code>as_plot_kwargs()\n</code></pre> <p>Returns:</p> Type Description <code>dict</code> <p>kwargs for matplotlib <code>hist</code> method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_plot_kwargs(self):\n    \"\"\"\n    Returns:\n        (dict): kwargs for matplotlib `hist` method\n    \"\"\"\n    return {\n        'facecolor': (self.color, self.alpha_face),\n        'edgecolor': (self.color, self.alpha_edge),\n        'linewidth': self.linewidth,\n        'label': self.label,\n        'histtype': self.histtype,\n        'bins': self.bins,\n    }\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Histogrammer","title":"Histogrammer","text":"<pre><code>Histogrammer(in_dirs: List[Path], out_dir: Path, dpi: int)\n</code></pre> <p>Class for loading data products and histogramming the <code>HistogramEntry</code>s</p> <p>Parameters:</p> Name Type Description Default <code>in_dirs</code> <code>List[Path]</code> <p>Directories from which the data products are to be loaded.</p> required <code>out_dir</code> <code>Path</code> <p>Directory to which the generated histogram will be stored</p> required <code>dpi</code> <code>int</code> <p>resolution of plot</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(\n        self,\n        in_dirs: List[Path],\n        out_dir: Path,\n        dpi: int,\n    ):\n    self.in_dirs = in_dirs\n    self.out_dir = out_dir\n    self.dpi = dpi\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Histogrammer.handle_histogram_entries","title":"handle_histogram_entries  <code>classmethod</code>","text":"<pre><code>handle_histogram_entries(\n    tag: Tag, histogram_entries: List[HistogramEntry], dir_out: Path, dpi: int\n)\n</code></pre> <p>Histograms the provided entries. Formats and saves the figure.  Closes the figure.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>Tag used to filter the loaded data products</p> required <code>histogram_entries</code> <code>List[HistogramEntry]</code> <p>A list of <code>HistogramEntry</code>s</p> required <code>dir_out</code> <code>Path</code> <p>Directory to which the generated histogram will be stored</p> required <code>dpi</code> <code>int</code> <p>resolution of plot</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef handle_histogram_entries(\n        cls, \n        tag: Tag, \n        histogram_entries: List[HistogramEntry],\n        dir_out: Path,\n        dpi: int,\n    ):\n    \"\"\"\n    Histograms the provided entries. Formats and saves the figure.  Closes the figure.\n\n    Args:\n        tag (Tag): Tag used to filter the loaded data products\n        histogram_entries (List[HistogramEntry]): A list of [`HistogramEntry`][trendify.API.HistogramEntry]s\n        dir_out (Path): Directory to which the generated histogram will be stored\n        dpi (int): resolution of plot\n    \"\"\"\n    saf = SingleAxisFigure.new(tag=tag)\n\n    histogram_styles = set([h.style for h in histogram_entries])\n    for s in histogram_styles:\n        matching_entries = [e for e in histogram_entries if e.style == s]\n        values = [e.value for e in matching_entries]\n        if s is not None:\n            saf.ax.hist(values, **s.as_plot_kwargs())\n        else:\n            saf.ax.hist(values)\n\n    try:\n        format2d_set = set([h.format2d for h in histogram_entries]) - {None}\n        [format2d] = format2d_set\n        saf.apply_format(format2d=format2d)\n    except:\n        print(f'Format not applied to {save_path  = } multiple entries conflict for given tag:\\n\\t{format2d_set = }')\n    save_path = dir_out.joinpath(*tuple(atleast_1d(tag))).with_suffix('.jpg')\n    save_path.parent.mkdir(exist_ok=True, parents=True)\n    print(f'Saving to {save_path}')\n    saf.savefig(save_path, dpi=dpi)\n    del saf\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Histogrammer.plot","title":"plot","text":"<pre><code>plot(tag: Tag, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT)\n</code></pre> <p>Generates a histogram by loading data from stored <code>in_dirs</code> and saves the plot to <code>out_dir</code> directory. A nested folder structure will be created if the provided <code>tag</code> is a tuple. In that case, the last tag item (with an appropriate suffix) will be used for the file name.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>Tag used to filter the loaded data products</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def plot(\n        self,\n        tag: Tag,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Generates a histogram by loading data from stored `in_dirs` and saves the plot to `out_dir` directory.\n    A nested folder structure will be created if the provided `tag` is a tuple.  \n    In that case, the last tag item (with an appropriate suffix) will be used for the file name.\n\n    Args:\n        tag (Tag): Tag used to filter the loaded data products\n    \"\"\"\n    print(f'Making histogram plot for {tag = }')\n\n    histogram_entries: List[HistogramEntry] = []\n    for directory in self.in_dirs:\n        collection = DataProductCollection.model_validate_json(directory.joinpath(data_products_fname).read_text())\n        histogram_entries.extend(collection.get_products(tag=tag, object_type=HistogramEntry).elements)\n\n    self.handle_histogram_entries(\n        tag=tag,\n        histogram_entries=histogram_entries,\n        dir_out=self.out_dir,\n        dpi=self.dpi,\n    )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Marker","title":"Marker  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Defines marker for scattering to matplotlib</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of line</p> <code>size</code> <code>float</code> <p>Line width</p> <code>alpha</code> <code>float</code> <p>Opacity from 0 to 1 (inclusive)</p> <code>zorder</code> <code>float</code> <p>Prioritization </p> <code>label</code> <code>Union[str, None]</code> <p>Legend label</p> <code>symbol</code> <code>str</code> <p>Matplotlib symbol string</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"default\": 5,\n      \"title\": \"Size\",\n      \"type\": \"number\"\n    },\n    \"alpha\": {\n      \"default\": 1,\n      \"title\": \"Alpha\",\n      \"type\": \"number\"\n    },\n    \"zorder\": {\n      \"default\": 0,\n      \"title\": \"Zorder\",\n      \"type\": \"number\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    },\n    \"symbol\": {\n      \"default\": \".\",\n      \"title\": \"Symbol\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"Marker\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>size</code>                 (<code>float</code>)             </li> <li> <code>alpha</code>                 (<code>float</code>)             </li> <li> <code>zorder</code>                 (<code>float</code>)             </li> <li> <code>label</code>                 (<code>str | None</code>)             </li> <li> <code>symbol</code>                 (<code>str</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.Marker.as_scatter_plot_kwargs","title":"as_scatter_plot_kwargs","text":"<pre><code>as_scatter_plot_kwargs()\n</code></pre> <p>Returns:</p> Type Description <code>dict</code> <p>dictionary of <code>kwargs</code> for matplotlib scatter</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_scatter_plot_kwargs(self):\n    \"\"\"\n    Returns:\n        (dict): dictionary of `kwargs` for [matplotlib scatter][matplotlib.axes.Axes.scatter]\n    \"\"\"\n    return {\n        'marker': self.symbol,\n        'c': self.color,\n        's': self.size,\n        'alpha': self.alpha,\n        'zorder': self.zorder,\n        'label': self.label,\n        'marker': self.symbol,\n    }\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Marker.from_pen","title":"from_pen  <code>classmethod</code>","text":"<pre><code>from_pen(pen: Pen, symbol: str = '.')\n</code></pre> <p>Converts Pen to marker with the option to specify a symbol</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_pen(\n        cls,\n        pen: Pen,\n        symbol: str = '.',\n    ):\n    \"\"\"\n    Converts Pen to marker with the option to specify a symbol\n    \"\"\"\n    return cls(symbol=symbol, **pen.model_dump())\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Pen","title":"Pen  <code>pydantic-model</code>","text":"<p>               Bases: <code>HashableBase</code></p> <p>Defines the pen drawing to matplotlib.</p> <p>Attributes:</p> Name Type Description <code>color</code> <code>str</code> <p>Color of line</p> <code>size</code> <code>float</code> <p>Line width</p> <code>alpha</code> <code>float</code> <p>Opacity from 0 to 1 (inclusive)</p> <code>zorder</code> <code>float</code> <p>Prioritization </p> <code>label</code> <code>Union[str, None]</code> <p>Legend label</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines the pen drawing to matplotlib.\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\",\n  \"properties\": {\n    \"color\": {\n      \"default\": \"k\",\n      \"title\": \"Color\",\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"default\": 1,\n      \"title\": \"Size\",\n      \"type\": \"number\"\n    },\n    \"alpha\": {\n      \"default\": 1,\n      \"title\": \"Alpha\",\n      \"type\": \"number\"\n    },\n    \"zorder\": {\n      \"default\": 0,\n      \"title\": \"Zorder\",\n      \"type\": \"number\"\n    },\n    \"label\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Label\"\n    }\n  },\n  \"title\": \"Pen\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>color</code>                 (<code>str</code>)             </li> <li> <code>size</code>                 (<code>float</code>)             </li> <li> <code>alpha</code>                 (<code>float</code>)             </li> <li> <code>zorder</code>                 (<code>float</code>)             </li> <li> <code>label</code>                 (<code>Union[str, None]</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.Pen.as_scatter_plot_kwargs","title":"as_scatter_plot_kwargs","text":"<pre><code>as_scatter_plot_kwargs()\n</code></pre> <p>Returns kwargs dictionary for passing to matplotlib plot method</p> Source code in <code>src/trendify/API.py</code> <pre><code>def as_scatter_plot_kwargs(self):\n    \"\"\"\n    Returns kwargs dictionary for passing to [matplotlib plot][matplotlib.axes.Axes.plot] method\n    \"\"\"\n    return {\n        'color': self.color,\n        'linewidth': self.size,\n        'alpha': self.alpha,\n        'zorder': self.zorder,\n        'label': self.label,\n    }\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.PlottableData2D","title":"PlottableData2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataProduct</code></p> <p>Base class for children of DataProduct to be plotted ax xy data on a 2D plot</p> <p>Attributes:</p> Name Type Description <code>format2d</code> <code>Format2D | None</code> <p>Format to apply to plot</p> <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": true,\n  \"description\": \"Base class for children of DataProduct to be plotted ax xy data on a 2D plot\\n\\nAttributes:\\n    format2d (Format2D|None): Format to apply to plot\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"tags\"\n  ],\n  \"title\": \"PlottableData2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>format2d</code>                 (<code>Format2D | None</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.Point2D","title":"Point2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>XYData</code></p> <p>Defines a point to be scattered onto xy plot.</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.        </p> <code>x</code> <code>float | str</code> <p>X value for the point.</p> <code>y</code> <code>float | str</code> <p>Y value for the point.</p> <code>marker</code> <code>Marker | None</code> <p>Style and label information for scattering points to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"Marker\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 5,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"symbol\": {\n          \"default\": \".\",\n          \"title\": \"Symbol\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Marker\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"Defines a point to be scattered onto xy plot.\\n\\nAttributes:\\n    tags (Tags): Tags to be used for sorting data.        \\n    x (float | str): X value for the point.\\n    y (float | str): Y value for the point.\\n    marker (Marker | None): Style and label information for scattering points to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"x\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"X\"\n    },\n    \"y\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Y\"\n    },\n    \"marker\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Marker\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {\n        \"color\": \"k\",\n        \"size\": 5.0,\n        \"alpha\": 1.0,\n        \"zorder\": 0.0,\n        \"label\": null,\n        \"symbol\": \".\"\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"x\",\n    \"y\"\n  ],\n  \"title\": \"Point2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>x</code>                 (<code>float | str</code>)             </li> <li> <code>y</code>                 (<code>float | str</code>)             </li> <li> <code>marker</code>                 (<code>Marker | None</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.ProductType","title":"ProductType","text":"<p>               Bases: <code>StrEnum</code></p> <p>Defines all product types.  Used to type-cast URL info in server to validate.</p> <p>Attributes:</p> Name Type Description <code>DataProduct</code> <code>str</code> <p>class name</p> <code>XYData</code> <code>str</code> <p>class name</p> <code>Trace2D</code> <code>str</code> <p>class name</p> <code>Point2D</code> <code>str</code> <p>class name</p> <code>TableEntry</code> <code>str</code> <p>class name</p> <code>HistogramEntry</code> <code>str</code> <p>class name</p>"},{"location":"reference/trendify/API/#trendify.API.SingleAxisFigure","title":"SingleAxisFigure  <code>dataclass</code>","text":"<pre><code>SingleAxisFigure(tag: Tag, fig: Figure, ax: Axes)\n</code></pre> <p>Data class storing a matlab figure and axis.  The stored tag data in this class is so-far unused.</p> <p>Attributes:</p> Name Type Description <code>ax</code> <code>Axes</code> <p>Matplotlib axis to which data will be plotted</p> <code>fig</code> <code>Figure</code> <p>Matplotlib figure.</p> <code>tag</code> <code>Tag</code> <p>Figure tag.  Not yet used.</p>"},{"location":"reference/trendify/API/#trendify.API.SingleAxisFigure.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> <p>Closes stored matplotlib figure before deleting reference to object.</p> Source code in <code>src/trendify/API.py</code> <pre><code>def __del__(self):\n    \"\"\"\n    Closes stored matplotlib figure before deleting reference to object.\n    \"\"\"\n    plt.close(self.fig)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.SingleAxisFigure.apply_format","title":"apply_format","text":"<pre><code>apply_format(format2d: Format2D)\n</code></pre> <p>Applies format to figure and axes labels and limits</p> <p>Parameters:</p> Name Type Description Default <code>format2d</code> <code>Format2D</code> <p>format information to apply to the single axis figure</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def apply_format(self, format2d: Format2D):\n    \"\"\"\n    Applies format to figure and axes labels and limits\n\n    Args:\n        format2d (Format2D): format information to apply to the single axis figure\n    \"\"\"\n    self.ax.set_title(format2d.title_ax)\n    self.fig.suptitle(format2d.title_fig)\n    with warnings.catch_warnings(action='ignore', category=UserWarning):\n        handles, labels = self.ax.get_legend_handles_labels()\n        by_label = dict(zip(labels, handles))\n        if by_label:\n            self.ax.legend(by_label.values(), by_label.keys(), title=format2d.title_legend)\n    self.ax.set_xlabel(format2d.label_x)\n    self.ax.set_ylabel(format2d.label_y)\n    self.ax.set_xlim(format2d.lim_x_min, format2d.lim_x_max)\n    self.ax.set_ylim(format2d.lim_y_min, format2d.lim_y_max)\n    self.fig.tight_layout(rect=[0, 0.03, 1, 0.95])\n    return self\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.SingleAxisFigure.new","title":"new  <code>classmethod</code>","text":"<pre><code>new(tag: Tag)\n</code></pre> <p>Creates new figure and axis.  Returns new instance of this class.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>tag (not yet used)</p> required <p>Returns:</p> Type Description <code>Type[Self]</code> <p>New single axis figure</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef new(cls, tag: Tag):\n    \"\"\"\n    Creates new figure and axis.  Returns new instance of this class.\n\n    Args:\n        tag (Tag): tag (not yet used)\n\n    Returns:\n        (Type[Self]): New single axis figure\n    \"\"\"\n    fig: plt.Figure = plt.figure()\n    ax: plt.Axes = fig.add_subplot(1, 1, 1)\n    return cls(\n        tag=tag,\n        fig=fig,\n        ax=ax,\n    )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.SingleAxisFigure.savefig","title":"savefig","text":"<pre><code>savefig(path: Path, dpi: int = 500)\n</code></pre> <p>Wrapper on matplotlib savefig method.  Saves figure to given path with given dpi resolution.</p> <p>Returns:</p> Type Description <code>Self</code> <p>Returns self</p> Source code in <code>src/trendify/API.py</code> <pre><code>def savefig(self, path: Path, dpi: int = 500):\n    \"\"\"\n    Wrapper on matplotlib savefig method.  Saves figure to given path with given dpi resolution.\n\n    Returns:\n        (Self): Returns self\n    \"\"\"\n    self.fig.savefig(path, dpi=dpi)\n    return self\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableBuilder","title":"TableBuilder","text":"<pre><code>TableBuilder(in_dirs: List[Path], out_dir: Path)\n</code></pre> <p>Builds tables (melted, pivot, and stats) for histogramming and including in a report or Grafana dashboard.</p> <p>Parameters:</p> Name Type Description Default <code>in_dirs</code> <code>List[Path]</code> <p>directories from which to load data products</p> required <code>out_dir</code> <code>Path</code> <p>directory in which tables should be saved</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(\n        self,\n        in_dirs: List[Path],\n        out_dir: Path,\n    ):\n    self.in_dirs = in_dirs\n    self.out_dir = out_dir\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableBuilder.get_stats_table","title":"get_stats_table  <code>classmethod</code>","text":"<pre><code>get_stats_table(df: DataFrame)\n</code></pre> <p>Computes multiple statistics for each column</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame for which the column statistics are to be calculated.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Dataframe having statistics (column headers) for each of the columns of the input <code>df</code>.  The columns of <code>df</code> will be the row indices of the stats table.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef get_stats_table(\n        cls, \n        df: pd.DataFrame,\n    ):\n    \"\"\"\n    Computes multiple statistics for each column\n\n    Args:\n        df (pd.DataFrame): DataFrame for which the column statistics are to be calculated.\n\n    Returns:\n        (pd.DataFrame): Dataframe having statistics (column headers) for each of the columns\n            of the input `df`.  The columns of `df` will be the row indices of the stats table.\n    \"\"\"\n    stats = {\n        'min': df.min(axis=0),\n        'max': df.max(axis=0),\n        'mean': df.mean(axis=0),\n        'sigma3': df.std(axis=0)*3,\n    }\n    df = pd.DataFrame(stats, index=df.columns)\n    df.index.name = 'Name'\n    return df\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableBuilder.load_table","title":"load_table","text":"<pre><code>load_table(tag: Tag, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT)\n</code></pre> <p>Collects table entries from JSON files corresponding to given tag and processes them.</p> <p>Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats.</p> <p>File names will all use the tag with different suffixes  <code>'tag_melted.csv'</code>, <code>'tag_pivot.csv'</code>, <code>'name_stats.csv'</code>.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>product tag for which to collect and process.</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def load_table(\n        self,\n        tag: Tag,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Collects table entries from JSON files corresponding to given tag and processes them.\n\n    Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats.\n\n    File names will all use the tag with different suffixes \n    `'tag_melted.csv'`, `'tag_pivot.csv'`, `'name_stats.csv'`.\n\n    Args:\n        tag (Tag): product tag for which to collect and process.\n    \"\"\"\n    print(f'Making table for {tag = }')\n\n    table_entries: List[TableEntry] = []\n    for subdir in self.in_dirs:\n        collection = DataProductCollection.model_validate_json(subdir.joinpath(data_products_fname).read_text())\n        table_entries.extend(collection.get_products(tag=tag, object_type=TableEntry).elements)\n\n    self.process_table_entries(tag=tag, table_entries=table_entries, out_dir=self.out_dir)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableBuilder.process_table_entries","title":"process_table_entries  <code>classmethod</code>","text":"<pre><code>process_table_entries(tag: Tag, table_entries: List[TableEntry], out_dir: Path)\n</code></pre> <p>Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats.</p> <p>File names will all use the tag with different suffixes  <code>'tag_melted.csv'</code>, <code>'tag_pivot.csv'</code>, <code>'name_stats.csv'</code>.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>product tag for which to collect and process.</p> required <code>table_entries</code> <code>List[TableEntry]</code> <p>List of table entries</p> required <code>out_dir</code> <code>Path</code> <p>Directory to which table CSV files should be saved</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef process_table_entries(\n        cls,\n        tag: Tag,\n        table_entries: List[TableEntry],\n        out_dir: Path,\n    ):\n    \"\"\"\n\n    Saves CSV files for the melted data frame, pivot dataframe, and pivot dataframe stats.\n\n    File names will all use the tag with different suffixes \n    `'tag_melted.csv'`, `'tag_pivot.csv'`, `'name_stats.csv'`.\n\n    Args:\n        tag (Tag): product tag for which to collect and process.\n        table_entries (List[TableEntry]): List of table entries\n        out_dir (Path): Directory to which table CSV files should be saved\n    \"\"\"\n    melted = pd.DataFrame([t.get_entry_dict() for t in table_entries])\n    pivot = TableEntry.pivot_table(melted=melted)\n    if pivot is None:\n        print(f'Could not generate pivot table for {tag = }')\n    else:\n        stats = cls.get_stats_table(df=pivot)\n\n    save_path_partial = out_dir.joinpath(*tuple(atleast_1d(tag)))\n    save_path_partial.parent.mkdir(exist_ok=True, parents=True)\n    print(f'Saving to {str(save_path_partial)}_*.csv')\n\n    melted.to_csv(save_path_partial.with_stem(save_path_partial.stem + '_melted').with_suffix('.csv'), index=False)\n    if pivot is not None:\n        pivot.to_csv(save_path_partial.with_stem(save_path_partial.stem + '_pivot').with_suffix('.csv'), index=True)\n        stats.to_csv(save_path_partial.with_stem(save_path_partial.stem + '_stats').with_suffix('.csv'), index=True)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableEntry","title":"TableEntry  <code>pydantic-model</code>","text":"<p>               Bases: <code>DataProduct</code></p> <p>Defines an entry to be collected into a table.</p> <p>Collected table entries will be printed in three forms when possible: melted, pivot (when possible), and stats (on pivot columns, when possible).</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> <code>row</code> <code>float | str</code> <p>Row Label</p> <code>col</code> <code>float | str</code> <p>Column Label</p> <code>value</code> <code>float | str</code> <p>Value</p> <code>unit</code> <code>str | None</code> <p>Units for value</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"additionalProperties\": false,\n  \"description\": \"Defines an entry to be collected into a table.\\n\\nCollected table entries will be printed in three forms when possible: melted, pivot (when possible), and stats (on pivot columns, when possible).\\n\\nAttributes:\\n    tags (Tags): Tags used to sort data products\\n    row (float | str): Row Label\\n    col (float | str): Column Label\\n    value (float | str): Value\\n    unit (str | None): Units for value\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"row\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Row\"\n    },\n    \"col\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"title\": \"Col\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"boolean\"\n        }\n      ],\n      \"title\": \"Value\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Unit\"\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"row\",\n    \"col\",\n    \"value\",\n    \"unit\"\n  ],\n  \"title\": \"TableEntry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>row</code>                 (<code>float | str</code>)             </li> <li> <code>col</code>                 (<code>float | str</code>)             </li> <li> <code>value</code>                 (<code>float | str | bool</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.TableEntry.get_entry_dict","title":"get_entry_dict","text":"<pre><code>get_entry_dict()\n</code></pre> <p>Returns a dictionary of entries to be used in creating a table.</p> <p>Returns:</p> Type Description <code>dict[str, str | float]</code> <p>Dictionary of entries to be used in creating a melted DataFrame</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_entry_dict(self):\n    \"\"\"\n    Returns a dictionary of entries to be used in creating a table.\n\n    Returns:\n        (dict[str, str | float]): Dictionary of entries to be used in creating a melted [DataFrame][pandas.DataFrame]\n    \"\"\"\n    return {'row': self.row, 'col': self.col, 'value': self.value, 'unit': self.unit}\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableEntry.load_and_pivot","title":"load_and_pivot  <code>classmethod</code>","text":"<pre><code>load_and_pivot(path: Path)\n</code></pre> <p>Loads melted table from csv and pivots to wide form. csv should have columns named <code>'row'</code>, <code>'col'</code>, and <code>'value'</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>path to CSV file</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>Pivoted data frame or elese <code>None</code> if pivot operation fails.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef load_and_pivot(cls, path: Path):\n    \"\"\"\n    Loads melted table from csv and pivots to wide form.\n    csv should have columns named `'row'`, `'col'`, and `'value'`.\n\n    Args:\n        path (Path): path to CSV file\n\n    Returns:\n        (pd.DataFrame | None): Pivoted data frame or elese `None` if pivot operation fails.\n    \"\"\"\n    return cls.pivot_table(melted=pd.read_csv(path))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.TableEntry.pivot_table","title":"pivot_table  <code>classmethod</code>","text":"<pre><code>pivot_table(melted: DataFrame)\n</code></pre> <p>Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>melted</code> <code>DataFrame</code> <p>Melted data frame having columns named <code>'row'</code>, <code>'col'</code>, <code>'value'</code>.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pivoted DataFrame if pivot works else <code>None</code>. Pivot operation fails if  row or column index pairs are repeated.</p> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef pivot_table(cls, melted: pd.DataFrame):\n    \"\"\"\n    Attempts to pivot melted row, col, value DataFrame into a wide form DataFrame\n\n    Args:\n        melted (pd.DataFrame): Melted data frame having columns named `'row'`, `'col'`, `'value'`.\n\n    Returns:\n        (pd.DataFrame | None): pivoted DataFrame if pivot works else `None`. Pivot operation fails if \n            row or column index pairs are repeated.\n    \"\"\"\n    try:\n        result = melted.pivot(index='row', columns='col', values='value')\n    except ValueError:\n        result = None\n    return result\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Trace2D","title":"Trace2D  <code>pydantic-model</code>","text":"<p>               Bases: <code>XYData</code></p> <p>A collection of points comprising a trace. Use the Trace2D.from_xy constructor.</p> <p>Attributes:</p> Name Type Description <code>points</code> <code>List[Point2D]</code> <p>List of points.  Usually the points would have null values  for <code>marker</code> and <code>format2d</code> fields to save space.</p> <code>pen</code> <code>Pen</code> <p>Style and label information for drawing to matplotlib axes. Only the label information is used in Grafana. Eventually style information will be used in grafana.</p> <code>tags</code> <code>Tags</code> <p>Tags to be used for sorting data.</p> <code>metadata</code> <code>dict[str, str]</code> <p>A dictionary of metadata to be used as a tool tip for mousover in grafana</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    },\n    \"Marker\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines marker for scattering to matplotlib\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\\n    symbol (str): Matplotlib symbol string\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 5,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        },\n        \"symbol\": {\n          \"default\": \".\",\n          \"title\": \"Symbol\",\n          \"type\": \"string\"\n        }\n      },\n      \"title\": \"Marker\",\n      \"type\": \"object\"\n    },\n    \"Pen\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines the pen drawing to matplotlib.\\n\\nAttributes:\\n    color (str): Color of line\\n    size (float): Line width\\n    alpha (float): Opacity from 0 to 1 (inclusive)\\n    zorder (float): Prioritization \\n    label (Union[str, None]): Legend label\",\n      \"properties\": {\n        \"color\": {\n          \"default\": \"k\",\n          \"title\": \"Color\",\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"default\": 1,\n          \"title\": \"Size\",\n          \"type\": \"number\"\n        },\n        \"alpha\": {\n          \"default\": 1,\n          \"title\": \"Alpha\",\n          \"type\": \"number\"\n        },\n        \"zorder\": {\n          \"default\": 0,\n          \"title\": \"Zorder\",\n          \"type\": \"number\"\n        },\n        \"label\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label\"\n        }\n      },\n      \"title\": \"Pen\",\n      \"type\": \"object\"\n    },\n    \"Point2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Defines a point to be scattered onto xy plot.\\n\\nAttributes:\\n    tags (Tags): Tags to be used for sorting data.        \\n    x (float | str): X value for the point.\\n    y (float | str): Y value for the point.\\n    marker (Marker | None): Style and label information for scattering points to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n      \"properties\": {\n        \"tags\": {\n          \"items\": {\n            \"anyOf\": []\n          },\n          \"title\": \"Tags\",\n          \"type\": \"array\"\n        },\n        \"metadata\": {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"default\": {},\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        },\n        \"format2d\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Format2D\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"title\": \"X\"\n        },\n        \"y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"title\": \"Y\"\n        },\n        \"marker\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Marker\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": {\n            \"color\": \"k\",\n            \"size\": 5.0,\n            \"alpha\": 1.0,\n            \"zorder\": 0.0,\n            \"label\": null,\n            \"symbol\": \".\"\n          }\n        }\n      },\n      \"required\": [\n        \"tags\",\n        \"x\",\n        \"y\"\n      ],\n      \"title\": \"Point2D\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"description\": \"A collection of points comprising a trace.\\nUse the [Trace2D.from_xy][trendify.API.Trace2D.from_xy] constructor.\\n\\nAttributes:\\n    points (List[Point2D]): List of points.  Usually the points would have null values \\n        for `marker` and `format2d` fields to save space.\\n    pen (Pen): Style and label information for drawing to matplotlib axes.\\n        Only the label information is used in Grafana.\\n        Eventually style information will be used in grafana.\\n    tags (Tags): Tags to be used for sorting data.\\n    metadata (dict[str, str]): A dictionary of metadata to be used as a tool tip for mousover in grafana\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"points\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Point2D\"\n      },\n      \"title\": \"Points\",\n      \"type\": \"array\"\n    },\n    \"pen\": {\n      \"$ref\": \"#/$defs/Pen\",\n      \"default\": {\n        \"color\": \"k\",\n        \"size\": 1.0,\n        \"alpha\": 1.0,\n        \"zorder\": 0.0,\n        \"label\": null\n      }\n    }\n  },\n  \"required\": [\n    \"tags\",\n    \"points\"\n  ],\n  \"title\": \"Trace2D\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Config:</p> <ul> <li><code>extra</code>: <code>'forbid'</code></li> </ul> <p>Fields:</p> <ul> <li> <code>points</code>                 (<code>List[Point2D]</code>)             </li> <li> <code>pen</code>                 (<code>Pen</code>)             </li> <li> <code>x</code>                 (<code>NDArray[Shape['*'], float]</code>)             </li> <li> <code>y</code>                 (<code>NDArray[Shape['*'], float]</code>)             </li> </ul>"},{"location":"reference/trendify/API/#trendify.API.Trace2D.x","title":"x  <code>pydantic-field</code>","text":"<pre><code>x: NDArray[Shape['*'], float]\n</code></pre> <p>Returns an array of x values from <code>self.points</code></p> <p>Returns:</p> Type Description <code>NDArray[Shape['*'], float]</code> <p>array of x values from <code>self.points</code></p> <p>'</p>"},{"location":"reference/trendify/API/#trendify.API.Trace2D.y","title":"y  <code>pydantic-field</code>","text":"<pre><code>y: NDArray[Shape['*'], float]\n</code></pre> <p>Returns an array of y values from <code>self.points</code></p> <p>Returns:</p> Type Description <code>NDArray[Shape['*'], float]</code> <p>array of y values from <code>self.points</code></p>"},{"location":"reference/trendify/API/#trendify.API.Trace2D.from_xy","title":"from_xy  <code>classmethod</code>","text":"<pre><code>from_xy(\n    tags: Tags,\n    x: NDArray[Shape[\"*\"], float],\n    y: NDArray[Shape[\"*\"], float],\n    pen: Pen = Pen(),\n    format2d: Format2D = Format2D(),\n)\n</code></pre> <p>Creates a list of Point2Ds from xy data and returns a new Trace2D product.</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>Tags</code> <p>Tags used to sort data products</p> required <code>x</code> <code>NDArray[Shape['*'], float]</code> <p>x values</p> required <code>y</code> <code>NDArray[Shape['*'], float]</code> <p>y values</p> required <code>pen</code> <code>Pen</code> <p>Style and label for trace</p> <code>Pen()</code> <code>format2d</code> <code>Format2D</code> <p>Format to apply to plot</p> <code>Format2D()</code> Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef from_xy(\n        cls,\n        tags: Tags,\n        x: NDArray[Shape[\"*\"], float],\n        y: NDArray[Shape[\"*\"], float],\n        pen: Pen = Pen(),\n        format2d: Format2D = Format2D(),\n    ):\n    \"\"\"\n    Creates a list of [Point2D][trendify.API.Point2D]s from xy data and returns a new [Trace2D][trendify.API.Trace2D] product.\n\n    Args:\n        tags (Tags): Tags used to sort data products\n        x (NDArray[Shape[\"*\"], float]): x values\n        y (NDArray[Shape[\"*\"], float]): y values\n        pen (Pen): Style and label for trace\n        format2d (Format2D): Format to apply to plot\n    \"\"\"\n    return cls(\n        tags = tags,\n        points = [\n            Point2D(\n                tags=[None],\n                x=x_,\n                y=y_,\n                marker=None,\n                format2d=None,\n            )\n            for x_, y_\n            in zip(x, y)\n        ],\n        pen=pen,\n        format2d=format2d,\n    )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Trace2D.plot_to_ax","title":"plot_to_ax","text":"<pre><code>plot_to_ax(ax: Axes)\n</code></pre> <p>Plots xy data from trace to a matplotlib axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>axes to which xy data should be plotted</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def plot_to_ax(self, ax: plt.Axes):\n    \"\"\"\n    Plots xy data from trace to a matplotlib axes object.\n\n    Args:\n        ax (plt.Axes): axes to which xy data should be plotted\n    \"\"\"\n    ax.plot(self.x, self.y, **self.pen.as_scatter_plot_kwargs())\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.Trace2D.propagate_format2d_and_pen","title":"propagate_format2d_and_pen","text":"<pre><code>propagate_format2d_and_pen(marker_symbol: str = '.') -&gt; None\n</code></pre> <p>Propagates format and style info to all <code>self.points</code> (in-place). I thought this would  be useful for grafana before I learned better methods for propagating the data. It still may end up being useful if my plotting method changes.  Keeping for potential future use case.</p> <p>Parameters:</p> Name Type Description Default <code>marker_symbol</code> <code>str</code> <p>Valid matplotlib marker symbol</p> <code>'.'</code> Source code in <code>src/trendify/API.py</code> <pre><code>def propagate_format2d_and_pen(self, marker_symbol: str = '.') -&gt; None:\n    \"\"\"\n    Propagates format and style info to all `self.points` (in-place).\n    I thought this would  be useful for grafana before I learned better methods for propagating the data.\n    It still may end up being useful if my plotting method changes.  Keeping for potential future use case.\n\n    Args:\n        marker_symbol (str): Valid matplotlib marker symbol\n    \"\"\"\n    self.points = [\n        p.model_copy(\n            update={\n                'tags': self.tags,\n                'format2d': self.format2d,\n                'marker': Marker.from_pen(self.pen, symbol=marker_symbol)\n            }\n        ) \n        for p \n        in self.points\n    ]\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.XYData","title":"XYData  <code>pydantic-model</code>","text":"<p>               Bases: <code>PlottableData2D</code></p> <p>Base class for children of DataProduct to be plotted ax xy data on a 2D plot</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Format2D\": {\n      \"additionalProperties\": false,\n      \"description\": \"Formatting data for matplotlib figure and axes\\n\\nAttributes:\\n    title_fig (Optional[str]): Sets [figure title][matplotlib.figure.Figure.suptitle]\\n    title_legend (Optional[str]): Sets [legend title][matplotlib.legend.Legend.set_title]\\n    title_ax (Optional[str]): Sets [axis title][matplotlib.axes.Axes.set_title]\\n    label_x (Optional[str]): Sets [x-axis label][matplotlib.axes.Axes.set_xlabel]\\n    label_y (Optional[str]): Sets [y-axis label][matplotlib.axes.Axes.set_ylabel]\\n    lim_x_min (float | str | None): Sets [x-axis lower bound][matplotlib.axes.Axes.set_xlim]\\n    lim_x_max (float | str | None): Sets [x-axis upper bound][matplotlib.axes.Axes.set_xlim]\\n    lim_y_min (float | str | None): Sets [y-axis lower bound][matplotlib.axes.Axes.set_ylim]\\n    lim_y_max (float | str | None): Sets [y-axis upper bound][matplotlib.axes.Axes.set_ylim]\",\n      \"properties\": {\n        \"title_fig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Fig\"\n        },\n        \"title_legend\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Legend\"\n        },\n        \"title_ax\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title Ax\"\n        },\n        \"label_x\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label X\"\n        },\n        \"label_y\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Label Y\"\n        },\n        \"lim_x_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Min\"\n        },\n        \"lim_x_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim X Max\"\n        },\n        \"lim_y_min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Min\"\n        },\n        \"lim_y_max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lim Y Max\"\n        }\n      },\n      \"title\": \"Format2D\",\n      \"type\": \"object\"\n    }\n  },\n  \"additionalProperties\": true,\n  \"description\": \"Base class for children of DataProduct to be plotted ax xy data on a 2D plot\",\n  \"properties\": {\n    \"tags\": {\n      \"items\": {\n        \"anyOf\": []\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"metadata\": {\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      },\n      \"default\": {},\n      \"title\": \"Metadata\",\n      \"type\": \"object\"\n    },\n    \"format2d\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Format2D\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"tags\"\n  ],\n  \"title\": \"XYData\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.XYDataPlotter","title":"XYDataPlotter","text":"<pre><code>XYDataPlotter(in_dirs: List[Path], out_dir: Path, dpi: int = 500)\n</code></pre> <p>Plots xy data from user-specified directories to a single axis figure</p> <p>Parameters:</p> Name Type Description Default <code>in_dirs</code> <code>List[Path]</code> <p>Directories in which to search for data products from JSON files</p> required <code>out_dir</code> <code>Path</code> <p>directory to which figure will be output</p> required <code>dpi</code> <code>int</code> <p>Saved image resolution</p> <code>500</code> Source code in <code>src/trendify/API.py</code> <pre><code>def __init__(\n        self,\n        in_dirs: List[Path],\n        out_dir: Path,\n        dpi: int = 500,\n    ):\n    self.in_dirs = in_dirs\n    self.out_dir = out_dir\n    self.dpi = dpi\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.XYDataPlotter.handle_points_and_traces","title":"handle_points_and_traces  <code>classmethod</code>","text":"<pre><code>handle_points_and_traces(\n    tag: Tag, points: List[Point2D], traces: List[Trace2D], dir_out: Path, dpi: int\n)\n</code></pre> <p>Plots points and traces, formats figure, saves figure, and closes matplotlinb figure.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>Tag  corresponding to the provided points and traces</p> required <code>points</code> <code>List[Point2D]</code> <p>Points to be scattered</p> required <code>traces</code> <code>List[Trace2D]</code> <p>List of traces to be plotted</p> required <code>dir_out</code> <code>Path</code> <p>directory to output the plot</p> required <code>dpi</code> <code>int</code> <p>resolution of plot</p> required Source code in <code>src/trendify/API.py</code> <pre><code>@classmethod\ndef handle_points_and_traces(\n        cls,\n        tag: Tag,\n        points: List[Point2D],\n        traces: List[Trace2D],\n        dir_out: Path,\n        dpi: int,\n    ):\n    \"\"\"\n    Plots points and traces, formats figure, saves figure, and closes matplotlinb figure.\n\n    Args:\n        tag (Tag): Tag  corresponding to the provided points and traces\n        points (List[Point2D]): Points to be scattered\n        traces (List[Trace2D]): List of traces to be plotted\n        dir_out (Path): directory to output the plot\n        dpi (int): resolution of plot\n    \"\"\"\n\n    saf = SingleAxisFigure.new(tag=tag)\n\n    if points:\n        markers = set([p.marker for p in points])\n        for marker in markers:\n            matching_points = [p for p in points if p.marker == marker]\n            x = [p.x for p in matching_points]\n            y = [p.y for p in matching_points]\n            if x and y:\n                saf.ax.scatter(x, y, **marker.as_scatter_plot_kwargs())\n\n    for trace in traces:\n        trace.plot_to_ax(saf.ax)\n\n    formats = list(set([p.format2d for p in points] + [t.format2d for t in traces]))\n    format2d = Format2D.union_from_iterable(formats)\n    saf.apply_format(format2d)\n    # saf.ax.autoscale(enable=True, axis='both', tight=True)\n\n    save_path = dir_out.joinpath(*tuple(atleast_1d(tag))).with_suffix('.jpg')\n    save_path.parent.mkdir(exist_ok=True, parents=True)\n    print(f'Saving to {save_path = }')\n    saf.savefig(path=save_path, dpi=dpi)\n    del saf\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.XYDataPlotter.plot","title":"plot","text":"<pre><code>plot(tag: Tag, data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT)\n</code></pre> <ul> <li>Collects data from json files in stored <code>self.in_dirs</code>, </li> <li>plots the relevant products,</li> <li>applies labels and formatting, </li> <li>saves the figure</li> <li>closes matplotlib figure</li> </ul> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Tag</code> <p>data tag for which products are to be collected and plotted.</p> required <code>data_products_fname</code> <code>str</code> <p>Data products file name</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def plot(\n        self,  \n        tag: Tag, \n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    - Collects data from json files in stored `self.in_dirs`, \n    - plots the relevant products,\n    - applies labels and formatting, \n    - saves the figure\n    - closes matplotlib figure\n\n    Args:\n        tag (Tag): data tag for which products are to be collected and plotted.\n        data_products_fname (str): Data products file name\n    \"\"\"\n    print(f'Making xy plot for {tag = }')\n    saf = SingleAxisFigure.new(tag=tag)\n\n    for subdir in self.in_dirs:\n        collection = DataProductCollection.model_validate_json(subdir.joinpath(data_products_fname).read_text())\n        traces: List[Trace2D] = collection.get_products(tag=tag, object_type=Trace2D).elements\n        points: List[Point2D] = collection.get_products(tag=tag, object_type=Point2D).elements\n\n        if points or traces:\n            if points:\n                markers = set([p.marker for p in points])\n                for marker in markers:\n                    matching_points = [p for p in points if p.marker == marker]\n                    x = [p.x for p in matching_points]\n                    y = [p.y for p in matching_points]\n                    if x and y:\n                        if marker is not None:\n                            saf.ax.scatter(x, y, **marker.as_scatter_plot_kwargs())\n                        else:\n                            saf.ax.scatter(x, y)\n\n            for trace in traces:\n                trace.plot_to_ax(saf.ax)\n\n            formats = list(set([p.format2d for p in points if p.format2d] + [t.format2d for t in traces]) - {None})\n            format2d = Format2D.union_from_iterable(formats)\n            saf.apply_format(format2d)\n            # saf.ax.autoscale(enable=True, axis='both', tight=True)\n\n    save_path = self.out_dir.joinpath(*tuple(atleast_1d(tag))).with_suffix('.jpg')\n    save_path.parent.mkdir(exist_ok=True, parents=True)\n    print(f'Saving to {save_path = }')\n    saf.savefig(path=save_path, dpi=self.dpi)\n    del saf\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.atleast_1d","title":"atleast_1d","text":"<pre><code>atleast_1d(obj: Any) -&gt; Iterable\n</code></pre> <p>Converts scalar objec to a list of length 1 or leaves an iterable object unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object that needs to be at least 1d</p> required <p>Returns:</p> Type Description <code>Iterable</code> <p>Returns an iterable</p> Source code in <code>src/trendify/API.py</code> <pre><code>def atleast_1d(obj: Any) -&gt; Iterable:\n    \"\"\"\n    Converts scalar objec to a list of length 1 or leaves an iterable object unchanged.\n\n    Args:\n        obj (Any): Object that needs to be at least 1d\n\n    Returns:\n        (Iterable): Returns an iterable\n    \"\"\"\n    if not should_be_flattened(obj):\n        return [obj]\n    else:\n        return obj\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.flatten","title":"flatten","text":"<pre><code>flatten(obj: Iterable)\n</code></pre> <p>Recursively flattens iterable up to a point (leaves <code>str</code>, <code>bytes</code>, and <code>DataProduct</code> unflattened)</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Iterable</code> <p>Object to be flattened</p> required <p>Returns:</p> Type Description <code>Iterable</code> <p>Flattned iterable</p> Source code in <code>src/trendify/API.py</code> <pre><code>def flatten(obj: Iterable):\n    \"\"\"\n    Recursively flattens iterable up to a point (leaves `str`, `bytes`, and `DataProduct` unflattened)\n\n    Args:\n        obj (Iterable): Object to be flattened\n\n    Returns:\n        (Iterable): Flattned iterable\n    \"\"\"\n    if not should_be_flattened(obj):\n        yield obj\n    else:\n        for sublist in obj:\n            yield from flatten(sublist)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.get_and_reserve_next_index","title":"get_and_reserve_next_index","text":"<pre><code>get_and_reserve_next_index(save_dir: Path, dir_in: Path)\n</code></pre> <p>Reserves next available file index during trendify sorting phase. Saves data to index map file.</p> <p>Parameters:</p> Name Type Description Default <code>save_dir</code> <code>Path</code> <p>Directory for which the next available file index is needed</p> required <code>dir_in</code> <code>Path</code> <p>Directory from which data is being pulled for sorting</p> required Source code in <code>src/trendify/API.py</code> <pre><code>def get_and_reserve_next_index(save_dir: Path, dir_in: Path):\n    \"\"\"\n    Reserves next available file index during trendify sorting phase.\n    Saves data to index map file.\n\n    Args:\n        save_dir (Path): Directory for which the next available file index is needed\n        dir_in (Path): Directory from which data is being pulled for sorting\n    \"\"\"\n    assert save_dir.is_dir()\n    lock_file = save_dir.joinpath('reserving_index.lock')\n    with FileLock(lock_file):\n        index_map = save_dir.joinpath('index_map.csv')\n        index_list = index_map.read_text().strip().split('\\n') if index_map.exists() else []\n        next_index = int(index_list[-1].split(',')[0])+1 if index_list else 0\n        index_list.append(f'{next_index},{dir_in}')\n        index_map.write_text('\\n'.join(index_list))\n    return next_index\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.get_sorted_dirs","title":"get_sorted_dirs","text":"<pre><code>get_sorted_dirs(dirs: List[Path])\n</code></pre> <p>Sorts dirs numerically if possible, else alphabetically</p> <p>Parameters:</p> Name Type Description Default <code>dirs</code> <code>List[Path]</code> <p>Directories to sort</p> required <p>Returns:</p> Type Description <code>List[Path]</code> <p>Sorted list of directories</p> Source code in <code>src/trendify/API.py</code> <pre><code>def get_sorted_dirs(dirs: List[Path]):\n    \"\"\"\n    Sorts dirs numerically if possible, else alphabetically\n\n    Args:\n        dirs (List[Path]): Directories to sort\n\n    Returns:\n        (List[Path]): Sorted list of directories\n    \"\"\"\n    dirs = list(dirs)\n    try:\n        dirs.sort(key=lambda p: int(p.name))\n    except ValueError:\n        dirs.sort()\n    return dirs\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.make_grafana_dashboard","title":"make_grafana_dashboard","text":"<pre><code>make_grafana_dashboard(\n    products_dir: Path, output_dir: Path, protocol: str, host: str, port: int, n_procs: int = 1\n)\n</code></pre> <p>Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots.</p> <p>Parameters:</p> Name Type Description Default <code>products_dir</code> <code>Path</code> <p>Root directory into which products have been sorted by tag</p> required <code>output_dir</code> <code>Path</code> <p>Root directory into which Grafana dashboard and panal definitions will be written</p> required <code>n_procs</code> <code>int</code> <p>Number of parallel tasks used for processing data product tags</p> <code>1</code> <code>protocol</code> <code>str</code> <p>Communication protocol for data server</p> required <code>host</code> <code>str</code> <p>Sever address for providing data to interactive dashboard</p> required <code>n_procs</code> <code>int</code> <p>Number of parallel processes</p> <code>1</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_grafana_dashboard(\n        products_dir: Path,\n        output_dir: Path,\n        protocol: str,\n        host: str,\n        port: int,\n        n_procs: int = 1,\n    ):\n    \"\"\"\n    Makes a JSON file to import to Grafana for displaying tagged data tables, histograms and XY plots.\n\n    Args:\n        products_dir (Path): Root directory into which products have been sorted by tag\n        output_dir (Path): Root directory into which Grafana dashboard and panal definitions will be written\n        n_procs (int): Number of parallel tasks used for processing data product tags\n        protocol (str): Communication protocol for data server\n        host (str): Sever address for providing data to interactive dashboard\n        n_procs (int): Number of parallel processes\n    \"\"\"\n    print(f'\\n\\n\\nGenerating Grafana Dashboard JSON Spec in {output_dir} based on products in {products_dir}')\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    product_dirs = list(products_dir.glob('**/*/'))\n    panel_dir = output_dir.joinpath('panels')\n    map_callable(\n        DataProductCollection.make_grafana_panels,\n        product_dirs,\n        [panel_dir] * len(product_dirs),\n        [f'{protocol}://{host}:{port}'] * len(product_dirs),\n        n_procs=n_procs,\n    )\n    panels = [gapi.Panel.model_validate_json(p.read_text()) for p in panel_dir.glob('*.json')]\n    dashboard = gapi.Dashboard(panels=panels)\n    output_dir.joinpath('dashboard.json').write_text(dashboard.model_dump_json())\n    print('\\nFinished Generating Grafana Dashboard JSON Spec')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.make_include_files","title":"make_include_files","text":"<pre><code>make_include_files(\n    root_dir: Path,\n    local_server_path: str | Path = None,\n    mkdocs_include_dir: str | Path = None,\n    heading_level: int | None = None,\n)\n</code></pre> <p>Makes nested include files for inclusion into an MkDocs site.</p> Note <p>I recommend to create a Grafana panel and link to that from the MkDocs site instead.</p> <p>Parameters:</p> Name Type Description Default <code>root_dir</code> <code>Path</code> <p>Directory for which the include files should be recursively generated</p> required <code>local_server_path</code> <code>str | Path | None</code> <p>What should the beginning of the path look like? Use <code>//localhost:8001/...</code> something like that to work with <code>python -m mkdocs serve</code> while running <code>python -m http.server 8001</code> in order to have interactive updates. Use my python <code>convert_links.py</code> script to update after running <code>python -m mkdocs build</code> in order to fix the links for the MkDocs site.  See this repo for an example.</p> <code>None</code> <code>mkdocs_include_dir</code> <code>str | Path | None</code> <p>Path to be used for mkdocs includes. This path should correspond to includ dir in <code>mkdocs.yml</code> file.  (See <code>vulcan_srb_sep</code> repo for example).</p> <code>None</code> <p>Note:</p> <pre><code>Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to \ninclude generated markdown files (and the images/CSVs that they reference).\n\n```\nplugins:\n  - macros:\n    include_dir: run_for_record\n```\n</code></pre> Source code in <code>src/trendify/API.py</code> <pre><code>def make_include_files(\n        root_dir: Path,\n        local_server_path: str | Path = None,\n        mkdocs_include_dir: str | Path = None,\n        # products_dir_replacement_path: str | Path = None,\n        heading_level: int | None = None,\n    ):\n    \"\"\"\n    Makes nested include files for inclusion into an MkDocs site.\n\n    Note:\n        I recommend to create a Grafana panel and link to that from the MkDocs site instead.\n\n    Args:\n        root_dir (Path): Directory for which the include files should be recursively generated\n        local_server_path (str|Path|None): What should the beginning of the path look like?\n            Use `//localhost:8001/...` something like that to work with `python -m mkdocs serve`\n            while running `python -m http.server 8001` in order to have interactive updates.\n            Use my python `convert_links.py` script to update after running `python -m mkdocs build`\n            in order to fix the links for the MkDocs site.  See this repo for an example.\n        mkdocs_include_dir (str|Path|None): Path to be used for mkdocs includes.\n            This path should correspond to includ dir in `mkdocs.yml` file.  (See `vulcan_srb_sep` repo for example).\n\n    Note:\n\n        Here is how to setup `mkdocs.yml` file to have an `include_dir` that can be used to \n        include generated markdown files (and the images/CSVs that they reference).\n\n        ```\n        plugins:\n          - macros:\n            include_dir: run_for_record\n        ```\n\n    \"\"\"\n\n    INCLUDE = 'include.md'\n    dirs = list(root_dir.glob('**/'))\n    dirs.sort()\n    if dirs:\n        min_len = np.min([len(list(p.parents)) for p in dirs])\n        for s in dirs:\n            child_dirs = list(s.glob('*/'))\n            child_dirs.sort()\n            tables_to_include: List[Path] = [x for x in flatten([list(s.glob(p, case_sensitive=False)) for p in ['*pivot.csv', '*stats.csv']])]\n            figures_to_include: List[Path] = [x for x in flatten([list(s.glob(p, case_sensitive=False)) for p in ['*.jpg', '*.png']])]\n            children_to_include: List[Path] = [\n                c.resolve().joinpath(INCLUDE)\n                for c in child_dirs\n            ]\n            if local_server_path is not None:\n                figures_to_include = [\n                    Path(local_server_path).joinpath(x.relative_to(root_dir))\n                    for x in figures_to_include\n                ]\n            if mkdocs_include_dir is not None:\n                tables_to_include = [\n                    x.relative_to(mkdocs_include_dir.parent)\n                    for x in tables_to_include\n                ]\n                children_to_include = [\n                    x.relative_to(mkdocs_include_dir)\n                    for x in children_to_include\n                ]\n\n            bb_open = r'{{'\n            bb_close = r'}}'\n            fig_inclusion_statements = [\n                f'![]({x})' \n                for x in figures_to_include\n            ]\n            table_inclusion_statements = [\n                f\"{bb_open} read_csv('{x}', disable_numparse=True) {bb_close}\"\n                for x in tables_to_include\n            ]\n            child_inclusion_statments = [\n                \"{% include '\" + str(x) + \"' %}\"\n                for x in children_to_include\n            ]\n            fig_inclusion_statements.sort()\n            table_inclusion_statements.sort()\n            child_inclusion_statments.sort()\n            inclusions = table_inclusion_statements + fig_inclusion_statements + child_inclusion_statments\n\n            header = (\n                ''.join(['#']*((len(list(s.parents))-min_len)+heading_level)) + s.name \n                if heading_level is not None and len(inclusions) &gt; 1\n                else ''\n            )\n            text = '\\n\\n'.join([header] + inclusions)\n\n            s.joinpath(INCLUDE).write_text(text)\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.make_it_trendy","title":"make_it_trendy","text":"<pre><code>make_it_trendy(\n    data_product_generator: ProductGenerator | None,\n    input_dirs: List[Path],\n    output_dir: Path,\n    n_procs: int = 1,\n    dpi_static_plots: int = 500,\n    no_static_tables: bool = False,\n    no_static_xy_plots: bool = False,\n    no_static_histograms: bool = False,\n    no_grafana_dashboard: bool = False,\n    no_include_files: bool = False,\n    protocol: str = \"http\",\n    server: str = \"0.0.0.0\",\n    port: int = 8000,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Maps <code>data_product_generator</code> over <code>dirs_in</code> to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from <code>dir_products</code>. Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the directory from which they were loaded.</p> <p>Parameters:</p> Name Type Description Default <code>data_product_generator</code> <code>ProductGenerator | None</code> <p>A callable function that returns a list of data products given a working directory.</p> required <code>input_dirs</code> <code>List[Path]</code> <p>Directories over which to map the <code>product_generator</code></p> required <code>output_dir</code> <code>Path</code> <p>Directory to which the trendify products and assets will be written.</p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>dpi_static_plots</code> <code>int = 500</code> <p>Resolution of output plots when using matplotlib  (for <code>make_xy_plots==True</code> and/or <code>make_histograms==True</code>)</p> <code>500</code> <code>no_static_tables</code> <code>bool</code> <p>Suppresses static assets from the <code>TableEntry</code> products</p> <code>False</code> <code>no_static_xy_plots</code> <code>bool</code> <p>Suppresses static assets from the  <code>XYData</code>  (Trace2D and Point2D) products</p> <code>False</code> <code>no_static_histograms</code> <code>bool</code> <p>Suppresses static assets from the <code>HistogramEntry</code> products</p> <code>False</code> <code>no_grafana_dashboard</code> <code>bool</code> <p>Suppresses generation of Grafana dashboard JSON definition file</p> <code>False</code> <code>no_include_files</code> <code>bool</code> <p>Suppresses generation of include files for importing static assets to markdown or LaTeX reports</p> <code>False</code> <code>data_products_fname</code> <code>str</code> <p>File name to be used for storing generated data products</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_it_trendy(\n        data_product_generator: ProductGenerator | None,\n        input_dirs: List[Path],\n        output_dir: Path,\n        n_procs: int = 1,\n        dpi_static_plots: int = 500,\n        no_static_tables: bool = False,\n        no_static_xy_plots: bool = False,\n        no_static_histograms: bool = False,\n        no_grafana_dashboard: bool = False,\n        no_include_files: bool = False,\n        protocol: str = 'http',\n        server: str = '0.0.0.0',\n        port: int = 8000,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Maps `data_product_generator` over `dirs_in` to produce data product JSON files in those directories.\n    Sorts the generated data products into a nested file structure starting from `dir_products`.\n    Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the\n    directory from which they were loaded.\n\n    Args:\n        data_product_generator (ProductGenerator | None): A callable function that returns\n            a list of data products given a working directory.\n        input_dirs (List[Path]): Directories over which to map the `product_generator`\n        output_dir (Path): Directory to which the trendify products and assets will be written.\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        dpi_static_plots (int = 500): Resolution of output plots when using matplotlib \n            (for `make_xy_plots==True` and/or `make_histograms==True`)\n        no_static_tables (bool): Suppresses static assets from the [`TableEntry`][trendify.API.TableEntry] products\n        no_static_xy_plots (bool): Suppresses static assets from the \n            [`XYData`][trendify.API.XYData] \n            ([Trace2D][trendify.API.Trace2D] and [Point2D][trendify.API.Point2D]) products\n        no_static_histograms (bool): Suppresses static assets from the [`HistogramEntry`][trendify.API.HistogramEntry] products\n        no_grafana_dashboard (bool): Suppresses generation of Grafana dashboard JSON definition file\n        no_include_files (bool): Suppresses generation of include files for importing static assets to markdown or LaTeX reports\n        data_products_fname (str): File name to be used for storing generated data products\n    \"\"\"\n    input_dirs = [Path(p).parent if Path(p).is_file() else Path(p) for p in list(input_dirs)]\n    output_dir = Path(output_dir)\n\n    make_products(\n        product_generator=data_product_generator,\n        data_dirs=input_dirs,\n        n_procs=n_procs,\n        data_products_fname=data_products_fname,\n    )\n\n    products_dir = _mkdir(output_dir.joinpath('products'))\n\n    # Sort products\n    start = time.time()\n    sort_products(\n        data_dirs=input_dirs,\n        output_dir=products_dir,\n        n_procs=n_procs,\n        data_products_fname=data_products_fname,\n    )\n    end = time.time()\n    print(f'Time to sort = {end - start}')\n\n    no_static_assets = (no_static_tables and no_static_histograms and no_static_xy_plots)\n    no_interactive_assets = (no_grafana_dashboard)\n    no_assets = no_static_assets and no_interactive_assets\n\n    if not no_assets:\n        assets_dir = output_dir.joinpath('assets')\n        if not no_interactive_assets:\n            interactive_assets_dir = _mkdir(assets_dir.joinpath('interactive'))\n            if not no_grafana_dashboard:\n                grafana_dir = _mkdir(interactive_assets_dir.joinpath('grafana'))\n                make_grafana_dashboard(\n                    products_dir=products_dir,\n                    output_dir=grafana_dir,\n                    n_procs=n_procs,\n                    protocol=protocol,\n                    server=server,\n                    port=port,\n                )\n\n        if not no_static_assets:\n            static_assets_dir = _mkdir(assets_dir.joinpath('static'))\n            make_tables_and_figures(\n                products_dir=products_dir,\n                output_dir=static_assets_dir,\n                dpi=dpi_static_plots,\n                n_procs=n_procs,\n                no_tables=no_static_tables,\n                no_xy_plots=no_static_xy_plots,\n                no_histograms=no_static_histograms,\n            )\n\n            if not no_include_files:\n                make_include_files(\n                    root_dir=static_assets_dir,\n                    heading_level=2,\n                )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.make_products","title":"make_products","text":"<pre><code>make_products(\n    product_generator: Callable[[Path], DataProductCollection] | None,\n    data_dirs: List[Path],\n    n_procs: int = 1,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Maps <code>product_generator</code> over <code>dirs_in</code> to produce data product JSON files in those directories. Sorts the generated data products into a nested file structure starting from <code>dir_products</code>. Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the directory from which they were loaded.</p> <p>Parameters:</p> Name Type Description Default <code>product_generator</code> <code>ProductGenerator | None</code> <p>A callable function that returns a list of data products given a working directory.</p> required <code>data_dirs</code> <code>List[Path]</code> <p>Directories over which to map the <code>product_generator</code></p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>data_products_fname</code> <code>str</code> <p>File name to be used for storing generated data products</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_products(\n        product_generator: Callable[[Path], DataProductCollection] | None,\n        data_dirs: List[Path],\n        n_procs: int = 1,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Maps `product_generator` over `dirs_in` to produce data product JSON files in those directories.\n    Sorts the generated data products into a nested file structure starting from `dir_products`.\n    Nested folders are generated for tags that are Tuples.  Sorted data files are named according to the\n    directory from which they were loaded.\n\n    Args:\n        product_generator (ProductGenerator | None): A callable function that returns\n            a list of data products given a working directory.\n        data_dirs (List[Path]): Directories over which to map the `product_generator`\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        data_products_fname (str): File name to be used for storing generated data products\n    \"\"\"\n    sorted_dirs = get_sorted_dirs(dirs=data_dirs)\n\n    if product_generator is None:\n        print('No data product generator provided')\n    else:\n        print('\\n\\n\\nGenerating tagged DataProducts and writing to JSON files...\\n')\n        map_callable(\n            DataProductGenerator(processor=product_generator).process_and_save,\n            sorted_dirs,\n            [data_products_fname]*len(sorted_dirs),\n            n_procs=n_procs,\n        )\n        print('\\nFinished generating tagged DataProducts and writing to JSON files')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.make_tables_and_figures","title":"make_tables_and_figures","text":"<pre><code>make_tables_and_figures(\n    products_dir: Path,\n    output_dir: Path,\n    dpi: int = 500,\n    n_procs: int = 1,\n    no_tables: bool = False,\n    no_xy_plots: bool = False,\n    no_histograms: bool = False,\n)\n</code></pre> <p>Makes CSV tables and creates plots (using matplotlib).</p> <p>Tags will be processed in parallel and output in nested directory structure under <code>output_dir</code>.</p> <p>Parameters:</p> Name Type Description Default <code>products_dir</code> <code>Path</code> <p>Directory to which the sorted data products will be written</p> required <code>output_dir</code> <code>Path</code> <p>Directory to which tables and matplotlib histograms and plots will be written if the appropriate boolean variables <code>make_tables</code>, <code>make_xy_plots</code>, <code>make_histograms</code> are true.</p> required <code>n_procs</code> <code>int = 1</code> <p>Number of processes to run in parallel.  If <code>n_procs==1</code>, directories will be processed sequentially (easier for debugging since the full traceback will be provided). If <code>n_procs &gt; 1</code>, a ProcessPoolExecutor will be used to load and process directories and/or tags in parallel.</p> <code>1</code> <code>dpi</code> <code>int = 500</code> <p>Resolution of output plots when using matplotlib  (for <code>make_xy_plots==True</code> and/or <code>make_histograms==True</code>)</p> <code>500</code> <code>no_tables</code> <code>bool</code> <p>Whether or not to collect the  <code>TableEntry</code> products and write them to CSV files (<code>&lt;tag&gt;_melted.csv</code> with <code>&lt;tag&gt;_pivot.csv</code> and <code>&lt;tag&gt;_stats.csv</code> when possible).</p> <code>False</code> <code>no_xy_plots</code> <code>bool</code> <p>Whether or not to plot the <code>XYData</code> products using matplotlib</p> <code>False</code> <code>no_histograms</code> <code>bool</code> <p>Whether or not to generate histograms of the  <code>HistogramEntry</code> products using matplotlib.</p> <code>False</code> Source code in <code>src/trendify/API.py</code> <pre><code>def make_tables_and_figures(\n        products_dir: Path,\n        output_dir: Path,\n        dpi: int = 500,\n        n_procs: int = 1,\n        no_tables: bool = False,\n        no_xy_plots: bool = False,\n        no_histograms: bool = False,\n    ):\n    \"\"\"\n    Makes CSV tables and creates plots (using matplotlib).\n\n    Tags will be processed in parallel and output in nested directory structure under `output_dir`.\n\n    Args:\n        products_dir (Path): Directory to which the sorted data products will be written\n        output_dir (Path): Directory to which tables and matplotlib histograms and plots will be written if\n            the appropriate boolean variables `make_tables`, `make_xy_plots`, `make_histograms` are true.\n        n_procs (int = 1): Number of processes to run in parallel.  If `n_procs==1`, directories will be\n            processed sequentially (easier for debugging since the full traceback will be provided).\n            If `n_procs &gt; 1`, a [ProcessPoolExecutor][concurrent.futures.ProcessPoolExecutor] will\n            be used to load and process directories and/or tags in parallel.\n        dpi (int = 500): Resolution of output plots when using matplotlib \n            (for `make_xy_plots==True` and/or `make_histograms==True`)\n        no_tables (bool): Whether or not to collect the \n            [`TableEntry`][trendify.API.TableEntry] products and write them\n            to CSV files (`&lt;tag&gt;_melted.csv` with `&lt;tag&gt;_pivot.csv` and `&lt;tag&gt;_stats.csv` when possible).\n        no_xy_plots (bool): Whether or not to plot the [`XYData`][trendify.API.XYData] products using matplotlib\n        no_histograms (bool): Whether or not to generate histograms of the \n            [`HistogramEntry`][trendify.API.HistogramEntry] products\n            using matplotlib.\n    \"\"\"\n    if not (no_tables and no_xy_plots and no_histograms):\n        product_dirs = list(products_dir.glob('**/*/'))\n        map_callable(\n            DataProductCollection.process_single_tag_collection,\n            product_dirs,\n            [output_dir]*len(product_dirs),\n            [no_tables]*len(product_dirs),\n            [no_xy_plots]*len(product_dirs),\n            [no_histograms]*len(product_dirs),\n            [dpi]*len(product_dirs),\n            n_procs=n_procs,\n        )\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.map_callable","title":"map_callable","text":"<pre><code>map_callable(\n    f: Callable[[Path], DataProductCollection], *iterables, n_procs: int = 1, mp_context=None\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Callable[[Path], DataProductCollection]</code> <p>Function to be mapped</p> required <code>iterables</code> <code>Tuple[Iterable, ...]</code> <p>iterables of arguments for mapped function <code>f</code></p> <code>()</code> <code>n_procs</code> <code>int</code> <p>Number of parallel processes to run</p> <code>1</code> <code>mp_context</code> <code>str</code> <p>Context to use for creating new processes (see <code>multiprocessing</code> package documentation)</p> <code>None</code> Source code in <code>src/trendify/API.py</code> <pre><code>def map_callable(\n        f: Callable[[Path], DataProductCollection], \n        *iterables, \n        n_procs: int=1, \n        mp_context=None,\n    ):\n    \"\"\"\n    Args:\n        f (Callable[[Path], DataProductCollection]): Function to be mapped\n        iterables (Tuple[Iterable, ...]): iterables of arguments for mapped function `f`\n        n_procs (int): Number of parallel processes to run\n        mp_context (str): Context to use for creating new processes (see `multiprocessing` package documentation)\n    \"\"\"\n    if n_procs &gt; 1:\n        with ProcessPoolExecutor(max_workers=n_procs, mp_context=mp_context) as executor:\n            result = list(executor.map(f, *iterables))\n    else:\n        result = [f(*arg_tuple) for arg_tuple in zip(*iterables)]\n\n    return result\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.should_be_flattened","title":"should_be_flattened","text":"<pre><code>should_be_flattened(obj: Any)\n</code></pre> <p>Checks if object is an iterable container that should be flattened. <code>DataProduct</code>s will not be flattened.  Strings will not be flattened. Everything else will be flattened.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to be tested</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether or not to flatten object</p> Source code in <code>src/trendify/API.py</code> <pre><code>def should_be_flattened(obj: Any):\n    \"\"\"\n    Checks if object is an iterable container that should be flattened.\n    `DataProduct`s will not be flattened.  Strings will not be flattened.\n    Everything else will be flattened.\n\n    Args:\n        obj (Any): Object to be tested\n\n    Returns:\n        (bool): Whether or not to flatten object\n    \"\"\"\n    return isinstance(obj, Iterable) and not isinstance(obj, (str, bytes, DataProduct))\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.sort_products","title":"sort_products","text":"<pre><code>sort_products(\n    data_dirs: List[Path],\n    output_dir: Path,\n    n_procs: int = 1,\n    data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n)\n</code></pre> <p>Loads the tagged data products from <code>data_dirs</code> and sorts them (by tag) into a nested folder structure rooted at <code>output_dir</code>.</p> <p>Parameters:</p> Name Type Description Default <code>data_dirs</code> <code>List[Path]</code> <p>Directories containing JSON data product files</p> required <code>output_dir</code> <code>Path</code> <p>Directory to which sorted products will be written</p> required <code>data_products_fname</code> <code>str</code> <p>File name in which the data products to be sorted are stored</p> <code>DATA_PRODUCTS_FNAME_DEFAULT</code> Source code in <code>src/trendify/API.py</code> <pre><code>def sort_products(\n        data_dirs: List[Path],\n        output_dir: Path,\n        n_procs: int = 1,\n        data_products_fname: str = DATA_PRODUCTS_FNAME_DEFAULT,\n    ):\n    \"\"\"\n    Loads the tagged data products from `data_dirs` and sorts them (by tag) into a nested folder structure rooted at `output_dir`.\n\n    Args:\n        data_dirs (List[Path]): Directories containing JSON data product files\n        output_dir (Path): Directory to which sorted products will be written\n        data_products_fname (str): File name in which the data products to be sorted are stored\n    \"\"\"\n    sorted_data_dirs = get_sorted_dirs(dirs=data_dirs)\n\n    print('\\n\\n\\nSorting data by tags')\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    map_callable(\n        DataProductCollection.sort_by_tags_single_directory,\n        sorted_data_dirs,\n        [output_dir]*len(sorted_data_dirs),\n        [data_products_fname]*len(sorted_data_dirs),\n        n_procs=n_procs,\n    )\n\n    print('\\nFinished sorting by tags')\n</code></pre>"},{"location":"reference/trendify/API/#trendify.API.squeeze","title":"squeeze","text":"<pre><code>squeeze(obj: Union[Iterable, Any])\n</code></pre> <p>Returns a scalar if object is iterable of length 1 else returns object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Union[Iterable, Any]</code> <p>An object to be squeezed if possible</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Either iterable or scalar if possible</p> Source code in <code>src/trendify/API.py</code> <pre><code>def squeeze(obj: Union[Iterable, Any]):\n    \"\"\"\n    Returns a scalar if object is iterable of length 1 else returns object.\n\n    Args:\n        obj (Union[Iterable, Any]): An object to be squeezed if possible\n\n    Returns:\n        (Any): Either iterable or scalar if possible\n    \"\"\"\n    if should_be_flattened(obj) and len(obj) == 1:\n        return obj[0]\n    else:\n        return obj\n</code></pre>"},{"location":"reference/trendify/CLI/","title":"CLI","text":""},{"location":"reference/trendify/CLI/#trendify.CLI","title":"CLI","text":"<p>The <code>Trendify</code> CLI allows the code to be run from a commandline interface.</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.DataProductsFileName","title":"DataProductsFileName","text":"<p>Defines arguments parsed from command line</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.DataProductsFileName.add_argument","title":"add_argument  <code>classmethod</code>","text":"<pre><code>add_argument(parser: ArgumentParser)\n</code></pre> <p>Defines the argument parsing from command line</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@classmethod\ndef add_argument(cls, parser: argparse.ArgumentParser):\n    \"\"\"Defines the argument parsing from command line\"\"\"\n    parser.add_argument(\n        '-f', \n        f'--{cls._NAME}', \n        type=str,\n        default=API.DATA_PRODUCTS_FNAME_DEFAULT,\n        help=(\n            f'Sepcify the data file name to be used (defaults to {API.DATA_PRODUCTS_FNAME_DEFAULT})'\n        )\n    )\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.DataProductsFileName.process_argument","title":"process_argument  <code>staticmethod</code>","text":"<pre><code>process_argument(arg: str) -&gt; ProductGenerator\n</code></pre> <p>Processes input data from command line flag value</p> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>str</code> <p>File name to be type-cast to string</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>String (file name to be used for generated data products)</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@staticmethod\ndef process_argument(arg: str) -&gt; API.ProductGenerator:\n    \"\"\"\n    Processes input data from command line flag value\n\n    Args:\n        arg (str): File name to be type-cast to string\n\n    Returns:\n        (Callable): String (file name to be used for generated data products)\n    \"\"\"\n    return str(arg)\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.FileManager","title":"FileManager  <code>dataclass</code>","text":"<pre><code>FileManager(output_dir: Path)\n</code></pre> <p>Determines the folder setup for <code>trendify</code> directory</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.InputDirectories","title":"InputDirectories","text":"<p>Parses the <code>--input-directories</code> argument from CLI</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.InputDirectories.process_argument","title":"process_argument  <code>staticmethod</code>","text":"<pre><code>process_argument(arg: str) -&gt; List[Path]\n</code></pre> <p>Converts CLI input to list of directories over which user-specified data product generator method will be mapped.</p> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>str</code> <p>Directories or glob string from CLI</p> required <p>Returns:</p> Type Description <code>List[Path]</code> <p>List of directories over which to map the user-specified product generator</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@staticmethod\ndef process_argument(arg: str) -&gt; List[Path]:\n    \"\"\"\n    Converts CLI input to list of directories over which user-specified data product generator method will be mapped.\n\n    Args:\n        arg (str): Directories or glob string from CLI\n\n    Returns:\n        (List[Path]): List of directories over which to map the user-specified product generator\n    \"\"\"\n    if isinstance(arg, str):\n        return [\n            Path(p).parent.resolve() if Path(p).is_file() else Path(p).resolve()\n            for p \n            in glob(arg, root_dir=os.getcwd(), recursive=True)\n        ]\n    else:\n        assert isinstance(arg, Iterable) and not isinstance(arg, str)\n        paths = []\n        for i in arg:\n            for p in glob(i, root_dir=os.getcwd(), recursive=True):\n                paths.append(Path(p).parent.resolve() if Path(p).is_file() else Path(p).resolve())\n        return paths \n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.NProcs","title":"NProcs","text":"<p>Determines the number of processors to use in parallel for running <code>trendify</code> commands</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.NProcs.add_argument","title":"add_argument  <code>classmethod</code>","text":"<pre><code>add_argument(parser: ArgumentParser)\n</code></pre> <p>Defines the argument parsing from command line</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@classmethod\ndef add_argument(cls, parser: argparse.ArgumentParser):\n    \"\"\"Defines the argument parsing from command line\"\"\"\n    parser.add_argument(\n        '-n', \n        f'--{cls._NAME}',\n        default=1,\n        help=(\n            'Specify the number of parallel processes to use for product generation, product sorting, and asset creation.'\n            '\\nParallelization reduces wall time for computationally expensive processes.'\n            '\\nThe number of parallel processes will be limited to a maximum of 5 times the number of available cores'\n            'as a precaution not to crash the machine.'\n        ),\n    )\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.NProcs.process_argument","title":"process_argument  <code>staticmethod</code>","text":"<pre><code>process_argument(arg: str)\n</code></pre> <p>Type-casts input to <code>int</code> and caps value at <code>5*os.cpu_count()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>int</code> <p>Desired number of processes</p> required <p>Returns;     (int): Number of processes capped to <code>5*os.cpu_count()</code></p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@staticmethod\ndef process_argument(arg: str):\n    \"\"\"\n    Type-casts input to `int` and caps value at `5*os.cpu_count()`.\n\n    Args:\n        arg (int): Desired number of processes\n\n    Returns;\n        (int): Number of processes capped to `5*os.cpu_count()`\n    \"\"\"\n    arg = int(arg)\n    max_processes = 5*os.cpu_count()\n    if arg &gt; max_processes:\n        print(\n            f'User-specified ({arg = }) exceeds ({max_processes = }).'\n            f'Process count will be set to ({max_processes = })'\n        )\n    return min(arg, max_processes)\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.TrendifyDirectory","title":"TrendifyDirectory","text":"<pre><code>TrendifyDirectory(short_flag: str, full_flag: str)\n</code></pre> <p>Parses the <code>--trendify-directory</code> argument from CLI</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>def __init__(self, short_flag: str, full_flag: str):\n    self._short_flag = short_flag\n    self._full_flag = full_flag\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.TrendifyDirectory.process_argument","title":"process_argument","text":"<pre><code>process_argument(arg: str) -&gt; List[Path]\n</code></pre> <p>Converts CLI input to list of directories over which user-specified data product generator method will be mapped.</p> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>str</code> <p>Directories or glob string from CLI</p> required <p>Returns:</p> Type Description <code>FileManager</code> <p>List of directories over which to map the user-specified product generator</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>def process_argument(self, arg: str) -&gt; List[Path]:\n    \"\"\"\n    Converts CLI input to list of directories over which user-specified data product generator method will be mapped.\n\n    Args:\n        arg (str): Directories or glob string from CLI\n\n    Returns:\n        (FileManager): List of directories over which to map the user-specified product generator\n    \"\"\"\n    return FileManager(arg)\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.UserMethod","title":"UserMethod","text":"<p>Defines arguments parsed from command line</p>"},{"location":"reference/trendify/CLI/#trendify.CLI.UserMethod.add_argument","title":"add_argument  <code>classmethod</code>","text":"<pre><code>add_argument(parser: ArgumentParser)\n</code></pre> <p>Defines the argument parsing from command line</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@classmethod\ndef add_argument(cls, parser: argparse.ArgumentParser):\n    \"\"\"Defines the argument parsing from command line\"\"\"\n    parser.add_argument(\n        '-g', \n        f'--{cls._NAME}', \n        required=True,\n        help=(\n            'Sepcify method `product_generator(workdir: Path) -&gt; List[DataProduct]` method to map over input directories.'\n            '\\n\\t\\tUse the following formats:'\n            '\\n\\t\\tpackage.module,'\n            '\\n\\t\\tpackage.module:method,'\n            '\\n\\t\\tpackage.module:Class.method,'\n            '\\n\\t\\t/absolute/path/to/module.py,'\n            '\\n\\t\\t/absolute/path/to/module.py:method,'\n            '\\n\\t\\t/absolute/path/to/module.py:Class.method,'\n            '\\n\\t\\t./relative/path/to/module.py,'\n            '\\n\\t\\t./relative/path/to/module:method,'\n            '\\n\\t\\t./relative/path/to/module:Class.method'\n        )\n    )\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.UserMethod.process_argument","title":"process_argument  <code>staticmethod</code>","text":"<pre><code>process_argument(arg: str) -&gt; ProductGenerator\n</code></pre> <p>Imports python method based on user CLI input</p> <p>Parameters:</p> Name Type Description Default <code>arg</code> <code>str</code> <p>Method to be imported in the form <code>package.module:method</code> or <code>file/path.py:method</code>. <code>method</code> can be replaced be <code>Class.method</code>.  File path can be either relative or absolute.</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>User-specified method to be mapped over raw data directories.</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>@staticmethod\ndef process_argument(arg: str) -&gt; API.ProductGenerator:\n    \"\"\"\n    Imports python method based on user CLI input\n\n    Args:\n        arg (str): Method to be imported in the form `package.module:method` or `file/path.py:method`.\n            `method` can be replaced be `Class.method`.  File path can be either relative or absolute.\n\n    Returns:\n        (Callable): User-specified method to be mapped over raw data directories.\n    \"\"\"\n    msplit = arg.split(':')\n    assert 1 &lt;= len(msplit) &lt;= 2\n    module_path = msplit[0]\n    method_name = msplit[1] if len(msplit) == 2 else None\n\n    if Path(module_path).exists():\n        module = _import_from_path(Path(module_path).name, Path(module_path))\n    else:\n        module = importlib.import_module(name=module_path)\n\n    obj = module\n    for arg in method_name.split('.'):\n        obj = getattr(obj, arg)\n    return obj\n</code></pre>"},{"location":"reference/trendify/CLI/#trendify.CLI.trendify","title":"trendify","text":"<pre><code>trendify()\n</code></pre> <p>Defines the command line interface script installed with python package.</p> <p>Run the help via <code>trendify -h</code>.</p> Source code in <code>src/trendify/CLI.py</code> <pre><code>def trendify():\n    \"\"\"\n    Defines the command line interface script installed with python package.\n\n    Run the help via `trendify -h`.\n    \"\"\"\n\n    # Main parser\n    parser = argparse.ArgumentParser(\n        prog='trendify', \n        usage='Generate visual data products and static/interactives assets from raw data',\n    )\n    actions = parser.add_subparsers(title='Sub Commands', dest='command', metavar='')\n\n    output_dir = TrendifyDirectory('o', 'output-directory')\n    ''' Products '''\n    ### Products Make ###\n    products_make = actions.add_parser('products-make', help='Makes products or assets')\n    InputDirectories.add_argument(products_make)\n    UserMethod.add_argument(products_make)\n    NProcs.add_argument(products_make)\n    DataProductsFileName.add_argument(products_make)\n    ### Products Sort ###\n    products_sort = actions.add_parser('products-sort', help='Sorts data products by tags')\n    InputDirectories.add_argument(products_sort)\n    output_dir.add_argument(products_sort)\n    NProcs.add_argument(products_sort)\n    DataProductsFileName.add_argument(products_sort)\n    ### Products Serve ###\n    products_serve = actions.add_parser('products-serve', help='Serves data products to URL endpoint at 0.0.0.0')\n    products_serve.add_argument('trendify_output_directory')\n    products_serve.add_argument('--host', type=str, help='What addres to serve the data to', default='0.0.0.0')\n    products_serve.add_argument('--port', type=int, help='What port to serve the data on', default=8000)\n\n    ''' Assets '''\n    ### Assets Make Static\n    assets_make_static = actions.add_parser('assets-make-static', help='Makes static assets')\n    assets_make_static.add_argument('trendify_output_directory')\n    NProcs.add_argument(assets_make_static)\n    ### Assets Make Interactive\n    assets_make_interactive = actions.add_parser('assets-make-interactive', help='Makes interactive assets')\n    interactive_asset_types = assets_make_interactive.add_subparsers(title='Interactive Asset Type', dest='interactive_asset_type')\n    ## Assets Make Interactive Grafana\n    assets_make_interactive_grafana = interactive_asset_types.add_parser('grafana', help='Makes Grafana dashboard')\n    assets_make_interactive_grafana.add_argument('trendify_output_directory')\n    assets_make_interactive_grafana.add_argument('--protocol', type=str, help='What communication protocol is used to serve the data on', default='http')\n    assets_make_interactive_grafana.add_argument('--host', type=str, help='What addres to serve the data to', default='0.0.0.0')\n    assets_make_interactive_grafana.add_argument('--port', type=int, help='What port to serve the data on', default=8000)\n    NProcs.add_argument(assets_make_interactive_grafana)\n\n    ''' Make '''\n    make = actions.add_parser('make', help='Generates products and assets.  Run with -h flag for info on subcommands.')\n    make_actions = make.add_subparsers(title='Targets', dest='target', metavar='')\n    # Static\n    make_static = make_actions.add_parser('static', help='Generates static assets after running products make and sort')\n    InputDirectories.add_argument(make_static)\n    UserMethod.add_argument(make_static)\n    NProcs.add_argument(make_static)\n    output_dir.add_argument(make_static)\n    DataProductsFileName.add_argument(make_static)\n    # Interactive Grafana\n    make_grafana = make_actions.add_parser('grafana', help='Generates Grafana dashboard after running products make and sort')\n    InputDirectories.add_argument(make_grafana)\n    UserMethod.add_argument(make_grafana)\n    NProcs.add_argument(make_grafana)\n    output_dir.add_argument(make_grafana)\n    DataProductsFileName.add_argument(make_grafana)\n    make_grafana.add_argument('--protocol', type=str, help='What communication protocol is used to serve the data on', default='http')\n    make_grafana.add_argument('--host', type=str, help='What addres to serve the data to', default='0.0.0.0')\n    make_grafana.add_argument('--port', type=int, help='What port to serve the data on', default=8000)\n    # All\n    make_grafana = make_actions.add_parser('all', help='Generates all assets after running products make and sort')\n    InputDirectories.add_argument(make_grafana)\n    UserMethod.add_argument(make_grafana)\n    NProcs.add_argument(make_grafana)\n    output_dir.add_argument(make_grafana)\n    DataProductsFileName.add_argument(make_grafana)\n    make_grafana.add_argument('--protocol', type=str, help='What communication protocol is used to serve the data on', default='http')\n    make_grafana.add_argument('--host', type=str, help='What addres to serve the data to', default='0.0.0.0')\n    make_grafana.add_argument('--port', type=int, help='What port to serve the data on', default=8000)\n\n    # Test\n    args = parser.parse_args()\n    match args.command:\n        case 'products-make':\n            API.make_products(\n                product_generator=UserMethod.get_from_namespace(args),\n                data_dirs=InputDirectories.get_from_namespace(args),\n                n_procs=NProcs.get_from_namespace(args),\n                data_products_fname=DataProductsFileName.get_from_namespace(args),\n            )\n        case 'products-sort':\n            API.sort_products(\n                data_dirs=InputDirectories.get_from_namespace(args),\n                output_dir=output_dir.get_from_namespace(args).products_dir,\n                n_procs=NProcs.get_from_namespace(args),\n                data_products_fname=DataProductsFileName.get_from_namespace(args),\n            )\n        case 'products-serve':\n            TrendifyProductServerLocal.get_new(\n                products_dir=FileManager(args.trendify_output_directory).products_dir,\n                name=__name__\n            ).run(\n                host=args.host,\n                port=args.port,\n            )\n        case 'assets-make-static':\n            API.make_tables_and_figures(\n                products_dir=FileManager(args.trendify_output_directory).products_dir,\n                output_dir=FileManager(args.trendify_output_directory).static_assets_dir,\n                n_procs=NProcs.get_from_namespace(args),\n            )\n        case 'assets-make-interactive':\n            match args.interactive_asset_type:\n                case 'grafana':\n                    API.make_grafana_dashboard(\n                        products_dir=FileManager(args.trendify_output_directory).products_dir,\n                        output_dir=FileManager(args.trendify_output_directory).grafana_dir,\n                        protocol=args.protocol,\n                        host=args.host,\n                        port=args.port,\n                        n_procs=NProcs.get_from_namespace(args),\n                    )\n                case _:\n                    raise NotImplementedError\n        case 'make':\n            um = UserMethod.get_from_namespace(args)\n            ip = InputDirectories.get_from_namespace(args)\n            np = NProcs.get_from_namespace(args)\n            td = output_dir.get_from_namespace(args)\n            fn = DataProductsFileName.get_from_namespace(args)\n            match args.target:\n                case 'static':\n                    API.make_products(product_generator=um, data_dirs=ip, n_procs=np, data_products_fname=fn)\n                    API.sort_products(data_dirs=ip, output_dir=td.products_dir, n_procs=np, data_products_fname=fn)\n                    API.make_tables_and_figures(products_dir=td.products_dir, output_dir=td.static_assets_dir, n_procs=np)\n                case 'grafana':\n                    API.make_products(product_generator=um, data_dirs=ip, n_procs=np, data_products_fname=fn)\n                    API.sort_products(data_dirs=ip, output_dir=td.products_dir, n_procs=np, data_products_fname=fn)\n                    protocol: str = args.protocol\n                    h: str = args.host\n                    p: int = args.port\n                    API.make_grafana_dashboard(\n                        products_dir=td.products_dir,\n                        output_dir=td.grafana_dir,\n                        protocol=protocol,\n                        host=h,\n                        port=p,\n                        n_procs=np,\n                    )\n                    TrendifyProductServerLocal.get_new(products_dir=td.products_dir, name=__name__).run(host=h, port=p)\n                case 'all':\n                    API.make_products(product_generator=um, data_dirs=ip, n_procs=np, data_products_fname=fn)\n                    API.sort_products(data_dirs=ip, output_dir=td.products_dir, n_procs=np, data_products_fname=fn)\n                    protocol: str = args.protocol\n                    h: str = args.host\n                    p: int = args.port\n                    API.make_grafana_dashboard(\n                        products_dir=td.products_dir,\n                        output_dir=td.grafana_dir,\n                        protocol=protocol,\n                        host=h,\n                        port=p,\n                        n_procs=np,\n                    )\n                    API.make_tables_and_figures(products_dir=td.products_dir, output_dir=td.static_assets_dir, n_procs=np)\n                    TrendifyProductServerLocal.get_new(products_dir=td.products_dir, name=__name__).run(host=h, port=p)\n</code></pre>"},{"location":"reference/trendify/examples/","title":"examples","text":""},{"location":"reference/trendify/examples/#trendify.examples","title":"examples","text":"<p>Module defines a method for making sample data and defines a</p>"},{"location":"reference/trendify/examples/#trendify.examples.Channels","title":"Channels","text":"<p>               Bases: <code>StrEnum</code></p> <p>Attributes:</p> Name Type Description <code>time</code> <code>str</code> <p><code>'time'</code></p> <code>wave1</code> <code>str</code> <p><code>'wave1'</code></p> <code>wave2</code> <code>str</code> <p><code>'wave2'</code></p> <code>wave3</code> <code>str</code> <p><code>'wave3'</code></p>"},{"location":"reference/trendify/examples/#trendify.examples.example_data_product_generator","title":"example_data_product_generator","text":"<pre><code>example_data_product_generator(workdir: Path) -&gt; ProductList\n</code></pre> <p>Processes the generated sample data in given workdir returning several types of data products.</p> <p>Parameters:</p> Name Type Description Default <code>workdir</code> <code>Path</code> <p>Directory containing sample data.</p> required Source code in <code>src/trendify/examples.py</code> <pre><code>def example_data_product_generator(workdir: Path) -&gt; trendify.ProductList:\n    \"\"\"\n    Processes the generated sample data in given workdir returning several types of data products.\n\n    Args:\n        workdir (Path): Directory containing sample data.\n    \"\"\"\n    products = []\n\n    df = pd.read_csv(workdir.joinpath('results.csv'))\n    df = df.set_index(Channels.time.name, drop=True)\n\n    colors = list(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n\n    traces = [\n        trendify.Trace2D.from_xy(\n            x=df.index,\n            y=df[col].values,\n            tags=['trace_plot'],\n            pen=trendify.Pen(label=col, color=colors[list(Channels).index(col)]),\n            format2d=trendify.Format2D(title_legend='Column'),\n        ).append_to_list(products)\n        for col in df.columns\n    ]\n\n    for trace in traces:\n        trendify.Point2D(\n            x=workdir.name,\n            y=len(trace.y),\n            marker=trendify.Marker(\n                size=10,\n                label=trace.pen.label,\n                color=trace.pen.color,\n            ),\n            format2d=trendify.Format2D(title_fig='N Points'),\n            tags=['scatter_plot'],\n        ).append_to_list(products)\n\n    for name, series in df.items():\n        trendify.TableEntry(\n            row=workdir.name,\n            col=name,\n            value=len(series),\n            tags=['table'],\n            unit=None,\n        ).append_to_list(products)\n\n    return products\n</code></pre>"},{"location":"reference/trendify/examples/#trendify.examples.make_example_data","title":"make_example_data","text":"<pre><code>make_example_data(workdir: Path, n_folders: int = 10)\n</code></pre> <p>Makes some sample data from which to generate products</p> <p>Parameters:</p> Name Type Description Default <code>workdir</code> <code>Path</code> <p>Directory in which the sample data is to be generated</p> required <code>n_folders</code> <code>int</code> <p>Number of sample data files to generate (in separate subfolders).</p> <code>10</code> Source code in <code>src/trendify/examples.py</code> <pre><code>def make_example_data(workdir: Path, n_folders: int = 10):\n    \"\"\"\n    Makes some sample data from which to generate products\n\n    Args:\n        workdir (Path): Directory in which the sample data is to be generated\n        n_folders (int): Number of sample data files to generate (in separate subfolders).\n    \"\"\"\n    models_dir = workdir.joinpath('models')\n    models_dir.mkdir(parents=True, exist_ok=True)\n\n    for n in range(n_folders):\n        subdir = models_dir.joinpath(str(n))\n        subdir.mkdir(exist_ok=True, parents=True)\n\n        n_samples = np.random.randint(low=40, high=50)\n        t = np.linspace(0, 1, n_samples)\n        periods = [1, 2, 3]\n        amplitudes = np.random.uniform(low=0.5, high=1.5, size=3)\n\n        n_inputs = {'n_samples': n_samples}\n        p_inputs = {f'p{n}': p for n, p in enumerate(periods)}\n        a_inputs = {f'a{n}': a for n, a in enumerate(amplitudes)}\n        inputs = {}\n        inputs.update(n_inputs)\n        inputs.update(p_inputs)\n        inputs.update(a_inputs)\n        pd.Series(inputs).to_csv(subdir.joinpath('stdin.csv'), header=False)\n\n        d = [t] + [a*np.sin(t*(2*np.pi/p)) for p, a in zip(periods, amplitudes)]\n        df = pd.DataFrame(np.array(d).transpose(), columns=[e.name for e in Channels])\n        df.to_csv(subdir.joinpath('results.csv'), index=False)\n\n    csv_files = list(models_dir.glob('**/stdin.csv'))\n    csv_files.sort()\n    input_series = []\n    for csv in csv_files:\n        series: pd.Series = pd.read_csv(csv, index_col=0, header=None).squeeze() \n        series.name = int(csv.parent.stem)\n        input_series.append(series)\n</code></pre>"},{"location":"reference/trendify/examples/#trendify.examples.make_sample_data","title":"make_sample_data","text":"<pre><code>make_sample_data()\n</code></pre> <p>Generates sample data to run the trendify code on</p> Source code in <code>src/trendify/examples.py</code> <pre><code>def make_sample_data():\n    \"\"\"\n    Generates sample data to run the trendify code on\n    \"\"\"\n    from trendify.examples import make_example_data\n    import argparse\n    parser = argparse.ArgumentParser(\n        prog='make_sample_data_for_trendify',\n    )\n    parser.add_argument(\n        '-wd',\n        '--working-directory',\n        required=True,\n        help='Directory to be created and filled with sample data from a batch run',\n    )\n    parser.add_argument(\n        '-n', \n        '--number-of-data-sets',\n        type=int,\n        default=5,\n        help='Number of sample data sets to generate',\n    )\n    args = parser.parse_args()\n    make_example_data(\n        workdir=Path(args.working_directory),\n        n_folders=args.number_of_data_sets,\n    )\n</code></pre>"},{"location":"reference/trendify/local_server/","title":"local_server","text":""},{"location":"reference/trendify/local_server/#trendify.local_server","title":"local_server","text":"<p>Defines Flask server for providing data products on local system</p>"},{"location":"reference/trendify/local_server/#trendify.local_server.ProductGetter","title":"ProductGetter  <code>dataclass</code>","text":"<pre><code>ProductGetter(trendy_dir: Path)\n</code></pre> <p>Attributes:</p> Name Type Description <code>trendy_dir</code> <code>Path</code> <p>Path for trendify</p>"},{"location":"reference/trendify/server/","title":"server","text":""},{"location":"reference/trendify/server/#trendify.server","title":"server","text":"<p>Defines database server for DataProductCollection from analyses</p>"},{"location":"reference/trendify/server/#trendify.server.get_data_products","title":"get_data_products","text":"<pre><code>get_data_products(\n    analysis: str = \"workdir.products\", tag: str = \"trace_plots\", product_type: str = \"DataProduct\"\n)\n</code></pre> Traces <p>parse-json | project \"elements\" | extend \"label\"=\"pen.label\" | mv-expand \"points\" | extend \"x\"=\"points.x\", \"y\"=\"points.y\" | project \"label\", \"x\", \"y\" | pivot sum(\"y\"), \"x\", \"label\" | project \"label\", \"x\", \"y\"</p> Source code in <code>src/trendify/server.py</code> <pre><code>@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/&lt;product_type&gt;')\n@app.route('/data_products/&lt;analysis&gt;/&lt;tag&gt;/&lt;product_type&gt;/')\ndef get_data_products(\n        analysis: str = 'workdir.products',\n        tag: str = 'trace_plots',\n        product_type: str = 'DataProduct',\n    ):\n    \"\"\"\n    Example: Traces\n        parse-json\n        | project \"elements\"\n        | extend \"label\"=\"pen.label\"\n        | mv-expand \"points\"\n        | extend \"x\"=\"points.x\", \"y\"=\"points.y\"\n        | project \"label\", \"x\", \"y\"\n        | pivot sum(\"y\"), \"x\", \"label\"\n        | project \"label\", \"x\", \"y\"\n    \"\"\"\n    FAILED_RETURN_VALUE = None\n    query_return = FAILED_RETURN_VALUE\n    product_type = str(product_type)\n\n    match product_type:\n        case DataProduct.__name__:\n            filter_type = DataProduct\n        case XYData.__name__:\n            filter_type = XYData\n        case Trace2D.__name__:\n            filter_type = Trace2D\n        case Point2D.__name__:\n            filter_type = Point2D\n        case TableEntry.__name__:\n            filter_type = TableEntry\n        case HistogramEntry.__name__:\n            filter_type = HistogramEntry\n        case _:\n            query_return = f'{product_type = } should be in {valid_types_names_list}'\n            return query_return\n\n    try:\n        analysis = str(analysis)\n        analysis_path_components = analysis.split('.') if '.' in analysis else [analysis]\n        tag = str(tag)\n        tag_path_components = tag.split('.') if '.' in tag else [tag]\n        collection_path_components = analysis_path_components + tag_path_components\n        data_dir = DATABASE_ROOT.joinpath(*tuple(analysis_path_components))\n        collection_dir = data_dir.joinpath(*tuple(tag_path_components))\n        assert not any(('.' in x) for x in collection_path_components)\n        assert collection_dir.is_relative_to(data_dir)\n    except AssertionError:\n        query_return = f'Do not try to access stuff outside of {data_dir = }'\n        print(f'Do not try to access stuff outside of {data_dir = }')\n        return query_return\n\n    data: DataProductCollection = DataProductCollection.collect_from_all_jsons(collection_dir)\n    if data is None:\n        return f'Did not find data product jsons in {collection_dir}'\n    formatted_tag = (\n        tag_path_components[0] \n        if len(tag_path_components) == 1 \n        else tuple(tag_path_components)\n    )\n    filtered_data = data.get_products(\n        tag=formatted_tag,\n        object_type=filter_type,\n    )\n    query_return = filtered_data.model_dump_json()\n    return query_return\n</code></pre>"}]}